
/Users/nicholas/Desktop/argon-test/argon-test/target/1.4.4/argon/argon-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016bbc  2**0
                  CONTENTS
  4 .data         00000070  2003e348  000d6b20  0000e348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000438  2003e3b8  2003e3b8  0001e3b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6b90  000d6b90  00016b90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6bb8  000d6bb8  00016bb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000db798  00000000  00000000  00016bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001133d  00000000  00000000  000f2354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001dd9c  00000000  00000000  00103691  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  0012142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004348  00000000  00000000  00123815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036703  00000000  00000000  00127b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002987c  00000000  00000000  0015e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001052b7  00000000  00000000  00187adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c8b0  00000000  00000000  0028cd94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fafb 	bl	d662c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fb00 	bl	d6642 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e348 	.word	0x2003e348
   d404c:	000d6b20 	.word	0x000d6b20
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e3b8 	.word	0x2003e3b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fbdd 	bl	d581c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6b20 	.word	0x000d6b20
   d4084:	000d6ae0 	.word	0x000d6ae0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b834 	b.w	d40f4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8fd 	bl	d428c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb8f 	b.w	d57b8 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bd73 	b.w	d4b84 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd71 	b.w	d4b84 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z3zcdv>:

void zcd() {
  static int state = HIGH;
  static int numInterrupts = 0;
  digitalWrite(led, state);
  numInterrupts++;
   d40b4:	b510      	push	{r4, lr}
  numInterrupts = numInterrupts % SLOW_DOWN_FACTOR;
  if (numInterrupts == (SLOW_DOWN_FACTOR-1)) {
    state = !state;
   d40b6:	4b0c      	ldr	r3, [pc, #48]	; (d40e8 <_Z3zcdv+0x34>)
   d40b8:	4c0c      	ldr	r4, [pc, #48]	; (d40ec <_Z3zcdv+0x38>)
   d40ba:	8818      	ldrh	r0, [r3, #0]
   d40bc:	7821      	ldrb	r1, [r4, #0]
   d40be:	f001 fbfc 	bl	d58ba <digitalWrite>
  }
   d40c2:	490b      	ldr	r1, [pc, #44]	; (d40f0 <_Z3zcdv+0x3c>)
} 
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	1c5a      	adds	r2, r3, #1
   d40c8:	2303      	movs	r3, #3
   d40ca:	fb92 f3f3 	sdiv	r3, r2, r3
   d40ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d40d2:	1ad3      	subs	r3, r2, r3

   d40d4:	2b02      	cmp	r3, #2
  numInterrupts++;
  numInterrupts = numInterrupts % SLOW_DOWN_FACTOR;
  if (numInterrupts == (SLOW_DOWN_FACTOR-1)) {
    state = !state;
  }
} 
   d40d6:	600b      	str	r3, [r1, #0]

void printMCP39F521Data(UpbeatLabs_MCP39F521_FormattedData *data)
   d40d8:	bf01      	itttt	eq
   d40da:	6823      	ldreq	r3, [r4, #0]
   d40dc:	fab3 f383 	clzeq	r3, r3
   d40e0:	095b      	lsreq	r3, r3, #5
   d40e2:	6023      	streq	r3, [r4, #0]
   d40e4:	bd10      	pop	{r4, pc}
   d40e6:	bf00      	nop
   d40e8:	2003e348 	.word	0x2003e348
   d40ec:	2003e34c 	.word	0x2003e34c
   d40f0:	2003e3bc 	.word	0x2003e3bc

000d40f4 <setup>:
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();

void setup() {                
   d40f4:	b507      	push	{r0, r1, r2, lr}
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);     
   d40f6:	4b12      	ldr	r3, [pc, #72]	; (d4140 <setup+0x4c>)
   d40f8:	2101      	movs	r1, #1
   d40fa:	8818      	ldrh	r0, [r3, #0]
   d40fc:	f001 fbcc 	bl	d5898 <pinMode>
  attachInterrupt(0, zcd, CHANGE);
   d4100:	2200      	movs	r2, #0
   d4102:	9200      	str	r2, [sp, #0]
   d4104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4108:	4610      	mov	r0, r2
   d410a:	490e      	ldr	r1, [pc, #56]	; (d4144 <setup+0x50>)
   d410c:	f000 fdfe 	bl	d4d0c <_Z15attachInterrupttPFvvE13InterruptModeah>
  Serial.begin(9600);  //turn on serial communication  
   d4110:	f001 fad0 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4114:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4118:	f001 fac0 	bl	d569c <_ZN9USBSerial5beginEl>
  wattson.begin(0x74); // Pass in the appropriate address. Defaults to 0x74
   d411c:	f001 faca 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4120:	4909      	ldr	r1, [pc, #36]	; (d4148 <setup+0x54>)
   d4122:	f001 f828 	bl	d5176 <_ZN5Print7printlnEPKc>
}
   d4126:	f001 fac5 	bl	d56b4 <_Z16_fetch_usbserialv>
   d412a:	4908      	ldr	r1, [pc, #32]	; (d414c <setup+0x58>)
   d412c:	f001 f823 	bl	d5176 <_ZN5Print7printlnEPKc>
 
void loop() {
   d4130:	4807      	ldr	r0, [pc, #28]	; (d4150 <setup+0x5c>)
   d4132:	2174      	movs	r1, #116	; 0x74
  UpbeatLabs_MCP39F521_Data data;
   d4134:	b003      	add	sp, #12
   d4136:	f85d eb04 	ldr.w	lr, [sp], #4
  attachInterrupt(0, zcd, CHANGE);
  Serial.begin(9600);  //turn on serial communication  
  wattson.begin(0x74); // Pass in the appropriate address. Defaults to 0x74
}
 
void loop() {
   d413a:	f000 bb22 	b.w	d4782 <_ZN20UpbeatLabs_MCP39F5215beginEh>
   d413e:	bf00      	nop
   d4140:	2003e348 	.word	0x2003e348
   d4144:	000d40b5 	.word	0x000d40b5
   d4148:	000d66c8 	.word	0x000d66c8
   d414c:	000d66fb 	.word	0x000d66fb
   d4150:	2003e3c0 	.word	0x2003e3c0

000d4154 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData>:
void printMCP39F521Data(UpbeatLabs_MCP39F521_FormattedData *data)
{
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
   d4154:	b538      	push	{r3, r4, r5, lr}
   d4156:	4604      	mov	r4, r0
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
   d4158:	f001 faac 	bl	d56b4 <_Z16_fetch_usbserialv>
   d415c:	4943      	ldr	r1, [pc, #268]	; (d426c <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x118>)
   d415e:	f000 fffa 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d4162:	f001 faa7 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4166:	4605      	mov	r5, r0
   d4168:	6860      	ldr	r0, [r4, #4]
   d416a:	f001 feb5 	bl	d5ed8 <__aeabi_f2d>
   d416e:	ec41 0b10 	vmov	d0, r0, r1
   d4172:	2104      	movs	r1, #4
   d4174:	4628      	mov	r0, r5
   d4176:	f001 f929 	bl	d53cc <_ZN5Print7printlnEdi>
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
   d417a:	f001 fa9b 	bl	d56b4 <_Z16_fetch_usbserialv>
   d417e:	493c      	ldr	r1, [pc, #240]	; (d4270 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x11c>)
   d4180:	f000 ffe9 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d4184:	f001 fa96 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4188:	4605      	mov	r5, r0
   d418a:	6960      	ldr	r0, [r4, #20]
   d418c:	f001 fea4 	bl	d5ed8 <__aeabi_f2d>
   d4190:	ec41 0b10 	vmov	d0, r0, r1
   d4194:	2104      	movs	r1, #4
   d4196:	4628      	mov	r0, r5
   d4198:	f001 f918 	bl	d53cc <_ZN5Print7printlnEdi>
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
   d419c:	f001 fa8a 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41a0:	4934      	ldr	r1, [pc, #208]	; (d4274 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x120>)
   d41a2:	f000 ffd8 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d41a6:	f001 fa85 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41aa:	4605      	mov	r5, r0
   d41ac:	68a0      	ldr	r0, [r4, #8]
   d41ae:	f001 fe93 	bl	d5ed8 <__aeabi_f2d>
   d41b2:	ec41 0b10 	vmov	d0, r0, r1
   d41b6:	2104      	movs	r1, #4
   d41b8:	4628      	mov	r0, r5
   d41ba:	f001 f907 	bl	d53cc <_ZN5Print7printlnEdi>
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
   d41be:	f001 fa79 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41c2:	492d      	ldr	r1, [pc, #180]	; (d4278 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x124>)
   d41c4:	f000 ffc0 	bl	d5148 <_ZN5Print5printEPKc>
   d41c8:	f001 fa74 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41cc:	4605      	mov	r5, r0
   d41ce:	68e0      	ldr	r0, [r4, #12]
   d41d0:	f001 fe82 	bl	d5ed8 <__aeabi_f2d>
   d41d4:	ec41 0b10 	vmov	d0, r0, r1
   d41d8:	2104      	movs	r1, #4
   d41da:	4628      	mov	r0, r5
   d41dc:	f001 f8f6 	bl	d53cc <_ZN5Print7printlnEdi>
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
   d41e0:	f001 fa68 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41e4:	4925      	ldr	r1, [pc, #148]	; (d427c <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x128>)
   d41e6:	f000 ffb6 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d41ea:	f001 fa63 	bl	d56b4 <_Z16_fetch_usbserialv>
   d41ee:	4605      	mov	r5, r0
   d41f0:	6920      	ldr	r0, [r4, #16]
   d41f2:	f001 fe71 	bl	d5ed8 <__aeabi_f2d>
   d41f6:	ec41 0b10 	vmov	d0, r0, r1
   d41fa:	2104      	movs	r1, #4
   d41fc:	4628      	mov	r0, r5
   d41fe:	f001 f8e5 	bl	d53cc <_ZN5Print7printlnEdi>
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d4202:	f001 fa57 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4206:	491e      	ldr	r1, [pc, #120]	; (d4280 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x12c>)
   d4208:	f000 ffa5 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d420c:	f001 fa52 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4210:	4605      	mov	r5, r0
   d4212:	69a0      	ldr	r0, [r4, #24]
   d4214:	f001 fe60 	bl	d5ed8 <__aeabi_f2d>
   d4218:	ec41 0b10 	vmov	d0, r0, r1
   d421c:	2104      	movs	r1, #4
   d421e:	4628      	mov	r0, r5
   d4220:	f001 f8d4 	bl	d53cc <_ZN5Print7printlnEdi>
   d4224:	f001 fa46 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4228:	4916      	ldr	r1, [pc, #88]	; (d4284 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x130>)
   d422a:	f000 ff94 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d422e:	f001 fa41 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4232:	4605      	mov	r5, r0
   d4234:	69e0      	ldr	r0, [r4, #28]
   d4236:	f001 fe4f 	bl	d5ed8 <__aeabi_f2d>
   d423a:	ec41 0b10 	vmov	d0, r0, r1
   d423e:	2104      	movs	r1, #4
   d4240:	4628      	mov	r0, r5
   d4242:	f001 f8c3 	bl	d53cc <_ZN5Print7printlnEdi>
   d4246:	f001 fa35 	bl	d56b4 <_Z16_fetch_usbserialv>
   d424a:	490f      	ldr	r1, [pc, #60]	; (d4288 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0x134>)
   d424c:	f000 ff83 	bl	d5156 <_ZN5Print5printEPK19__FlashStringHelper>
   d4250:	f001 fa30 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4254:	4605      	mov	r5, r0
   d4256:	6a20      	ldr	r0, [r4, #32]
   d4258:	f001 fe3e 	bl	d5ed8 <__aeabi_f2d>
   d425c:	ec41 0b10 	vmov	d0, r0, r1
   d4260:	4628      	mov	r0, r5
   d4262:	2104      	movs	r1, #4
   d4264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d4268:	f001 b8b0 	b.w	d53cc <_ZN5Print7printlnEdi>
   d426c:	000d6758 	.word	0x000d6758
   d4270:	000d672e 	.word	0x000d672e
   d4274:	000d6739 	.word	0x000d6739
   d4278:	000d674b 	.word	0x000d674b
   d427c:	000d6763 	.word	0x000d6763
   d4280:	000d6773 	.word	0x000d6773
   d4284:	000d6783 	.word	0x000d6783
   d4288:	000d6795 	.word	0x000d6795

000d428c <loop>:
}
 
void loop() {
  UpbeatLabs_MCP39F521_Data data;
  UpbeatLabs_MCP39F521_FormattedData fData;

   d428c:	b510      	push	{r4, lr}
   d428e:	b090      	sub	sp, #64	; 0x40
  int readMCPretval = wattson.read(&data, NULL);
  if (readMCPretval == UpbeatLabs_MCP39F521::SUCCESS) {
    // Print stuff out
    Serial.write("\x1B" "c"); // Clear the screen on a regular terminal                               
   d4290:	2200      	movs	r2, #0
   d4292:	4669      	mov	r1, sp
   d4294:	4812      	ldr	r0, [pc, #72]	; (d42e0 <loop+0x54>)
   d4296:	f000 f975 	bl	d4584 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData>
    wattson.convertRawData(&data, &fData);
   d429a:	4604      	mov	r4, r0
   d429c:	b978      	cbnz	r0, d42be <loop+0x32>
    printMCP39F521Data(&fData);
  } else {
   d429e:	f001 fa09 	bl	d56b4 <_Z16_fetch_usbserialv>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d42a2:	6803      	ldr	r3, [r0, #0]
   d42a4:	490f      	ldr	r1, [pc, #60]	; (d42e4 <loop+0x58>)
   d42a6:	68db      	ldr	r3, [r3, #12]
   d42a8:	2202      	movs	r2, #2
   d42aa:	4798      	blx	r3
    Serial.print("Error returned! "); Serial.println(readMCPretval);
   d42ac:	aa07      	add	r2, sp, #28
   d42ae:	4669      	mov	r1, sp
   d42b0:	480b      	ldr	r0, [pc, #44]	; (d42e0 <loop+0x54>)
   d42b2:	f000 f829 	bl	d4308 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData>
  }
   d42b6:	a807      	add	r0, sp, #28
   d42b8:	f7ff ff4c 	bl	d4154 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData>
   d42bc:	e00a      	b.n	d42d4 <loop+0x48>

  delay(1000);               // wait for a second
   d42be:	f001 f9f9 	bl	d56b4 <_Z16_fetch_usbserialv>
   d42c2:	4909      	ldr	r1, [pc, #36]	; (d42e8 <loop+0x5c>)
   d42c4:	f000 ff40 	bl	d5148 <_ZN5Print5printEPKc>
   d42c8:	f001 f9f4 	bl	d56b4 <_Z16_fetch_usbserialv>
   d42cc:	220a      	movs	r2, #10
   d42ce:	4621      	mov	r1, r4
   d42d0:	f000 ffc0 	bl	d5254 <_ZN5Print7printlnEii>
}

// Interrupt service routine for ZCD
   d42d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42d8:	f000 fc64 	bl	d4ba4 <delay>
// Since the voltage crosses zero twice in a cycle,
   d42dc:	b010      	add	sp, #64	; 0x40
   d42de:	bd10      	pop	{r4, pc}
   d42e0:	2003e3c0 	.word	0x2003e3c0
   d42e4:	000d67a7 	.word	0x000d67a7
   d42e8:	000d67aa 	.word	0x000d67aa

000d42ec <_GLOBAL__sub_I_led>:
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d42ec:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42ee:	f000 fa9d 	bl	d482c <HAL_Pin_Map>

// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();
   d42f2:	4802      	ldr	r0, [pc, #8]	; (d42fc <_GLOBAL__sub_I_led+0x10>)
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d42f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();
   d42f8:	f000 b802 	b.w	d4300 <_ZN20UpbeatLabs_MCP39F521C1Ev>
   d42fc:	2003e3c0 	.word	0x2003e3c0

000d4300 <_ZN20UpbeatLabs_MCP39F521C1Ev>:
#include <math.h>

// Constructor
UpbeatLabs_MCP39F521::UpbeatLabs_MCP39F521(void) {

}
   d4300:	4770      	bx	lr
   d4302:	0000      	movs	r0, r0
   d4304:	0000      	movs	r0, r0
	...

000d4308 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData>:
// The data returned by the MCP39F521 is all integer. If you want the results in more human-readable format,
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
   d4308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fData->voltageRMS = data->voltageRMS/10.0f;
   d430c:	888b      	ldrh	r3, [r1, #4]
   d430e:	ee07 3a90 	vmov	s15, r3
   d4312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4316:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d431a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
// The data returned by the MCP39F521 is all integer. If you want the results in more human-readable format,
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
   d431e:	4614      	mov	r4, r2
   d4320:	460d      	mov	r5, r1
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;

  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d4322:	260e      	movs	r6, #14
  
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d4324:	f04f 0a01 	mov.w	sl, #1

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d4328:	eddf 6a3f 	vldr	s13, [pc, #252]	; d4428 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x120>
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
   d432c:	ed82 7a01 	vstr	s14, [r2, #4]
  fData->currentRMS = data->currentRMS/10000.0f;
   d4330:	edd1 7a03 	vldr	s15, [r1, #12]
   d4334:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4338:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d433c:	eddf 6a3b 	vldr	s13, [pc, #236]	; d442c <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x124>

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d4340:	ed82 7a05 	vstr	s14, [r2, #20]
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d4344:	88cb      	ldrh	r3, [r1, #6]
   d4346:	ee07 3a90 	vmov	s15, r3
   d434a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d434e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4352:	ed82 7a02 	vstr	s14, [r2, #8]
  // Analog Input Voltage represents ADC output for 10 bit ADC
  // By trial, it's been found that it has a ref voltage of 3.3v
  // So the register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
   d4356:	890b      	ldrh	r3, [r1, #8]
   d4358:	ed9f 7a35 	vldr	s14, [pc, #212]	; d4430 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x128>
   d435c:	ee07 3a90 	vmov	s15, r3
   d4360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4364:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4368:	ee16 0a90 	vmov	r0, s13
   d436c:	f001 fdb4 	bl	d5ed8 <__aeabi_f2d>
   d4370:	a32b      	add	r3, pc, #172	; (adr r3, d4420 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x118>)
   d4372:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4376:	f001 fe03 	bl	d5f80 <__aeabi_dmul>
   d437a:	f002 f8f9 	bl	d6570 <__aeabi_d2f>
   d437e:	60e0      	str	r0, [r4, #12]

  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d4380:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
   d4384:	ea4f 70db 	mov.w	r0, fp, lsr #31
   d4388:	f001 fd94 	bl	d5eb4 <__aeabi_i2d>
   d438c:	f002 f8f0 	bl	d6570 <__aeabi_d2f>
   d4390:	f080 4700 	eor.w	r7, r0, #2147483648	; 0x80000000
  
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d4394:	fa0a f006 	lsl.w	r0, sl, r6
   d4398:	ea00 000b 	and.w	r0, r0, fp
   d439c:	4130      	asrs	r0, r6
   d439e:	f001 fd89 	bl	d5eb4 <__aeabi_i2d>
   d43a2:	4680      	mov	r8, r0
   d43a4:	f1c6 000f 	rsb	r0, r6, #15
   d43a8:	fa0a f000 	lsl.w	r0, sl, r0
   d43ac:	4689      	mov	r9, r1
   d43ae:	f001 fd81 	bl	d5eb4 <__aeabi_i2d>
   d43b2:	4602      	mov	r2, r0
   d43b4:	460b      	mov	r3, r1
   d43b6:	4640      	mov	r0, r8
   d43b8:	4649      	mov	r1, r9
   d43ba:	f001 ff0b 	bl	d61d4 <__aeabi_ddiv>
   d43be:	4680      	mov	r8, r0
   d43c0:	4638      	mov	r0, r7
   d43c2:	4689      	mov	r9, r1
   d43c4:	f001 fd88 	bl	d5ed8 <__aeabi_f2d>
   d43c8:	4602      	mov	r2, r0
   d43ca:	460b      	mov	r3, r1
   d43cc:	4640      	mov	r0, r8
   d43ce:	4649      	mov	r1, r9
   d43d0:	f001 fc24 	bl	d5c1c <__adddf3>
   d43d4:	f002 f8cc 	bl	d6570 <__aeabi_d2f>
   d43d8:	3e01      	subs	r6, #1
  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  
  for(ch=14; ch > 3; ch--)
   d43da:	2e03      	cmp	r6, #3
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d43dc:	4607      	mov	r7, r0
  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  
  for(ch=14; ch > 3; ch--)
   d43de:	d1d9      	bne.n	d4394 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x8c>
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));

  fData->powerFactor = f;
   d43e0:	6120      	str	r0, [r4, #16]

  fData->activePower = data->activePower/100.0f;
   d43e2:	edd5 7a04 	vldr	s15, [r5, #16]
   d43e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   d43ea:	eddf 7a12 	vldr	s15, [pc, #72]	; d4434 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x12c>
   d43ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d43f2:	edc4 6a06 	vstr	s13, [r4, #24]
  fData->reactivePower = data->reactivePower/100.0f;
   d43f6:	ed95 7a05 	vldr	s14, [r5, #20]
   d43fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d43fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4402:	edc4 6a07 	vstr	s13, [r4, #28]
  fData->apparentPower = data->apparentPower/100.0f;
   d4406:	ed95 7a06 	vldr	s14, [r5, #24]
   d440a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d440e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4412:	edc4 6a08 	vstr	s13, [r4, #32]
   d4416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d441a:	bf00      	nop
   d441c:	f3af 8000 	nop.w
   d4420:	66666666 	.word	0x66666666
   d4424:	400a6666 	.word	0x400a6666
   d4428:	461c4000 	.word	0x461c4000
   d442c:	447a0000 	.word	0x447a0000
   d4430:	447fc000 	.word	0x447fc000
   d4434:	42c80000 	.word	0x42c80000

000d4438 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm>:
// Convenience method to check the header and the checksum for the returned data. If all is good,
// this method should return SUCCESS
int UpbeatLabs_MCP39F521::checkHeaderAndChecksum( int numBytesToRead,
                                                  uint8_t *byteArray,
                                                  uint32_t byteArraySize)
{
   d4438:	b570      	push	{r4, r5, r6, lr}
  int i;
  uint8_t checksumTotal = 0;
  uint8_t header = byteArray[0];
  //uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
   d443a:	1853      	adds	r3, r2, r1
                                                  uint8_t *byteArray,
                                                  uint32_t byteArraySize)
{
  int i;
  uint8_t checksumTotal = 0;
  uint8_t header = byteArray[0];
   d443c:	7815      	ldrb	r5, [r2, #0]
  //uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
   d443e:	7898      	ldrb	r0, [r3, #2]
   d4440:	4614      	mov	r4, r2
int UpbeatLabs_MCP39F521::checkHeaderAndChecksum( int numBytesToRead,
                                                  uint8_t *byteArray,
                                                  uint32_t byteArraySize)
{
  int i;
  uint8_t checksumTotal = 0;
   d4442:	2300      	movs	r3, #0
  uint8_t header = byteArray[0];
  //uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
  for (i = 0; i < numBytesToRead + 3 - 1; i++) {
   d4444:	3101      	adds	r1, #1
   d4446:	1aa6      	subs	r6, r4, r2
   d4448:	42b1      	cmp	r1, r6
   d444a:	db04      	blt.n	d4456 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm+0x1e>
    checksumTotal += byteArray[i];
   d444c:	f814 6b01 	ldrb.w	r6, [r4], #1
   d4450:	4433      	add	r3, r6
   d4452:	b2db      	uxtb	r3, r3
  int i;
  uint8_t checksumTotal = 0;
  uint8_t header = byteArray[0];
  //uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
  for (i = 0; i < numBytesToRead + 3 - 1; i++) {
   d4454:	e7f7      	b.n	d4446 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm+0xe>
// Convenience method to check the header of the response.
// If all is good, this will return SUCCESS
int UpbeatLabs_MCP39F521::checkHeader(int header)
{
  int error = SUCCESS;
  if (header != RESPONSE_ACK) {
   d4456:	2d06      	cmp	r5, #6
   d4458:	d004      	beq.n	d4464 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm+0x2c>
    error = ERROR_INCORRECT_HEADER;
    if (header == RESPONSE_CSFAIL) {
      error = ERROR_CHECKSUM_FAIL;
   d445a:	2d51      	cmp	r5, #81	; 0x51
   d445c:	bf14      	ite	ne
   d445e:	2201      	movne	r2, #1
   d4460:	2202      	moveq	r2, #2
   d4462:	e000      	b.n	d4466 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm+0x2e>

// Convenience method to check the header of the response.
// If all is good, this will return SUCCESS
int UpbeatLabs_MCP39F521::checkHeader(int header)
{
  int error = SUCCESS;
   d4464:	2200      	movs	r2, #0
  error = checkHeader(header);
  if (calculatedChecksum != checksum) {
    error = ERROR_CHECKSUM_MISMATCH;
  }
  return error;
}
   d4466:	4283      	cmp	r3, r0
   d4468:	bf0c      	ite	eq
   d446a:	4610      	moveq	r0, r2
   d446c:	2005      	movne	r0, #5
   d446e:	bd70      	pop	{r4, r5, r6, pc}

000d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>:
// --- Private methods ---
// Read the contents of the registers starting with the starting address, up to the number of bytes specified. 
int UpbeatLabs_MCP39F521::registerReadNBytes(int addressHigh, int addressLow,
                                             int numBytesToRead, uint8_t *byteArray,
                                             int byteArraySize)
{
   d4470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4474:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   d4478:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  if (byteArraySize < numBytesToRead + 3) {
   d447c:	f103 0a02 	add.w	sl, r3, #2
   d4480:	45ca      	cmp	sl, r9
// --- Private methods ---
// Read the contents of the registers starting with the starting address, up to the number of bytes specified. 
int UpbeatLabs_MCP39F521::registerReadNBytes(int addressHigh, int addressLow,
                                             int numBytesToRead, uint8_t *byteArray,
                                             int byteArraySize)
{
   d4482:	4607      	mov	r7, r0
   d4484:	461d      	mov	r5, r3
  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  if (byteArraySize < numBytesToRead + 3) {
   d4486:	da73      	bge.n	d4570 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x100>
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
  }
  aucWriteDataBuf[0] = 0xa5; // Header
   d4488:	23a5      	movs	r3, #165	; 0xa5
   d448a:	f88d 3000 	strb.w	r3, [sp]
  aucWriteDataBuf[1] = 0x08; // Num bytes
   d448e:	2308      	movs	r3, #8
   d4490:	f88d 3001 	strb.w	r3, [sp, #1]
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
   d4494:	2341      	movs	r3, #65	; 0x41
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
  aucWriteDataBuf[7] = 0; // Checksum - computed below
   d4496:	2400      	movs	r4, #0
  if (byteArraySize < numBytesToRead + 3) {
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
  }
  aucWriteDataBuf[0] = 0xa5; // Header
  aucWriteDataBuf[1] = 0x08; // Num bytes
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
   d4498:	f88d 3002 	strb.w	r3, [sp, #2]
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
   d449c:	b2ee      	uxtb	r6, r5
  aucWriteDataBuf[0] = 0xa5; // Header
  aucWriteDataBuf[1] = 0x08; // Num bytes
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
   d449e:	234e      	movs	r3, #78	; 0x4e
   d44a0:	f88d 3005 	strb.w	r3, [sp, #5]
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
  }
  aucWriteDataBuf[0] = 0xa5; // Header
  aucWriteDataBuf[1] = 0x08; // Num bytes
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
  aucWriteDataBuf[3] = addressHigh;
   d44a4:	f88d 1003 	strb.w	r1, [sp, #3]
  aucWriteDataBuf[4] = addressLow;
   d44a8:	f88d 2004 	strb.w	r2, [sp, #4]
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
   d44ac:	f88d 6006 	strb.w	r6, [sp, #6]
  aucWriteDataBuf[7] = 0; // Checksum - computed below
   d44b0:	f88d 4007 	strb.w	r4, [sp, #7]
  for(i=0; i<7;i++) {
   d44b4:	4623      	mov	r3, r4
    checksumTotal += aucWriteDataBuf[i];
   d44b6:	f81d 2003 	ldrb.w	r2, [sp, r3]
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
  aucWriteDataBuf[7] = 0; // Checksum - computed below
  for(i=0; i<7;i++) {
   d44ba:	3301      	adds	r3, #1
   d44bc:	2b07      	cmp	r3, #7
    checksumTotal += aucWriteDataBuf[i];
   d44be:	4414      	add	r4, r2
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
  aucWriteDataBuf[7] = 0; // Checksum - computed below
  for(i=0; i<7;i++) {
   d44c0:	d1f9      	bne.n	d44b6 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x46>
    checksumTotal += aucWriteDataBuf[i];
  }
  Serial.print("checksumTotal:: "); Serial.println(checksumTotal);
   d44c2:	f001 f8f7 	bl	d56b4 <_Z16_fetch_usbserialv>
   d44c6:	492d      	ldr	r1, [pc, #180]	; (d457c <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x10c>)
   d44c8:	f000 fe3e 	bl	d5148 <_ZN5Print5printEPKc>
   d44cc:	f001 f8f2 	bl	d56b4 <_Z16_fetch_usbserialv>
   d44d0:	4621      	mov	r1, r4
   d44d2:	220a      	movs	r2, #10
   d44d4:	f000 fe92 	bl	d51fc <_ZN5Print7printlnEmi>
  aucWriteDataBuf[7] = checksumTotal % 256;
   d44d8:	f88d 4007 	strb.w	r4, [sp, #7]
  Wire.beginTransmission(i2c_addr);
   d44dc:	f001 fa06 	bl	d58ec <_Z19__fetch_global_Wirev>
   d44e0:	7839      	ldrb	r1, [r7, #0]
   d44e2:	f000 fc03 	bl	d4cec <_ZN7TwoWire17beginTransmissionEh>
  for(i=0; i< 8; i++) {
   d44e6:	2400      	movs	r4, #0
    Wire.write(aucWriteDataBuf[i]);
   d44e8:	f001 fa00 	bl	d58ec <_Z19__fetch_global_Wirev>
   d44ec:	f81d b004 	ldrb.w	fp, [sp, r4]
   d44f0:	6803      	ldr	r3, [r0, #0]
   d44f2:	4659      	mov	r1, fp
   d44f4:	689b      	ldr	r3, [r3, #8]
   d44f6:	4798      	blx	r3
    Serial.printf("aucWriteDataBuf[%i]:: ", i); Serial.println(aucWriteDataBuf[i]);
   d44f8:	f001 f8dc 	bl	d56b4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d44fc:	4623      	mov	r3, r4
   d44fe:	4a20      	ldr	r2, [pc, #128]	; (d4580 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x110>)
   d4500:	2100      	movs	r1, #0
   d4502:	f000 ff6e 	bl	d53e2 <_ZN5Print11printf_implEbPKcz>
    checksumTotal += aucWriteDataBuf[i];
  }
  Serial.print("checksumTotal:: "); Serial.println(checksumTotal);
  aucWriteDataBuf[7] = checksumTotal % 256;
  Wire.beginTransmission(i2c_addr);
  for(i=0; i< 8; i++) {
   d4506:	3401      	adds	r4, #1
    Wire.write(aucWriteDataBuf[i]);
    Serial.printf("aucWriteDataBuf[%i]:: ", i); Serial.println(aucWriteDataBuf[i]);
   d4508:	f001 f8d4 	bl	d56b4 <_Z16_fetch_usbserialv>
   d450c:	220a      	movs	r2, #10
   d450e:	4659      	mov	r1, fp
   d4510:	f000 fe6a 	bl	d51e8 <_ZN5Print7printlnEhi>
    checksumTotal += aucWriteDataBuf[i];
  }
  Serial.print("checksumTotal:: "); Serial.println(checksumTotal);
  aucWriteDataBuf[7] = checksumTotal % 256;
  Wire.beginTransmission(i2c_addr);
  for(i=0; i< 8; i++) {
   d4514:	2c08      	cmp	r4, #8
   d4516:	d1e7      	bne.n	d44e8 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x78>
    Wire.write(aucWriteDataBuf[i]);
    Serial.printf("aucWriteDataBuf[%i]:: ", i); Serial.println(aucWriteDataBuf[i]);
  }
  Wire.endTransmission();
   d4518:	f001 f9e8 	bl	d58ec <_Z19__fetch_global_Wirev>
   d451c:	f000 fbee 	bl	d4cfc <_ZN7TwoWire15endTransmissionEv>
  delay(100);
   d4520:	2064      	movs	r0, #100	; 0x64
   d4522:	f000 fb3f 	bl	d4ba4 <delay>
  //
  // Read the specified length of data - numBytesToRead + 3 bytes
  //
  Wire.requestFrom(i2c_addr, (uint8_t)(numBytesToRead + 3));
   d4526:	f001 f9e1 	bl	d58ec <_Z19__fetch_global_Wirev>
   d452a:	1cf2      	adds	r2, r6, #3
   d452c:	b2d2      	uxtb	r2, r2
   d452e:	7839      	ldrb	r1, [r7, #0]
   d4530:	f000 fbd9 	bl	d4ce6 <_ZN7TwoWire11requestFromEhh>
  int requestDataLength = Wire.available();
   d4534:	f001 f9da 	bl	d58ec <_Z19__fetch_global_Wirev>
   d4538:	6803      	ldr	r3, [r0, #0]
   d453a:	691b      	ldr	r3, [r3, #16]
   d453c:	4798      	blx	r3
  if (requestDataLength==(numBytesToRead + 3)) {
   d453e:	1ceb      	adds	r3, r5, #3
   d4540:	4298      	cmp	r0, r3
   d4542:	d117      	bne.n	d4574 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x104>
   d4544:	4644      	mov	r4, r8
    for (i = 0; i < numBytesToRead + 3 ; i++) {
   d4546:	ebc8 0304 	rsb	r3, r8, r4
   d454a:	459a      	cmp	sl, r3
   d454c:	db07      	blt.n	d455e <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xee>
      byteArray[i] = Wire.read();
   d454e:	f001 f9cd 	bl	d58ec <_Z19__fetch_global_Wirev>
   d4552:	6803      	ldr	r3, [r0, #0]
   d4554:	695b      	ldr	r3, [r3, #20]
   d4556:	4798      	blx	r3
   d4558:	f804 0b01 	strb.w	r0, [r4], #1
  // Read the specified length of data - numBytesToRead + 3 bytes
  //
  Wire.requestFrom(i2c_addr, (uint8_t)(numBytesToRead + 3));
  int requestDataLength = Wire.available();
  if (requestDataLength==(numBytesToRead + 3)) {
    for (i = 0; i < numBytesToRead + 3 ; i++) {
   d455c:	e7f3      	b.n	d4546 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xd6>
      byteArray[i] = Wire.read();
    }
    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
   d455e:	464b      	mov	r3, r9
   d4560:	4642      	mov	r2, r8
   d4562:	4629      	mov	r1, r5
   d4564:	4638      	mov	r0, r7
  } else {
    // Unexpected. Handle error  
    return ERROR_UNEXPECTED_RESPONSE; 
  }
  return SUCCESS;
}
   d4566:	b003      	add	sp, #12
   d4568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (requestDataLength==(numBytesToRead + 3)) {
    for (i = 0; i < numBytesToRead + 3 ; i++) {
      byteArray[i] = Wire.read();
    }
    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
   d456c:	f7ff bf64 	b.w	d4438 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhm>
{
  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  if (byteArraySize < numBytesToRead + 3) {
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
   d4570:	2004      	movs	r0, #4
   d4572:	e000      	b.n	d4576 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x106>
    }
    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
  } else {
    // Unexpected. Handle error  
    return ERROR_UNEXPECTED_RESPONSE; 
   d4574:	2003      	movs	r0, #3
  }
  return SUCCESS;
}
   d4576:	b003      	add	sp, #12
   d4578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d457c:	000d67bb 	.word	0x000d67bb
   d4580:	000d67cc 	.word	0x000d67cc

000d4584 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData>:
// reactiveEnergyImport, reactiveEnergyExport into two calls
// as the total is 32+3 = 35 bytes otherwise.

int UpbeatLabs_MCP39F521::read(UpbeatLabs_MCP39F521_Data *output,
                               UpbeatLabs_MCP39F521_AccumData *accumOutput)
{
   d4584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4588:	4606      	mov	r6, r0
   d458a:	b08d      	sub	sp, #52	; 0x34
   d458c:	4615      	mov	r5, r2
  //uint8_t aucWriteDataBuf[8];
  uint8_t aucReadDataBuf[35];
  //int i;
  int retval = SUCCESS;

  if (output) {
   d458e:	460c      	mov	r4, r1
   d4590:	2900      	cmp	r1, #0
   d4592:	d044      	beq.n	d461e <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x9a>

    retval = registerReadNBytes(0x00, 0x02, 28, aucReadDataBuf, 35);
   d4594:	2323      	movs	r3, #35	; 0x23
   d4596:	9301      	str	r3, [sp, #4]
   d4598:	ab03      	add	r3, sp, #12
   d459a:	9300      	str	r3, [sp, #0]
   d459c:	2202      	movs	r2, #2
   d459e:	231c      	movs	r3, #28
   d45a0:	2100      	movs	r1, #0
   d45a2:	f7ff ff65 	bl	d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>
  
    if (retval != SUCCESS) {
   d45a6:	2800      	cmp	r0, #0
   d45a8:	f040 80c3 	bne.w	d4732 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {
    
      /* System status */
      output->systemStatus = ((aucReadDataBuf[3] << 8) | aucReadDataBuf[2]);
   d45ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d45b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d45b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45b8:	8023      	strh	r3, [r4, #0]
      output->systemVersion = ((aucReadDataBuf[5] << 8) | aucReadDataBuf[4]);
   d45ba:	f89d 2011 	ldrb.w	r2, [sp, #17]
   d45be:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d45c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45c6:	8063      	strh	r3, [r4, #2]
      output->voltageRMS = ((aucReadDataBuf[7] << 8) | aucReadDataBuf[6]);
   d45c8:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d45cc:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d45d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45d4:	80a3      	strh	r3, [r4, #4]
      output->lineFrequency = ((aucReadDataBuf[9] << 8) | aucReadDataBuf[8]);
   d45d6:	f89d 2015 	ldrb.w	r2, [sp, #21]
   d45da:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d45de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45e2:	80e3      	strh	r3, [r4, #6]
      output->analogInputVoltage = ((aucReadDataBuf[11] << 8) | aucReadDataBuf[10]);
   d45e4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   d45e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d45ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45f0:	8123      	strh	r3, [r4, #8]
      output->powerFactor = (((signed char)aucReadDataBuf[13] << 8) +
                             (unsigned char)aucReadDataBuf[12]);
   d45f2:	f99d 2019 	ldrsb.w	r2, [sp, #25]
   d45f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d45fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d45fe:	8163      	strh	r3, [r4, #10]
    
      output->currentRMS =  ((uint32_t)(aucReadDataBuf[17]) << 24 |
                             (uint32_t)(aucReadDataBuf[16]) << 16 |
                             (uint32_t)(aucReadDataBuf[15]) << 8 |
   d4600:	f8dd 301a 	ldr.w	r3, [sp, #26]
                             aucReadDataBuf[14]);
   d4604:	60e3      	str	r3, [r4, #12]
      output->activePower =  ((uint32_t)(aucReadDataBuf[21]) << 24 |
                              (uint32_t)(aucReadDataBuf[20]) << 16 |
                              (uint32_t)(aucReadDataBuf[19]) << 8 |
   d4606:	f8dd 301e 	ldr.w	r3, [sp, #30]
                              aucReadDataBuf[18]);
   d460a:	6123      	str	r3, [r4, #16]
      output->reactivePower =  ((uint32_t)(aucReadDataBuf[25]) << 24 |
                                (uint32_t)(aucReadDataBuf[24]) << 16 |
                                (uint32_t)(aucReadDataBuf[23]) << 8 |
   d460c:	f8dd 3022 	ldr.w	r3, [sp, #34]	; 0x22
                                aucReadDataBuf[22]);
   d4610:	6163      	str	r3, [r4, #20]
      output->apparentPower =  ((uint32_t)(aucReadDataBuf[29]) << 24 |
                                (uint32_t)(aucReadDataBuf[28]) << 16 |
                                (uint32_t)(aucReadDataBuf[27]) << 8 |
   d4612:	f8dd 3026 	ldr.w	r3, [sp, #38]	; 0x26
                                aucReadDataBuf[26]);
   d4616:	61a3      	str	r3, [r4, #24]
    }
  
    delay(50);
   d4618:	2032      	movs	r0, #50	; 0x32
   d461a:	f000 fac3 	bl	d4ba4 <delay>

  }

  if (accumOutput) {
   d461e:	2d00      	cmp	r5, #0
   d4620:	f000 8086 	beq.w	d4730 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ac>

    retval = registerReadNBytes(0x00, 0x1e, 16, aucReadDataBuf, 19);
   d4624:	2313      	movs	r3, #19
   d4626:	ac03      	add	r4, sp, #12
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	9400      	str	r4, [sp, #0]
   d462c:	2310      	movs	r3, #16
   d462e:	221e      	movs	r2, #30
   d4630:	2100      	movs	r1, #0
   d4632:	4630      	mov	r0, r6
   d4634:	f7ff ff1c 	bl	d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>

    if (retval != SUCCESS) {
   d4638:	2800      	cmp	r0, #0
   d463a:	d17a      	bne.n	d4732 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {
    
      if (_energy_accum_correction_factor == -1)  {
   d463c:	6870      	ldr	r0, [r6, #4]
   d463e:	1c42      	adds	r2, r0, #1
   d4640:	d110      	bne.n	d4664 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0xe0>
                                            ((uint64_t)aucReadDataBuf[8]) << 48 |
                                            ((uint64_t)aucReadDataBuf[7]) << 40 |
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
   d4642:	f8dd 200e 	ldr.w	r2, [sp, #14]
   d4646:	f8dd 3012 	ldr.w	r3, [sp, #18]
                                            (uint64_t)aucReadDataBuf[2]) /
          2;
   d464a:	085b      	lsrs	r3, r3, #1
   d464c:	ea4f 0232 	mov.w	r2, r2, rrx
   d4650:	e9c5 2300 	strd	r2, r3, [r5]
                                            ((uint64_t)aucReadDataBuf[16]) << 48 |
                                            ((uint64_t)aucReadDataBuf[15]) << 40 |
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
   d4654:	f8dd 2016 	ldr.w	r2, [sp, #22]
   d4658:	f8dd 301a 	ldr.w	r3, [sp, #26]
                                            (uint64_t)aucReadDataBuf[10]) /
          2;
   d465c:	085b      	lsrs	r3, r3, #1
   d465e:	ea4f 0232 	mov.w	r2, r2, rrx
   d4662:	e01e      	b.n	d46a2 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x11e>
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
                                            (uint64_t)aucReadDataBuf[2]) *
          ( 1 << _energy_accum_correction_factor);
   d4664:	2201      	movs	r2, #1
   d4666:	fa02 f000 	lsl.w	r0, r2, r0
                                            ((uint64_t)aucReadDataBuf[8]) << 48 |
                                            ((uint64_t)aucReadDataBuf[7]) << 40 |
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
   d466a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d466e:	f8dd 1012 	ldr.w	r1, [sp, #18]
                                            (uint64_t)aucReadDataBuf[2]) *
          ( 1 << _energy_accum_correction_factor);
   d4672:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4676:	fb03 f709 	mul.w	r7, r3, r9
   d467a:	fb00 7701 	mla	r7, r0, r1, r7
   d467e:	fba3 0100 	umull	r0, r1, r3, r0
   d4682:	4439      	add	r1, r7
   d4684:	e9c5 0100 	strd	r0, r1, [r5]
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
                                            (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4688:	6871      	ldr	r1, [r6, #4]
                                            ((uint64_t)aucReadDataBuf[16]) << 48 |
                                            ((uint64_t)aucReadDataBuf[15]) << 40 |
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
   d468a:	f8dd 3016 	ldr.w	r3, [sp, #22]
   d468e:	f8dd 701a 	ldr.w	r7, [sp, #26]
                                            (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4692:	408a      	lsls	r2, r1
   d4694:	17d1      	asrs	r1, r2, #31
   d4696:	4359      	muls	r1, r3
   d4698:	fb02 1107 	mla	r1, r2, r7, r1
   d469c:	fba3 2302 	umull	r2, r3, r3, r2
   d46a0:	440b      	add	r3, r1
   d46a2:	e9c5 2302 	strd	r2, r3, [r5, #8]
      }

    }
  
    delay(50);
   d46a6:	2032      	movs	r0, #50	; 0x32
   d46a8:	f000 fa7c 	bl	d4ba4 <delay>

    retval = registerReadNBytes(0x00, 0x2e, 16, aucReadDataBuf, 19);
   d46ac:	2313      	movs	r3, #19
   d46ae:	9301      	str	r3, [sp, #4]
   d46b0:	9400      	str	r4, [sp, #0]
   d46b2:	2310      	movs	r3, #16
   d46b4:	222e      	movs	r2, #46	; 0x2e
   d46b6:	2100      	movs	r1, #0
   d46b8:	4630      	mov	r0, r6
   d46ba:	f7ff fed9 	bl	d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>

    if (retval != SUCCESS) {
   d46be:	2800      	cmp	r0, #0
   d46c0:	d137      	bne.n	d4732 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {

      if (_energy_accum_correction_factor == -1)  {
   d46c2:	6871      	ldr	r1, [r6, #4]
   d46c4:	1c4b      	adds	r3, r1, #1
   d46c6:	d110      	bne.n	d46ea <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x166>
                                              ((uint64_t)aucReadDataBuf[8]) << 48 |
                                              ((uint64_t)aucReadDataBuf[7]) << 40 |
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
   d46c8:	f8dd 200e 	ldr.w	r2, [sp, #14]
   d46cc:	f8dd 3012 	ldr.w	r3, [sp, #18]
                                              (uint64_t)aucReadDataBuf[2]) /
          2;
   d46d0:	085b      	lsrs	r3, r3, #1
   d46d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d46d6:	e9c5 2304 	strd	r2, r3, [r5, #16]
                                              ((uint64_t)aucReadDataBuf[16]) << 48 |
                                              ((uint64_t)aucReadDataBuf[15]) << 40 |
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
   d46da:	f8dd 2016 	ldr.w	r2, [sp, #22]
   d46de:	f8dd 301a 	ldr.w	r3, [sp, #26]
                                              (uint64_t)aucReadDataBuf[10]) /
          2;
   d46e2:	085b      	lsrs	r3, r3, #1
   d46e4:	ea4f 0232 	mov.w	r2, r2, rrx
   d46e8:	e01f      	b.n	d472a <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1a6>
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
                                              (uint64_t)aucReadDataBuf[2]) *
          (1 << _energy_accum_correction_factor);
   d46ea:	2201      	movs	r2, #1
   d46ec:	fa02 f801 	lsl.w	r8, r2, r1
                                              ((uint64_t)aucReadDataBuf[8]) << 48 |
                                              ((uint64_t)aucReadDataBuf[7]) << 40 |
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
   d46f0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d46f4:	f8dd 4012 	ldr.w	r4, [sp, #18]
                                              (uint64_t)aucReadDataBuf[2]) *
          (1 << _energy_accum_correction_factor);
   d46f8:	ea4f 7be8 	mov.w	fp, r8, asr #31
   d46fc:	fb03 f10b 	mul.w	r1, r3, fp
   d4700:	fb08 1104 	mla	r1, r8, r4, r1
   d4704:	fba3 8908 	umull	r8, r9, r3, r8
   d4708:	4489      	add	r9, r1
   d470a:	e9c5 8904 	strd	r8, r9, [r5, #16]
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
                                              (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d470e:	6874      	ldr	r4, [r6, #4]
                                              ((uint64_t)aucReadDataBuf[16]) << 48 |
                                              ((uint64_t)aucReadDataBuf[15]) << 40 |
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
   d4710:	f8dd 3016 	ldr.w	r3, [sp, #22]
   d4714:	f8dd 101a 	ldr.w	r1, [sp, #26]
                                              (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4718:	40a2      	lsls	r2, r4
   d471a:	17d7      	asrs	r7, r2, #31
   d471c:	fb03 f407 	mul.w	r4, r3, r7
   d4720:	fb02 4101 	mla	r1, r2, r1, r4
   d4724:	fba3 2302 	umull	r2, r3, r3, r2
   d4728:	440b      	add	r3, r1
   d472a:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d472e:	e000      	b.n	d4732 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      }
    
    }
  }
    
  return SUCCESS;
   d4730:	4628      	mov	r0, r5
}
   d4732:	b00d      	add	sp, #52	; 0x34
   d4734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4738 <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb>:
  return SUCCESS;  

}

int UpbeatLabs_MCP39F521::isEnergyAccumulationEnabled(bool *enabled)
{
   d4738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  int retVal;
  uint8_t readArray[5];
  //int readValue;
  retVal = registerReadNBytes(0x00, 0xDC, 2, readArray, 5);
   d473a:	2305      	movs	r3, #5
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	ab02      	add	r3, sp, #8
  return SUCCESS;  

}

int UpbeatLabs_MCP39F521::isEnergyAccumulationEnabled(bool *enabled)
{
   d4740:	460c      	mov	r4, r1
  int retVal;
  uint8_t readArray[5];
  //int readValue;
  retVal = registerReadNBytes(0x00, 0xDC, 2, readArray, 5);
   d4742:	9300      	str	r3, [sp, #0]
   d4744:	22dc      	movs	r2, #220	; 0xdc
   d4746:	2302      	movs	r3, #2
   d4748:	2100      	movs	r1, #0
   d474a:	f7ff fe91 	bl	d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>
  if (retVal != SUCCESS) {
   d474e:	b928      	cbnz	r0, d475c <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb+0x24>
    return retVal;
  } else {
    *enabled = readArray[2];
   d4750:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d4754:	3300      	adds	r3, #0
   d4756:	bf18      	it	ne
   d4758:	2301      	movne	r3, #1
   d475a:	7023      	strb	r3, [r4, #0]
  }
  return SUCCESS;
}
   d475c:	b004      	add	sp, #16
   d475e:	bd10      	pop	{r4, pc}

000d4760 <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi>:
// Read the accumlation interval register, which represents N in 2^N
// number of line cycles to be used for a single computation.
// You will not be modifying this unless you are performing a
// calibration. 
int UpbeatLabs_MCP39F521::readAccumulationIntervalRegister(int *value)
{
   d4760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  int retVal = 0;
  uint8_t readArray[5];
  //int readValue;

  retVal = registerReadNBytes(0x00, 0x9e, 2, readArray, 5);
   d4762:	2305      	movs	r3, #5
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	ab02      	add	r3, sp, #8
// Read the accumlation interval register, which represents N in 2^N
// number of line cycles to be used for a single computation.
// You will not be modifying this unless you are performing a
// calibration. 
int UpbeatLabs_MCP39F521::readAccumulationIntervalRegister(int *value)
{
   d4768:	460c      	mov	r4, r1
  int retVal = 0;
  uint8_t readArray[5];
  //int readValue;

  retVal = registerReadNBytes(0x00, 0x9e, 2, readArray, 5);
   d476a:	9300      	str	r3, [sp, #0]
   d476c:	229e      	movs	r2, #158	; 0x9e
   d476e:	2302      	movs	r3, #2
   d4770:	2100      	movs	r1, #0
   d4772:	f7ff fe7d 	bl	d4470 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>
  if (retVal != SUCCESS) {
   d4776:	b910      	cbnz	r0, d477e <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi+0x1e>
    return retVal;
  } else {
    *value = ((readArray[3] << 8) | readArray[2]);
   d4778:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d477c:	6023      	str	r3, [r4, #0]
  }

  return SUCCESS;
}
   d477e:	b004      	add	sp, #16
   d4780:	bd10      	pop	{r4, pc}

000d4782 <_ZN20UpbeatLabs_MCP39F5215beginEh>:
// values are off if the energy accumulation interval is
// anything but 2. This applies the workaround for that problem.
// To be removed for chips that have the issue fixed. 

void UpbeatLabs_MCP39F521::begin(uint8_t _addr)
{
   d4782:	b513      	push	{r0, r1, r4, lr}
  i2c_addr = _addr;
   d4784:	7001      	strb	r1, [r0, #0]
// values are off if the energy accumulation interval is
// anything but 2. This applies the workaround for that problem.
// To be removed for chips that have the issue fixed. 

void UpbeatLabs_MCP39F521::begin(uint8_t _addr)
{
   d4786:	4604      	mov	r4, r0
  i2c_addr = _addr;
  //Wire.setSpeed(CLOCK_SPEED_400KHZ);
  Wire.begin();
   d4788:	f001 f8b0 	bl	d58ec <_Z19__fetch_global_Wirev>
   d478c:	f000 fa9c 	bl	d4cc8 <_ZN7TwoWire5beginEv>

  int retVal = SUCCESS;
  bool enabled = false;
   d4790:	a902      	add	r1, sp, #8
   d4792:	2300      	movs	r3, #0
   d4794:	f801 3d05 	strb.w	r3, [r1, #-5]!
  retVal = isEnergyAccumulationEnabled(&enabled);
   d4798:	4620      	mov	r0, r4
   d479a:	f7ff ffcd 	bl	d4738 <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb>

  if (retVal == SUCCESS && enabled) {
   d479e:	b948      	cbnz	r0, d47b4 <_ZN20UpbeatLabs_MCP39F5215beginEh+0x32>
   d47a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d47a4:	b133      	cbz	r3, d47b4 <_ZN20UpbeatLabs_MCP39F5215beginEh+0x32>
    // First, note the accumulation interval. If it is anything
    // other than the default (2), note the correction
    // factor that has to be applied to the energy
    // accumulation.
    int accumIntervalReg; 
    retVal = readAccumulationIntervalRegister(&accumIntervalReg);
   d47a6:	a901      	add	r1, sp, #4
   d47a8:	4620      	mov	r0, r4
   d47aa:	f7ff ffd9 	bl	d4760 <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi>
    _energy_accum_correction_factor = (accumIntervalReg - 2);
   d47ae:	9b01      	ldr	r3, [sp, #4]
   d47b0:	3b02      	subs	r3, #2
   d47b2:	6063      	str	r3, [r4, #4]
  }
  
}
   d47b4:	b002      	add	sp, #8
   d47b6:	bd10      	pop	{r4, pc}

000d47b8 <_GLOBAL__sub_I__ZN20UpbeatLabs_MCP39F521C2Ev>:
   d47b8:	f000 b838 	b.w	d482c <HAL_Pin_Map>

000d47bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <os_thread_is_current+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030248 	.word	0x00030248

000d47cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <os_thread_join+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	691b      	ldr	r3, [r3, #16]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030248 	.word	0x00030248

000d47dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <os_thread_cleanup+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	695b      	ldr	r3, [r3, #20]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030248 	.word	0x00030248

000d47ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <os_mutex_create+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030248 	.word	0x00030248

000d47fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <os_mutex_recursive_create+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030248 	.word	0x00030248

000d480c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_RNG_GetRandomNumber+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	685b      	ldr	r3, [r3, #4]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030218 	.word	0x00030218

000d481c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030218 	.word	0x00030218

000d482c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_Pin_Map+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	681b      	ldr	r3, [r3, #0]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003022c 	.word	0x0003022c

000d483c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_Pin_Mode+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003022c 	.word	0x0003022c

000d484c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_Get_Pin_Mode+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	68db      	ldr	r3, [r3, #12]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003022c 	.word	0x0003022c

000d485c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_GPIO_Write+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	691b      	ldr	r3, [r3, #16]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003022c 	.word	0x0003022c

000d486c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_Interrupts_Attach+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	699b      	ldr	r3, [r3, #24]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003022c 	.word	0x0003022c

000d487c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_Interrupts_Detach+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	69db      	ldr	r3, [r3, #28]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003022c 	.word	0x0003022c

000d488c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_I2C_Begin+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	68db      	ldr	r3, [r3, #12]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030228 	.word	0x00030228

000d489c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_I2C_Request_Data+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	695b      	ldr	r3, [r3, #20]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030228 	.word	0x00030228

000d48ac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_I2C_Begin_Transmission+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	699b      	ldr	r3, [r3, #24]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030228 	.word	0x00030228

000d48bc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_I2C_End_Transmission+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	69db      	ldr	r3, [r3, #28]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030228 	.word	0x00030228

000d48cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_I2C_Write_Data+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6a1b      	ldr	r3, [r3, #32]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030228 	.word	0x00030228

000d48dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_I2C_Available_Data+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030228 	.word	0x00030228

000d48ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_I2C_Read_Data+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030228 	.word	0x00030228

000d48fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_I2C_Peek_Data+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030228 	.word	0x00030228

000d490c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_I2C_Flush_Data+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030228 	.word	0x00030228

000d491c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_I2C_Is_Enabled+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030228 	.word	0x00030228

000d492c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_I2C_Init+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030228 	.word	0x00030228

000d493c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <inet_inet_ntop+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	695b      	ldr	r3, [r3, #20]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030264 	.word	0x00030264

000d494c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <netdb_freeaddrinfo+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	689b      	ldr	r3, [r3, #8]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030268 	.word	0x00030268

000d495c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <netdb_getaddrinfo+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	68db      	ldr	r3, [r3, #12]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030268 	.word	0x00030268

000d496c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_SPI_Init+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	69db      	ldr	r3, [r3, #28]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030230 	.word	0x00030230

000d497c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_SPI_Is_Enabled+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6a1b      	ldr	r3, [r3, #32]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030230 	.word	0x00030230

000d498c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_USART_Init+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	681b      	ldr	r3, [r3, #0]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003023c 	.word	0x0003023c

000d499c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_USART_Write_Data+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	68db      	ldr	r3, [r3, #12]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003023c 	.word	0x0003023c

000d49ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USART_Available_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	691b      	ldr	r3, [r3, #16]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003023c 	.word	0x0003023c

000d49bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USART_Read_Data+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	695b      	ldr	r3, [r3, #20]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003023c 	.word	0x0003023c

000d49cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USART_Peek_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	699b      	ldr	r3, [r3, #24]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003023c 	.word	0x0003023c

000d49dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_USART_Flush_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	69db      	ldr	r3, [r3, #28]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003023c 	.word	0x0003023c

000d49ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_USART_Is_Enabled+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a1b      	ldr	r3, [r3, #32]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003023c 	.word	0x0003023c

000d49fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003023c 	.word	0x0003023c

000d4a0c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_USB_USART_Init+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	681b      	ldr	r3, [r3, #0]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003024c 	.word	0x0003024c

000d4a1c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_USB_USART_Begin+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	685b      	ldr	r3, [r3, #4]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003024c 	.word	0x0003024c

000d4a2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_USB_USART_Available_Data+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	691b      	ldr	r3, [r3, #16]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003024c 	.word	0x0003024c

000d4a3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	695b      	ldr	r3, [r3, #20]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003024c 	.word	0x0003024c

000d4a4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <HAL_USB_USART_Receive_Data+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	699b      	ldr	r3, [r3, #24]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003024c 	.word	0x0003024c

000d4a5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <HAL_USB_USART_Send_Data+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	69db      	ldr	r3, [r3, #28]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003024c 	.word	0x0003024c

000d4a6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_USB_USART_Flush_Data+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6a1b      	ldr	r3, [r3, #32]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003024c 	.word	0x0003024c

000d4a7c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <set_system_mode+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	685b      	ldr	r3, [r3, #4]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030220 	.word	0x00030220

000d4a8c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <system_delay_ms+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	695b      	ldr	r3, [r3, #20]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030220 	.word	0x00030220

000d4a9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b03      	ldr	r3, [pc, #12]	; (d4aac <system_ctrl_set_app_request_handler+0x10>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4aa6:	9301      	str	r3, [sp, #4]
   d4aa8:	bd08      	pop	{r3, pc}
   d4aaa:	0000      	.short	0x0000
   d4aac:	00030220 	.word	0x00030220

000d4ab0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b03      	ldr	r3, [pc, #12]	; (d4ac0 <system_ctrl_set_result+0x10>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4aba:	9301      	str	r3, [sp, #4]
   d4abc:	bd08      	pop	{r3, pc}
   d4abe:	0000      	.short	0x0000
   d4ac0:	00030220 	.word	0x00030220

000d4ac4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030244 	.word	0x00030244

000d4ad4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <network_connect+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	685b      	ldr	r3, [r3, #4]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030240 	.word	0x00030240

000d4ae4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <network_connecting+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	689b      	ldr	r3, [r3, #8]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030240 	.word	0x00030240

000d4af4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <network_disconnect+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	68db      	ldr	r3, [r3, #12]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030240 	.word	0x00030240

000d4b04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <network_ready+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	691b      	ldr	r3, [r3, #16]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030240 	.word	0x00030240

000d4b14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <network_on+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	695b      	ldr	r3, [r3, #20]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030240 	.word	0x00030240

000d4b24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <network_off+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	699b      	ldr	r3, [r3, #24]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030240 	.word	0x00030240

000d4b34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <network_listen+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	69db      	ldr	r3, [r3, #28]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030240 	.word	0x00030240

000d4b44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <network_listening+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a1b      	ldr	r3, [r3, #32]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030240 	.word	0x00030240

000d4b54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <network_set_listen_timeout+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030240 	.word	0x00030240

000d4b64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <network_get_listen_timeout+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030240 	.word	0x00030240

000d4b74 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <malloc+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	681b      	ldr	r3, [r3, #0]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003021c 	.word	0x0003021c

000d4b84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <free+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	685b      	ldr	r3, [r3, #4]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003021c 	.word	0x0003021c

000d4b94 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <vsnprintf+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003021c 	.word	0x0003021c

000d4ba4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ba4:	2100      	movs	r1, #0
   d4ba6:	f7ff bf71 	b.w	d4a8c <system_delay_ms>
	...

000d4bac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4bac:	4802      	ldr	r0, [pc, #8]	; (d4bb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4bae:	2300      	movs	r3, #0
   d4bb0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4bb2:	f7ff be23 	b.w	d47fc <os_mutex_recursive_create>
   d4bb6:	bf00      	nop
   d4bb8:	2003e3c8 	.word	0x2003e3c8

000d4bbc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bbc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4bbe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bc0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4bc2:	b113      	cbz	r3, d4bca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bc4:	2203      	movs	r2, #3
   d4bc6:	4601      	mov	r1, r0
   d4bc8:	4798      	blx	r3
    }
   d4bca:	4620      	mov	r0, r4
   d4bcc:	bd10      	pop	{r4, pc}

000d4bce <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bce:	2200      	movs	r2, #0
   d4bd0:	4611      	mov	r1, r2
   d4bd2:	6840      	ldr	r0, [r0, #4]
   d4bd4:	f7ff bfb6 	b.w	d4b44 <network_listening>

000d4bd8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4bd8:	2200      	movs	r2, #0
   d4bda:	4611      	mov	r1, r2
   d4bdc:	6840      	ldr	r0, [r0, #4]
   d4bde:	f7ff bfc1 	b.w	d4b64 <network_get_listen_timeout>

000d4be2 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4be2:	2200      	movs	r2, #0
   d4be4:	6840      	ldr	r0, [r0, #4]
   d4be6:	f7ff bfb5 	b.w	d4b54 <network_set_listen_timeout>

000d4bea <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bea:	2200      	movs	r2, #0
   d4bec:	f081 0101 	eor.w	r1, r1, #1
   d4bf0:	6840      	ldr	r0, [r0, #4]
   d4bf2:	f7ff bf9f 	b.w	d4b34 <network_listen>

000d4bf6 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4bf6:	2300      	movs	r3, #0
   d4bf8:	461a      	mov	r2, r3
   d4bfa:	4619      	mov	r1, r3
   d4bfc:	6840      	ldr	r0, [r0, #4]
   d4bfe:	f7ff bf91 	b.w	d4b24 <network_off>

000d4c02 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c02:	2300      	movs	r3, #0
   d4c04:	461a      	mov	r2, r3
   d4c06:	4619      	mov	r1, r3
   d4c08:	6840      	ldr	r0, [r0, #4]
   d4c0a:	f7ff bf83 	b.w	d4b14 <network_on>

000d4c0e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c0e:	2200      	movs	r2, #0
   d4c10:	4611      	mov	r1, r2
   d4c12:	6840      	ldr	r0, [r0, #4]
   d4c14:	f7ff bf76 	b.w	d4b04 <network_ready>

000d4c18 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c18:	2200      	movs	r2, #0
   d4c1a:	4611      	mov	r1, r2
   d4c1c:	6840      	ldr	r0, [r0, #4]
   d4c1e:	f7ff bf61 	b.w	d4ae4 <network_connecting>

000d4c22 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c22:	2200      	movs	r2, #0
   d4c24:	2102      	movs	r1, #2
   d4c26:	6840      	ldr	r0, [r0, #4]
   d4c28:	f7ff bf64 	b.w	d4af4 <network_disconnect>

000d4c2c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c2c:	2300      	movs	r3, #0
   d4c2e:	461a      	mov	r2, r3
   d4c30:	6840      	ldr	r0, [r0, #4]
   d4c32:	f7ff bf4f 	b.w	d4ad4 <network_connect>
	...

000d4c38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c38:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c3a:	2203      	movs	r2, #3
   d4c3c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c3e:	4a02      	ldr	r2, [pc, #8]	; (d4c48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c40:	601a      	str	r2, [r3, #0]
   d4c42:	4770      	bx	lr
   d4c44:	2003e3cc 	.word	0x2003e3cc
   d4c48:	000d67ec 	.word	0x000d67ec

000d4c4c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4c4c:	4770      	bx	lr

000d4c4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c50:	4606      	mov	r6, r0
   d4c52:	4615      	mov	r5, r2
   d4c54:	460c      	mov	r4, r1
   d4c56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c58:	42bc      	cmp	r4, r7
   d4c5a:	d006      	beq.n	d4c6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c5c:	6833      	ldr	r3, [r6, #0]
   d4c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c62:	689b      	ldr	r3, [r3, #8]
   d4c64:	4630      	mov	r0, r6
   d4c66:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c68:	e7f6      	b.n	d4c58 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c6e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4c6e:	2200      	movs	r2, #0
   d4c70:	7c00      	ldrb	r0, [r0, #16]
   d4c72:	f7ff be2b 	b.w	d48cc <HAL_I2C_Write_Data>

000d4c76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4c76:	2100      	movs	r1, #0
   d4c78:	7c00      	ldrb	r0, [r0, #16]
   d4c7a:	f7ff be2f 	b.w	d48dc <HAL_I2C_Available_Data>

000d4c7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4c7e:	2100      	movs	r1, #0
   d4c80:	7c00      	ldrb	r0, [r0, #16]
   d4c82:	f7ff be33 	b.w	d48ec <HAL_I2C_Read_Data>

000d4c86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4c86:	2100      	movs	r1, #0
   d4c88:	7c00      	ldrb	r0, [r0, #16]
   d4c8a:	f7ff be37 	b.w	d48fc <HAL_I2C_Peek_Data>

000d4c8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4c8e:	2100      	movs	r1, #0
   d4c90:	7c00      	ldrb	r0, [r0, #16]
   d4c92:	f7ff be3b 	b.w	d490c <HAL_I2C_Flush_Data>

000d4c96 <_ZN7TwoWireD0Ev>:
   d4c96:	b510      	push	{r4, lr}
   d4c98:	2114      	movs	r1, #20
   d4c9a:	4604      	mov	r4, r0
   d4c9c:	f000 fe6d 	bl	d597a <_ZdlPvj>
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	bd10      	pop	{r4, pc}

000d4ca4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4cac:	4608      	mov	r0, r1
   d4cae:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	4b04      	ldr	r3, [pc, #16]	; (d4cc4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4cb4:	7420      	strb	r0, [r4, #16]
   d4cb6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4cb8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4cba:	f7ff fe37 	bl	d492c <HAL_I2C_Init>

}
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	bd10      	pop	{r4, pc}
   d4cc2:	bf00      	nop
   d4cc4:	000d6820 	.word	0x000d6820

000d4cc8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4cc8:	2300      	movs	r3, #0
   d4cca:	461a      	mov	r2, r3
   d4ccc:	4619      	mov	r1, r3
   d4cce:	7c00      	ldrb	r0, [r0, #16]
   d4cd0:	f7ff bddc 	b.w	d488c <HAL_I2C_Begin>

000d4cd4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d4cd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d4cd6:	2400      	movs	r4, #0
   d4cd8:	7c00      	ldrb	r0, [r0, #16]
   d4cda:	9400      	str	r4, [sp, #0]
   d4cdc:	f7ff fdde 	bl	d489c <HAL_I2C_Request_Data>
  return result;
}
   d4ce0:	b2c0      	uxtb	r0, r0
   d4ce2:	b002      	add	sp, #8
   d4ce4:	bd10      	pop	{r4, pc}

000d4ce6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d4ce6:	2301      	movs	r3, #1
   d4ce8:	f7ff bff4 	b.w	d4cd4 <_ZN7TwoWire11requestFromEhhh>

000d4cec <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4cec:	2200      	movs	r2, #0
   d4cee:	7c00      	ldrb	r0, [r0, #16]
   d4cf0:	f7ff bddc 	b.w	d48ac <HAL_I2C_Begin_Transmission>

000d4cf4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	7c00      	ldrb	r0, [r0, #16]
   d4cf8:	f7ff bde0 	b.w	d48bc <HAL_I2C_End_Transmission>

000d4cfc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4cfc:	2101      	movs	r1, #1
   d4cfe:	f7ff bff9 	b.w	d4cf4 <_ZN7TwoWire15endTransmissionEh>

000d4d02 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4d02:	2100      	movs	r1, #0
   d4d04:	7c00      	ldrb	r0, [r0, #16]
   d4d06:	f7ff be09 	b.w	d491c <HAL_I2C_Is_Enabled>

000d4d0a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d4d0a:	4700      	bx	r0

000d4d0c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d4d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d0e:	b085      	sub	sp, #20
   d4d10:	461c      	mov	r4, r3
   d4d12:	460e      	mov	r6, r1
   d4d14:	4617      	mov	r7, r2
   d4d16:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d4d18:	f7ff fdb0 	bl	d487c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d4d1c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d4d1e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d4d20:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d4d24:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d4d26:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d4d2a:	bfa5      	ittet	ge
   d4d2c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d4d30:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d4d34:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d4d36:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d4d38:	9300      	str	r3, [sp, #0]
   d4d3a:	4632      	mov	r2, r6
   d4d3c:	463b      	mov	r3, r7
   d4d3e:	4906      	ldr	r1, [pc, #24]	; (d4d58 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d4d40:	bfa8      	it	ge
   d4d42:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d4d46:	4628      	mov	r0, r5
   d4d48:	f7ff fd90 	bl	d486c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d4d4c:	fab0 f080 	clz	r0, r0
   d4d50:	0940      	lsrs	r0, r0, #5
   d4d52:	b005      	add	sp, #20
   d4d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d56:	bf00      	nop
   d4d58:	000d4d0b 	.word	0x000d4d0b

000d4d5c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d5c:	4770      	bx	lr

000d4d5e <_ZN9IPAddressD0Ev>:
   d4d5e:	b510      	push	{r4, lr}
   d4d60:	2118      	movs	r1, #24
   d4d62:	4604      	mov	r4, r0
   d4d64:	f000 fe09 	bl	d597a <_ZdlPvj>
   d4d68:	4620      	mov	r0, r4
   d4d6a:	bd10      	pop	{r4, pc}

000d4d6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d6e:	7d03      	ldrb	r3, [r0, #20]
   d4d70:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d72:	b08d      	sub	sp, #52	; 0x34
   d4d74:	460e      	mov	r6, r1
   d4d76:	f100 0704 	add.w	r7, r0, #4
   d4d7a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d7e:	d002      	beq.n	d4d86 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d80:	f100 0508 	add.w	r5, r0, #8
   d4d84:	e018      	b.n	d4db8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d86:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d88:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d8a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d8e:	232f      	movs	r3, #47	; 0x2f
   d4d90:	462a      	mov	r2, r5
   d4d92:	200a      	movs	r0, #10
   d4d94:	f7ff fdd2 	bl	d493c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d98:	4628      	mov	r0, r5
   d4d9a:	f001 fc83 	bl	d66a4 <strlen>
   d4d9e:	6833      	ldr	r3, [r6, #0]
   d4da0:	4602      	mov	r2, r0
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	4629      	mov	r1, r5
   d4da6:	4630      	mov	r0, r6
   d4da8:	4798      	blx	r3
   d4daa:	e00f      	b.n	d4dcc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4dac:	b124      	cbz	r4, d4db8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4dae:	212e      	movs	r1, #46	; 0x2e
   d4db0:	4630      	mov	r0, r6
   d4db2:	f000 f9cd 	bl	d5150 <_ZN5Print5printEc>
   d4db6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4db8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4dbc:	220a      	movs	r2, #10
   d4dbe:	4630      	mov	r0, r6
   d4dc0:	f000 fa10 	bl	d51e4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4dc4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dc6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4dc8:	d1f0      	bne.n	d4dac <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dca:	4620      	mov	r0, r4
    }
    return n;
}
   d4dcc:	b00d      	add	sp, #52	; 0x34
   d4dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dd0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4dd0:	b510      	push	{r4, lr}
   d4dd2:	4b05      	ldr	r3, [pc, #20]	; (d4de8 <_ZN9IPAddressC1Ev+0x18>)
   d4dd4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4dd6:	2211      	movs	r2, #17
   d4dd8:	f840 3b04 	str.w	r3, [r0], #4
   d4ddc:	2100      	movs	r1, #0
   d4dde:	f001 fc30 	bl	d6642 <memset>
{
    clear();
}
   d4de2:	4620      	mov	r0, r4
   d4de4:	bd10      	pop	{r4, pc}
   d4de6:	bf00      	nop
   d4de8:	000d6848 	.word	0x000d6848

000d4dec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4dec:	4603      	mov	r3, r0
   d4dee:	4a07      	ldr	r2, [pc, #28]	; (d4e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4df0:	b510      	push	{r4, lr}
   d4df2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4df6:	f101 0210 	add.w	r2, r1, #16
   d4dfa:	f851 4b04 	ldr.w	r4, [r1], #4
   d4dfe:	f843 4b04 	str.w	r4, [r3], #4
   d4e02:	4291      	cmp	r1, r2
   d4e04:	d1f9      	bne.n	d4dfa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e06:	780a      	ldrb	r2, [r1, #0]
   d4e08:	701a      	strb	r2, [r3, #0]
}
   d4e0a:	bd10      	pop	{r4, pc}
   d4e0c:	000d6848 	.word	0x000d6848

000d4e10 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4e10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e12:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e22:	2304      	movs	r3, #4
   d4e24:	6041      	str	r1, [r0, #4]
   d4e26:	7503      	strb	r3, [r0, #20]
   d4e28:	bd10      	pop	{r4, pc}

000d4e2a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e2c:	780d      	ldrb	r5, [r1, #0]
   d4e2e:	788b      	ldrb	r3, [r1, #2]
   d4e30:	784a      	ldrb	r2, [r1, #1]
   d4e32:	78c9      	ldrb	r1, [r1, #3]
   d4e34:	9100      	str	r1, [sp, #0]
   d4e36:	4629      	mov	r1, r5
   d4e38:	f7ff ffea 	bl	d4e10 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e3c:	b003      	add	sp, #12
   d4e3e:	bd30      	pop	{r4, r5, pc}

000d4e40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e40:	4b01      	ldr	r3, [pc, #4]	; (d4e48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e42:	4a02      	ldr	r2, [pc, #8]	; (d4e4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e44:	601a      	str	r2, [r3, #0]
   d4e46:	4770      	bx	lr
   d4e48:	2003e3d4 	.word	0x2003e3d4
   d4e4c:	000d68c7 	.word	0x000d68c7

000d4e50 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e50:	2200      	movs	r2, #0
   d4e52:	4611      	mov	r1, r2
   d4e54:	6840      	ldr	r0, [r0, #4]
   d4e56:	f7ff be75 	b.w	d4b44 <network_listening>

000d4e5a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e5a:	2200      	movs	r2, #0
   d4e5c:	4611      	mov	r1, r2
   d4e5e:	6840      	ldr	r0, [r0, #4]
   d4e60:	f7ff be80 	b.w	d4b64 <network_get_listen_timeout>

000d4e64 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e64:	2200      	movs	r2, #0
   d4e66:	6840      	ldr	r0, [r0, #4]
   d4e68:	f7ff be74 	b.w	d4b54 <network_set_listen_timeout>

000d4e6c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	f081 0101 	eor.w	r1, r1, #1
   d4e72:	6840      	ldr	r0, [r0, #4]
   d4e74:	f7ff be5e 	b.w	d4b34 <network_listen>

000d4e78 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e78:	2300      	movs	r3, #0
   d4e7a:	461a      	mov	r2, r3
   d4e7c:	2101      	movs	r1, #1
   d4e7e:	6840      	ldr	r0, [r0, #4]
   d4e80:	f7ff be50 	b.w	d4b24 <network_off>

000d4e84 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e84:	2300      	movs	r3, #0
   d4e86:	461a      	mov	r2, r3
   d4e88:	4619      	mov	r1, r3
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff be42 	b.w	d4b14 <network_on>

000d4e90 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e90:	2200      	movs	r2, #0
   d4e92:	4611      	mov	r1, r2
   d4e94:	6840      	ldr	r0, [r0, #4]
   d4e96:	f7ff be35 	b.w	d4b04 <network_ready>

000d4e9a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	4611      	mov	r1, r2
   d4e9e:	6840      	ldr	r0, [r0, #4]
   d4ea0:	f7ff be20 	b.w	d4ae4 <network_connecting>

000d4ea4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ea4:	2200      	movs	r2, #0
   d4ea6:	2102      	movs	r1, #2
   d4ea8:	6840      	ldr	r0, [r0, #4]
   d4eaa:	f7ff be23 	b.w	d4af4 <network_disconnect>

000d4eae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eae:	2300      	movs	r3, #0
   d4eb0:	461a      	mov	r2, r3
   d4eb2:	6840      	ldr	r0, [r0, #4]
   d4eb4:	f7ff be0e 	b.w	d4ad4 <network_connect>

000d4eb8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4eb8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eba:	4605      	mov	r5, r0
   d4ebc:	b188      	cbz	r0, d4ee2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ebe:	6804      	ldr	r4, [r0, #0]
   d4ec0:	b14c      	cbz	r4, d4ed6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ec2:	68a3      	ldr	r3, [r4, #8]
   d4ec4:	b11b      	cbz	r3, d4ece <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ec6:	2203      	movs	r2, #3
   d4ec8:	4621      	mov	r1, r4
   d4eca:	4620      	mov	r0, r4
   d4ecc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ece:	2110      	movs	r1, #16
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	f000 fd52 	bl	d597a <_ZdlPvj>
   d4ed6:	4628      	mov	r0, r5
   d4ed8:	2114      	movs	r1, #20
      }
   d4eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ede:	f000 bd4c 	b.w	d597a <_ZdlPvj>
   d4ee2:	bd38      	pop	{r3, r4, r5, pc}

000d4ee4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ee4:	b110      	cbz	r0, d4eec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ee6:	6803      	ldr	r3, [r0, #0]
   d4ee8:	685b      	ldr	r3, [r3, #4]
   d4eea:	4718      	bx	r3
   d4eec:	4770      	bx	lr

000d4eee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4eee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ef0:	6803      	ldr	r3, [r0, #0]
   d4ef2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ef4:	b1bb      	cbz	r3, d4f26 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ef6:	6858      	ldr	r0, [r3, #4]
   d4ef8:	f7ff fc60 	bl	d47bc <os_thread_is_current>
   d4efc:	b978      	cbnz	r0, d4f1e <_ZN6ThreadD1Ev+0x30>
   d4efe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f00:	7c5a      	ldrb	r2, [r3, #17]
   d4f02:	b912      	cbnz	r2, d4f0a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f04:	6858      	ldr	r0, [r3, #4]
   d4f06:	f7ff fc61 	bl	d47cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f0a:	6823      	ldr	r3, [r4, #0]
   d4f0c:	6858      	ldr	r0, [r3, #4]
   d4f0e:	f7ff fc65 	bl	d47dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f12:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f14:	2300      	movs	r3, #0
   d4f16:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f18:	b128      	cbz	r0, d4f26 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f1a:	f7ff ffcd 	bl	d4eb8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f1e:	6820      	ldr	r0, [r4, #0]
   d4f20:	b108      	cbz	r0, d4f26 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f22:	f7ff ffc9 	bl	d4eb8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f26:	4620      	mov	r0, r4
   d4f28:	bd10      	pop	{r4, pc}
	...

000d4f2c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f2c:	b538      	push	{r3, r4, r5, lr}
   d4f2e:	4b0c      	ldr	r3, [pc, #48]	; (d4f60 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4f30:	6003      	str	r3, [r0, #0]
   d4f32:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f34:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4f38:	b108      	cbz	r0, d4f3e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f3a:	f7ff f8b0 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f3e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4f42:	b135      	cbz	r5, d4f52 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f44:	4628      	mov	r0, r5
   d4f46:	f7ff ffd2 	bl	d4eee <_ZN6ThreadD1Ev>
   d4f4a:	2104      	movs	r1, #4
   d4f4c:	4628      	mov	r0, r5
   d4f4e:	f000 fd14 	bl	d597a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f52:	68a0      	ldr	r0, [r4, #8]
   d4f54:	b108      	cbz	r0, d4f5a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4f56:	f7ff ffc5 	bl	d4ee4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	bd38      	pop	{r3, r4, r5, pc}
   d4f5e:	bf00      	nop
   d4f60:	000d693c 	.word	0x000d693c

000d4f64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f64:	b538      	push	{r3, r4, r5, lr}
   d4f66:	4c0e      	ldr	r4, [pc, #56]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f68:	4b0e      	ldr	r3, [pc, #56]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f6a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f6c:	2500      	movs	r5, #0
   d4f6e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f70:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f74:	6063      	str	r3, [r4, #4]
   d4f76:	60a5      	str	r5, [r4, #8]
   d4f78:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f7c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f80:	f7ff fc3c 	bl	d47fc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f84:	4b08      	ldr	r3, [pc, #32]	; (d4fa8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f86:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f8a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f8e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f90:	4620      	mov	r0, r4
   d4f92:	4a06      	ldr	r2, [pc, #24]	; (d4fac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f94:	4906      	ldr	r1, [pc, #24]	; (d4fb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f9a:	f000 bce9 	b.w	d5970 <__aeabi_atexit>
   d4f9e:	bf00      	nop
   d4fa0:	2003e3d8 	.word	0x2003e3d8
   d4fa4:	000d6970 	.word	0x000d6970
   d4fa8:	000d693c 	.word	0x000d693c
   d4fac:	2003e3b8 	.word	0x2003e3b8
   d4fb0:	000d4f2d 	.word	0x000d4f2d

000d4fb4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fb4:	2300      	movs	r3, #0
   d4fb6:	461a      	mov	r2, r3
   d4fb8:	6840      	ldr	r0, [r0, #4]
   d4fba:	f7ff bd8b 	b.w	d4ad4 <network_connect>

000d4fbe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fbe:	2200      	movs	r2, #0
   d4fc0:	2102      	movs	r1, #2
   d4fc2:	6840      	ldr	r0, [r0, #4]
   d4fc4:	f7ff bd96 	b.w	d4af4 <network_disconnect>

000d4fc8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fc8:	2200      	movs	r2, #0
   d4fca:	4611      	mov	r1, r2
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	f7ff bd89 	b.w	d4ae4 <network_connecting>

000d4fd2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	4611      	mov	r1, r2
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff bd94 	b.w	d4b04 <network_ready>

000d4fdc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fdc:	2300      	movs	r3, #0
   d4fde:	461a      	mov	r2, r3
   d4fe0:	4619      	mov	r1, r3
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff bd96 	b.w	d4b14 <network_on>

000d4fe8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fe8:	2300      	movs	r3, #0
   d4fea:	461a      	mov	r2, r3
   d4fec:	4619      	mov	r1, r3
   d4fee:	6840      	ldr	r0, [r0, #4]
   d4ff0:	f7ff bd98 	b.w	d4b24 <network_off>

000d4ff4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ff4:	2200      	movs	r2, #0
   d4ff6:	f081 0101 	eor.w	r1, r1, #1
   d4ffa:	6840      	ldr	r0, [r0, #4]
   d4ffc:	f7ff bd9a 	b.w	d4b34 <network_listen>

000d5000 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5000:	2200      	movs	r2, #0
   d5002:	6840      	ldr	r0, [r0, #4]
   d5004:	f7ff bda6 	b.w	d4b54 <network_set_listen_timeout>

000d5008 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5008:	2200      	movs	r2, #0
   d500a:	4611      	mov	r1, r2
   d500c:	6840      	ldr	r0, [r0, #4]
   d500e:	f7ff bda9 	b.w	d4b64 <network_get_listen_timeout>

000d5012 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5012:	2200      	movs	r2, #0
   d5014:	4611      	mov	r1, r2
   d5016:	6840      	ldr	r0, [r0, #4]
   d5018:	f7ff bd94 	b.w	d4b44 <network_listening>

000d501c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5020:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5022:	b095      	sub	sp, #84	; 0x54
   d5024:	4616      	mov	r6, r2
   d5026:	460d      	mov	r5, r1
   d5028:	4607      	mov	r7, r0
    IPAddress addr;
   d502a:	f7ff fed1 	bl	d4dd0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d502e:	4621      	mov	r1, r4
   d5030:	2220      	movs	r2, #32
   d5032:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5034:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5036:	f001 fb04 	bl	d6642 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d503a:	2340      	movs	r3, #64	; 0x40
   d503c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d503e:	4621      	mov	r1, r4
   d5040:	466b      	mov	r3, sp
   d5042:	aa0c      	add	r2, sp, #48	; 0x30
   d5044:	4630      	mov	r0, r6
   d5046:	f7ff fc89 	bl	d495c <netdb_getaddrinfo>
    if (!r) {
   d504a:	4604      	mov	r4, r0
   d504c:	2800      	cmp	r0, #0
   d504e:	d144      	bne.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5050:	4602      	mov	r2, r0
   d5052:	2101      	movs	r1, #1
   d5054:	6868      	ldr	r0, [r5, #4]
   d5056:	f7ff fd55 	bl	d4b04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d505a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d505c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d505e:	4622      	mov	r2, r4
   d5060:	6868      	ldr	r0, [r5, #4]
   d5062:	f7ff fd4f 	bl	d4b04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5066:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5068:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d506a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d506c:	2e00      	cmp	r6, #0
   d506e:	d034      	beq.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5070:	2900      	cmp	r1, #0
   d5072:	d132      	bne.n	d50da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5074:	6873      	ldr	r3, [r6, #4]
   d5076:	2b02      	cmp	r3, #2
   d5078:	d002      	beq.n	d5080 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d507a:	2b0a      	cmp	r3, #10
   d507c:	d009      	beq.n	d5092 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d507e:	e02a      	b.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5080:	f1b8 0f00 	cmp.w	r8, #0
   d5084:	d027      	beq.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5086:	6971      	ldr	r1, [r6, #20]
   d5088:	4638      	mov	r0, r7
   d508a:	3104      	adds	r1, #4
   d508c:	f7ff fecd 	bl	d4e2a <_ZN9IPAddressaSEPKh>
   d5090:	e020      	b.n	d50d4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5092:	f1b9 0f00 	cmp.w	r9, #0
   d5096:	d01e      	beq.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5098:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d509a:	2211      	movs	r2, #17
   d509c:	a801      	add	r0, sp, #4
   d509e:	f001 fad0 	bl	d6642 <memset>
                    a.v = 6;
   d50a2:	2306      	movs	r3, #6
   d50a4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50a8:	ad01      	add	r5, sp, #4
   d50aa:	f104 0308 	add.w	r3, r4, #8
   d50ae:	3418      	adds	r4, #24
   d50b0:	6818      	ldr	r0, [r3, #0]
   d50b2:	6859      	ldr	r1, [r3, #4]
   d50b4:	462a      	mov	r2, r5
   d50b6:	c203      	stmia	r2!, {r0, r1}
   d50b8:	3308      	adds	r3, #8
   d50ba:	42a3      	cmp	r3, r4
   d50bc:	4615      	mov	r5, r2
   d50be:	d1f7      	bne.n	d50b0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50c0:	a901      	add	r1, sp, #4
   d50c2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50c4:	ad07      	add	r5, sp, #28
   d50c6:	f7ff fe91 	bl	d4dec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50cc:	1d3c      	adds	r4, r7, #4
   d50ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50d0:	682b      	ldr	r3, [r5, #0]
   d50d2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50d4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50d6:	69f6      	ldr	r6, [r6, #28]
   d50d8:	e7c8      	b.n	d506c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50da:	9800      	ldr	r0, [sp, #0]
   d50dc:	f7ff fc36 	bl	d494c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50e0:	4638      	mov	r0, r7
   d50e2:	b015      	add	sp, #84	; 0x54
   d50e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50e8:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50ea:	4a03      	ldr	r2, [pc, #12]	; (d50f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50ec:	601a      	str	r2, [r3, #0]
   d50ee:	2200      	movs	r2, #0
   d50f0:	605a      	str	r2, [r3, #4]
   d50f2:	4770      	bx	lr
   d50f4:	2003e5ac 	.word	0x2003e5ac
   d50f8:	000d6970 	.word	0x000d6970

000d50fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50fe:	4606      	mov	r6, r0
   d5100:	460d      	mov	r5, r1
   d5102:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5104:	2400      	movs	r4, #0
  while (size--) {
   d5106:	42bd      	cmp	r5, r7
   d5108:	d00c      	beq.n	d5124 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d510a:	6833      	ldr	r3, [r6, #0]
   d510c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5110:	689b      	ldr	r3, [r3, #8]
   d5112:	4630      	mov	r0, r6
   d5114:	4798      	blx	r3
     if (chunk>=0)
   d5116:	2800      	cmp	r0, #0
   d5118:	db01      	blt.n	d511e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d511a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d511c:	e7f3      	b.n	d5106 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d511e:	2c00      	cmp	r4, #0
   d5120:	bf08      	it	eq
   d5122:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5124:	4620      	mov	r0, r4
   d5126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5128 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5128:	b570      	push	{r4, r5, r6, lr}
   d512a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d512c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d512e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5130:	b149      	cbz	r1, d5146 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5132:	f001 fab7 	bl	d66a4 <strlen>
   d5136:	682b      	ldr	r3, [r5, #0]
   d5138:	4602      	mov	r2, r0
   d513a:	4621      	mov	r1, r4
   d513c:	4628      	mov	r0, r5
   d513e:	68db      	ldr	r3, [r3, #12]
    }
   d5140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5144:	4718      	bx	r3
    }
   d5146:	bd70      	pop	{r4, r5, r6, pc}

000d5148 <_ZN5Print5printEPKc>:
   d5148:	b508      	push	{r3, lr}
   d514a:	f7ff ffed 	bl	d5128 <_ZN5Print5writeEPKc>
   d514e:	bd08      	pop	{r3, pc}

000d5150 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5150:	6803      	ldr	r3, [r0, #0]
   d5152:	689b      	ldr	r3, [r3, #8]
   d5154:	4718      	bx	r3

000d5156 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d5156:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5158:	f7ff ffe6 	bl	d5128 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d515c:	bd08      	pop	{r3, pc}

000d515e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d515e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5160:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5162:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5164:	f7ff fff4 	bl	d5150 <_ZN5Print5printEc>
  n += print('\n');
   d5168:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d516a:	4604      	mov	r4, r0
  n += print('\n');
   d516c:	4628      	mov	r0, r5
   d516e:	f7ff ffef 	bl	d5150 <_ZN5Print5printEc>
  return n;
}
   d5172:	4420      	add	r0, r4
   d5174:	bd38      	pop	{r3, r4, r5, pc}

000d5176 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5176:	b538      	push	{r3, r4, r5, lr}
   d5178:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d517a:	f7ff ffd5 	bl	d5128 <_ZN5Print5writeEPKc>
   d517e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5180:	4628      	mov	r0, r5
   d5182:	f7ff ffec 	bl	d515e <_ZN5Print7printlnEv>
  return n;
}
   d5186:	4420      	add	r0, r4
   d5188:	bd38      	pop	{r3, r4, r5, pc}

000d518a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d518a:	b530      	push	{r4, r5, lr}
   d518c:	b08b      	sub	sp, #44	; 0x2c
   d518e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5190:	2100      	movs	r1, #0
   d5192:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5196:	2a01      	cmp	r2, #1
   d5198:	bf98      	it	ls
   d519a:	220a      	movls	r2, #10
   d519c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d51a0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d51a4:	fb05 3312 	mls	r3, r5, r2, r3
   d51a8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51ac:	2b09      	cmp	r3, #9
   d51ae:	bf94      	ite	ls
   d51b0:	3330      	addls	r3, #48	; 0x30
   d51b2:	3337      	addhi	r3, #55	; 0x37
   d51b4:	b2db      	uxtb	r3, r3
   d51b6:	4621      	mov	r1, r4
   d51b8:	f804 3901 	strb.w	r3, [r4], #-1
   d51bc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d51be:	2d00      	cmp	r5, #0
   d51c0:	d1ee      	bne.n	d51a0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d51c2:	f7ff ffb1 	bl	d5128 <_ZN5Print5writeEPKc>
}
   d51c6:	b00b      	add	sp, #44	; 0x2c
   d51c8:	bd30      	pop	{r4, r5, pc}

000d51ca <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d51ca:	b410      	push	{r4}
  if (base == 0) return write(n);
   d51cc:	b92a      	cbnz	r2, d51da <_ZN5Print5printEmi+0x10>
   d51ce:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d51d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d51d4:	689b      	ldr	r3, [r3, #8]
   d51d6:	b2c9      	uxtb	r1, r1
   d51d8:	4718      	bx	r3
  else return printNumber(n, base);
   d51da:	b2d2      	uxtb	r2, r2
}
   d51dc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d51e0:	f7ff bfd3 	b.w	d518a <_ZN5Print11printNumberEmh>

000d51e4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d51e4:	f7ff bff1 	b.w	d51ca <_ZN5Print5printEmi>

000d51e8 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d51e8:	b538      	push	{r3, r4, r5, lr}
   d51ea:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d51ec:	f7ff ffed 	bl	d51ca <_ZN5Print5printEmi>
   d51f0:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d51f2:	4628      	mov	r0, r5
   d51f4:	f7ff ffb3 	bl	d515e <_ZN5Print7printlnEv>
  return n;
}
   d51f8:	4420      	add	r0, r4
   d51fa:	bd38      	pop	{r3, r4, r5, pc}

000d51fc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d51fc:	b538      	push	{r3, r4, r5, lr}
   d51fe:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d5200:	f7ff ffe3 	bl	d51ca <_ZN5Print5printEmi>
   d5204:	4604      	mov	r4, r0
  n += println();
   d5206:	4628      	mov	r0, r5
   d5208:	f7ff ffa9 	bl	d515e <_ZN5Print7printlnEv>
  return n;
}
   d520c:	4420      	add	r0, r4
   d520e:	bd38      	pop	{r3, r4, r5, pc}

000d5210 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5214:	4607      	mov	r7, r0
   d5216:	460e      	mov	r6, r1
  if (base == 0) {
   d5218:	4615      	mov	r5, r2
   d521a:	b92a      	cbnz	r2, d5228 <_ZN5Print5printEli+0x18>
    return write(n);
   d521c:	6803      	ldr	r3, [r0, #0]
   d521e:	b2c9      	uxtb	r1, r1
   d5220:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5226:	4718      	bx	r3
  } else if (base == 10) {
   d5228:	2a0a      	cmp	r2, #10
   d522a:	d102      	bne.n	d5232 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d522c:	2900      	cmp	r1, #0
   d522e:	da01      	bge.n	d5234 <_ZN5Print5printEli+0x24>
   d5230:	e004      	b.n	d523c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5232:	b2d2      	uxtb	r2, r2
  }
}
   d5234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5238:	f7ff bfa7 	b.w	d518a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d523c:	212d      	movs	r1, #45	; 0x2d
   d523e:	f7ff ff87 	bl	d5150 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5242:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5244:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5246:	4271      	negs	r1, r6
   d5248:	4638      	mov	r0, r7
   d524a:	f7ff ff9e 	bl	d518a <_ZN5Print11printNumberEmh>
   d524e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5254 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d5254:	b538      	push	{r3, r4, r5, lr}
   d5256:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5258:	f7ff ffda 	bl	d5210 <_ZN5Print5printEli>
   d525c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d525e:	4628      	mov	r0, r5
   d5260:	f7ff ff7d 	bl	d515e <_ZN5Print7printlnEv>
  return n;
}
   d5264:	4420      	add	r0, r4
   d5266:	bd38      	pop	{r3, r4, r5, pc}

000d5268 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d526c:	ec57 6b10 	vmov	r6, r7, d0
   d5270:	4682      	mov	sl, r0
   d5272:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5274:	ee10 2a10 	vmov	r2, s0
   d5278:	463b      	mov	r3, r7
   d527a:	ee10 0a10 	vmov	r0, s0
   d527e:	4639      	mov	r1, r7
   d5280:	f001 f918 	bl	d64b4 <__aeabi_dcmpun>
   d5284:	b108      	cbz	r0, d528a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5286:	4948      	ldr	r1, [pc, #288]	; (d53a8 <_ZN5Print10printFloatEdh+0x140>)
   d5288:	e012      	b.n	d52b0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d528a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d528e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5292:	4b46      	ldr	r3, [pc, #280]	; (d53ac <_ZN5Print10printFloatEdh+0x144>)
   d5294:	4630      	mov	r0, r6
   d5296:	4649      	mov	r1, r9
   d5298:	f001 f90c 	bl	d64b4 <__aeabi_dcmpun>
   d529c:	b968      	cbnz	r0, d52ba <_ZN5Print10printFloatEdh+0x52>
   d529e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d52a2:	4b42      	ldr	r3, [pc, #264]	; (d53ac <_ZN5Print10printFloatEdh+0x144>)
   d52a4:	4630      	mov	r0, r6
   d52a6:	4649      	mov	r1, r9
   d52a8:	f001 f8e6 	bl	d6478 <__aeabi_dcmple>
   d52ac:	b928      	cbnz	r0, d52ba <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52ae:	4940      	ldr	r1, [pc, #256]	; (d53b0 <_ZN5Print10printFloatEdh+0x148>)
   d52b0:	4650      	mov	r0, sl
   d52b2:	f7ff ff39 	bl	d5128 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d52b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d52ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d52be:	4b3d      	ldr	r3, [pc, #244]	; (d53b4 <_ZN5Print10printFloatEdh+0x14c>)
   d52c0:	4630      	mov	r0, r6
   d52c2:	4639      	mov	r1, r7
   d52c4:	f001 f8ec 	bl	d64a0 <__aeabi_dcmpgt>
   d52c8:	b108      	cbz	r0, d52ce <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52ca:	493b      	ldr	r1, [pc, #236]	; (d53b8 <_ZN5Print10printFloatEdh+0x150>)
   d52cc:	e7f0      	b.n	d52b0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d52ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d52d2:	4b3a      	ldr	r3, [pc, #232]	; (d53bc <_ZN5Print10printFloatEdh+0x154>)
   d52d4:	4630      	mov	r0, r6
   d52d6:	4639      	mov	r1, r7
   d52d8:	f001 f8c4 	bl	d6464 <__aeabi_dcmplt>
   d52dc:	2800      	cmp	r0, #0
   d52de:	d1f4      	bne.n	d52ca <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d52e0:	2200      	movs	r2, #0
   d52e2:	2300      	movs	r3, #0
   d52e4:	4630      	mov	r0, r6
   d52e6:	4639      	mov	r1, r7
   d52e8:	f001 f8bc 	bl	d6464 <__aeabi_dcmplt>
   d52ec:	b140      	cbz	r0, d5300 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d52ee:	212d      	movs	r1, #45	; 0x2d
   d52f0:	4650      	mov	r0, sl
   d52f2:	f7ff ff2d 	bl	d5150 <_ZN5Print5printEc>
     number = -number;
   d52f6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d52fa:	4604      	mov	r4, r0
     number = -number;
   d52fc:	461f      	mov	r7, r3
   d52fe:	e000      	b.n	d5302 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5300:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5302:	492f      	ldr	r1, [pc, #188]	; (d53c0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5304:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5308:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d530a:	fa5f f388 	uxtb.w	r3, r8
   d530e:	429d      	cmp	r5, r3
   d5310:	d906      	bls.n	d5320 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5312:	2200      	movs	r2, #0
   d5314:	4b2b      	ldr	r3, [pc, #172]	; (d53c4 <_ZN5Print10printFloatEdh+0x15c>)
   d5316:	f000 ff5d 	bl	d61d4 <__aeabi_ddiv>
   d531a:	f108 0801 	add.w	r8, r8, #1
   d531e:	e7f4      	b.n	d530a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5320:	4632      	mov	r2, r6
   d5322:	463b      	mov	r3, r7
   d5324:	f000 fc7a 	bl	d5c1c <__adddf3>
   d5328:	460f      	mov	r7, r1
   d532a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d532c:	f001 f900 	bl	d6530 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5330:	220a      	movs	r2, #10
   d5332:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5334:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5336:	4650      	mov	r0, sl
   d5338:	f7ff ff27 	bl	d518a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d533c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d533e:	b37d      	cbz	r5, d53a0 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5340:	4640      	mov	r0, r8
   d5342:	f000 fda7 	bl	d5e94 <__aeabi_ui2d>
   d5346:	4602      	mov	r2, r0
   d5348:	460b      	mov	r3, r1
   d534a:	4630      	mov	r0, r6
   d534c:	4639      	mov	r1, r7
   d534e:	f000 fc63 	bl	d5c18 <__aeabi_dsub>
   d5352:	4606      	mov	r6, r0
   d5354:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5356:	4650      	mov	r0, sl
   d5358:	491b      	ldr	r1, [pc, #108]	; (d53c8 <_ZN5Print10printFloatEdh+0x160>)
   d535a:	f7ff fee5 	bl	d5128 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d535e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5360:	4b18      	ldr	r3, [pc, #96]	; (d53c4 <_ZN5Print10printFloatEdh+0x15c>)
   d5362:	2200      	movs	r2, #0
   d5364:	4630      	mov	r0, r6
   d5366:	4639      	mov	r1, r7
   d5368:	f000 fe0a 	bl	d5f80 <__aeabi_dmul>
   d536c:	460f      	mov	r7, r1
   d536e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5370:	f001 f8b6 	bl	d64e0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5374:	220a      	movs	r2, #10
   d5376:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5378:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d537a:	4650      	mov	r0, sl
   d537c:	f7ff ff48 	bl	d5210 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5380:	4404      	add	r4, r0
    remainder -= toPrint;
   d5382:	4640      	mov	r0, r8
   d5384:	f000 fd96 	bl	d5eb4 <__aeabi_i2d>
   d5388:	4602      	mov	r2, r0
   d538a:	460b      	mov	r3, r1
   d538c:	4630      	mov	r0, r6
   d538e:	4639      	mov	r1, r7
   d5390:	f000 fc42 	bl	d5c18 <__aeabi_dsub>
   d5394:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5396:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d539a:	4606      	mov	r6, r0
   d539c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d539e:	d1df      	bne.n	d5360 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d53a0:	4620      	mov	r0, r4
   d53a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d53a6:	bf00      	nop
   d53a8:	000d699c 	.word	0x000d699c
   d53ac:	7fefffff 	.word	0x7fefffff
   d53b0:	000d69a6 	.word	0x000d69a6
   d53b4:	41efffff 	.word	0x41efffff
   d53b8:	000d69a0 	.word	0x000d69a0
   d53bc:	c1efffff 	.word	0xc1efffff
   d53c0:	3fe00000 	.word	0x3fe00000
   d53c4:	40240000 	.word	0x40240000
   d53c8:	000d69a4 	.word	0x000d69a4

000d53cc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d53cc:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d53ce:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d53d0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d53d2:	f7ff ff49 	bl	d5268 <_ZN5Print10printFloatEdh>
   d53d6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d53d8:	4628      	mov	r0, r5
   d53da:	f7ff fec0 	bl	d515e <_ZN5Print7printlnEv>
  return n;
}
   d53de:	4420      	add	r0, r4
   d53e0:	bd38      	pop	{r3, r4, r5, pc}

000d53e2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53e2:	b40c      	push	{r2, r3}
   d53e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53e8:	b087      	sub	sp, #28
   d53ea:	af00      	add	r7, sp, #0
   d53ec:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d53f0:	4605      	mov	r5, r0
   d53f2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d53f6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53f8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d53fa:	4623      	mov	r3, r4
   d53fc:	464a      	mov	r2, r9
   d53fe:	2114      	movs	r1, #20
   d5400:	1d38      	adds	r0, r7, #4
   d5402:	f7ff fbc7 	bl	d4b94 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5406:	2813      	cmp	r0, #19
   d5408:	d805      	bhi.n	d5416 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d540a:	1d39      	adds	r1, r7, #4
   d540c:	4628      	mov	r0, r5
   d540e:	f7ff fe8b 	bl	d5128 <_ZN5Print5writeEPKc>
   d5412:	4604      	mov	r4, r0
   d5414:	e013      	b.n	d543e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5416:	f100 0308 	add.w	r3, r0, #8
   d541a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d541e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5420:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5424:	1c41      	adds	r1, r0, #1
   d5426:	4623      	mov	r3, r4
   d5428:	464a      	mov	r2, r9
   d542a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d542c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d542e:	f7ff fbb1 	bl	d4b94 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5432:	4669      	mov	r1, sp
   d5434:	4628      	mov	r0, r5
   d5436:	f7ff fe77 	bl	d5128 <_ZN5Print5writeEPKc>
   d543a:	4604      	mov	r4, r0
   d543c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d543e:	b11e      	cbz	r6, d5448 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5440:	4628      	mov	r0, r5
   d5442:	f7ff fe8c 	bl	d515e <_ZN5Print7printlnEv>
   d5446:	4404      	add	r4, r0
    return n;
}
   d5448:	4620      	mov	r0, r4
   d544a:	371c      	adds	r7, #28
   d544c:	46bd      	mov	sp, r7
   d544e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5452:	b002      	add	sp, #8
   d5454:	4770      	bx	lr

000d5456 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5456:	b510      	push	{r4, lr}
   d5458:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d545a:	f7ff fbaf 	bl	d4bbc <_ZNSt14_Function_baseD1Ev>
   d545e:	4620      	mov	r0, r4
   d5460:	bd10      	pop	{r4, pc}
	...

000d5464 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5464:	4803      	ldr	r0, [pc, #12]	; (d5474 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5466:	4a04      	ldr	r2, [pc, #16]	; (d5478 <_GLOBAL__sub_I_RGB+0x14>)
   d5468:	4904      	ldr	r1, [pc, #16]	; (d547c <_GLOBAL__sub_I_RGB+0x18>)
   d546a:	2300      	movs	r3, #0
   d546c:	6083      	str	r3, [r0, #8]
   d546e:	f000 ba7f 	b.w	d5970 <__aeabi_atexit>
   d5472:	bf00      	nop
   d5474:	2003e5b4 	.word	0x2003e5b4
   d5478:	2003e3b8 	.word	0x2003e3b8
   d547c:	000d5457 	.word	0x000d5457

000d5480 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5480:	4770      	bx	lr

000d5482 <_ZN8SPIClassD0Ev>:
   d5482:	b510      	push	{r4, lr}
   d5484:	2110      	movs	r1, #16
   d5486:	4604      	mov	r4, r0
   d5488:	f000 fa77 	bl	d597a <_ZdlPvj>
   d548c:	4620      	mov	r0, r4
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5490:	b570      	push	{r4, r5, r6, lr}
   d5492:	4b08      	ldr	r3, [pc, #32]	; (d54b4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5494:	6003      	str	r3, [r0, #0]
   d5496:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5498:	2500      	movs	r5, #0
   d549a:	460e      	mov	r6, r1
   d549c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d54a0:	f7ff f9a4 	bl	d47ec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d54a4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d54a6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d54a8:	f7ff fa60 	bl	d496c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d54ac:	60a5      	str	r5, [r4, #8]
}
   d54ae:	4620      	mov	r0, r4
   d54b0:	bd70      	pop	{r4, r5, r6, pc}
   d54b2:	bf00      	nop
   d54b4:	000d69b4 	.word	0x000d69b4

000d54b8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d54b8:	7900      	ldrb	r0, [r0, #4]
   d54ba:	f7ff ba5f 	b.w	d497c <HAL_SPI_Is_Enabled>
	...

000d54c0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d54c0:	4b04      	ldr	r3, [pc, #16]	; (d54d4 <_GLOBAL__sub_I_System+0x14>)
   d54c2:	2000      	movs	r0, #0
   d54c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d54c8:	7018      	strb	r0, [r3, #0]
   d54ca:	8058      	strh	r0, [r3, #2]
   d54cc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54ce:	f7ff bad5 	b.w	d4a7c <set_system_mode>
   d54d2:	bf00      	nop
   d54d4:	2003e5c4 	.word	0x2003e5c4

000d54d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d54d8:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d54da:	681a      	ldr	r2, [r3, #0]
   d54dc:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d54de:	601a      	str	r2, [r3, #0]
   d54e0:	4770      	bx	lr
   d54e2:	bf00      	nop
   d54e4:	2003e350 	.word	0x2003e350
   d54e8:	2003e5cc 	.word	0x2003e5cc

000d54ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d54ec:	4770      	bx	lr

000d54ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54ee:	7441      	strb	r1, [r0, #17]
   d54f0:	4770      	bx	lr

000d54f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d54f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d54f4:	7c00      	ldrb	r0, [r0, #16]
   d54f6:	f7ff fa81 	bl	d49fc <HAL_USART_Available_Data_For_Write>
}
   d54fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54fe:	bd08      	pop	{r3, pc}

000d5500 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5500:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5502:	7c00      	ldrb	r0, [r0, #16]
   d5504:	f7ff fa52 	bl	d49ac <HAL_USART_Available_Data>
}
   d5508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d550c:	bd08      	pop	{r3, pc}

000d550e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d550e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	f7ff fa5b 	bl	d49cc <HAL_USART_Peek_Data>
}
   d5516:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d551a:	bf28      	it	cs
   d551c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5520:	bd08      	pop	{r3, pc}

000d5522 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5522:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5524:	7c00      	ldrb	r0, [r0, #16]
   d5526:	f7ff fa49 	bl	d49bc <HAL_USART_Read_Data>
}
   d552a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d552e:	bf28      	it	cs
   d5530:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5534:	bd08      	pop	{r3, pc}

000d5536 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5536:	7c00      	ldrb	r0, [r0, #16]
   d5538:	f7ff ba50 	b.w	d49dc <HAL_USART_Flush_Data>

000d553c <_ZN11USARTSerialD0Ev>:
   d553c:	b510      	push	{r4, lr}
   d553e:	2114      	movs	r1, #20
   d5540:	4604      	mov	r4, r0
   d5542:	f000 fa1a 	bl	d597a <_ZdlPvj>
   d5546:	4620      	mov	r0, r4
   d5548:	bd10      	pop	{r4, pc}

000d554a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d554a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d554c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d554e:	4604      	mov	r4, r0
   d5550:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5552:	b925      	cbnz	r5, d555e <_ZN11USARTSerial5writeEh+0x14>
   d5554:	7c00      	ldrb	r0, [r0, #16]
   d5556:	f7ff fa51 	bl	d49fc <HAL_USART_Available_Data_For_Write>
   d555a:	2800      	cmp	r0, #0
   d555c:	dd05      	ble.n	d556a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d555e:	4631      	mov	r1, r6
   d5560:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5566:	f7ff ba19 	b.w	d499c <HAL_USART_Write_Data>
  }
  return 0;
}
   d556a:	4628      	mov	r0, r5
   d556c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5570:	b510      	push	{r4, lr}
   d5572:	4604      	mov	r4, r0
   d5574:	4608      	mov	r0, r1
   d5576:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5578:	2200      	movs	r2, #0
   d557a:	6062      	str	r2, [r4, #4]
   d557c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5580:	60a2      	str	r2, [r4, #8]
   d5582:	4a05      	ldr	r2, [pc, #20]	; (d5598 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5584:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5586:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5588:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d558a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d558c:	461a      	mov	r2, r3
   d558e:	f7ff f9fd 	bl	d498c <HAL_USART_Init>
}
   d5592:	4620      	mov	r0, r4
   d5594:	bd10      	pop	{r4, pc}
   d5596:	bf00      	nop
   d5598:	000d69f0 	.word	0x000d69f0

000d559c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	f7ff ba25 	b.w	d49ec <HAL_USART_Is_Enabled>
	...

000d55a4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d55a4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55a6:	4d0c      	ldr	r5, [pc, #48]	; (d55d8 <_Z22__fetch_global_Serial1v+0x34>)
   d55a8:	6829      	ldr	r1, [r5, #0]
   d55aa:	f011 0401 	ands.w	r4, r1, #1
   d55ae:	d111      	bne.n	d55d4 <_Z22__fetch_global_Serial1v+0x30>
   d55b0:	4628      	mov	r0, r5
   d55b2:	f7fe fd76 	bl	d40a2 <__cxa_guard_acquire>
   d55b6:	b168      	cbz	r0, d55d4 <_Z22__fetch_global_Serial1v+0x30>
   d55b8:	4a08      	ldr	r2, [pc, #32]	; (d55dc <_Z22__fetch_global_Serial1v+0x38>)
   d55ba:	4b09      	ldr	r3, [pc, #36]	; (d55e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d55bc:	4809      	ldr	r0, [pc, #36]	; (d55e4 <_Z22__fetch_global_Serial1v+0x40>)
   d55be:	4621      	mov	r1, r4
   d55c0:	f7ff ffd6 	bl	d5570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d55c4:	4628      	mov	r0, r5
   d55c6:	f7fe fd71 	bl	d40ac <__cxa_guard_release>
   d55ca:	4a07      	ldr	r2, [pc, #28]	; (d55e8 <_Z22__fetch_global_Serial1v+0x44>)
   d55cc:	4907      	ldr	r1, [pc, #28]	; (d55ec <_Z22__fetch_global_Serial1v+0x48>)
   d55ce:	4805      	ldr	r0, [pc, #20]	; (d55e4 <_Z22__fetch_global_Serial1v+0x40>)
   d55d0:	f000 f9ce 	bl	d5970 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d55d4:	4803      	ldr	r0, [pc, #12]	; (d55e4 <_Z22__fetch_global_Serial1v+0x40>)
   d55d6:	bd38      	pop	{r3, r4, r5, pc}
   d55d8:	2003e668 	.word	0x2003e668
   d55dc:	2003e66c 	.word	0x2003e66c
   d55e0:	2003e5e4 	.word	0x2003e5e4
   d55e4:	2003e5d0 	.word	0x2003e5d0
   d55e8:	2003e3b8 	.word	0x2003e3b8
   d55ec:	000d54ed 	.word	0x000d54ed

000d55f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55f0:	7441      	strb	r1, [r0, #17]
   d55f2:	4770      	bx	lr

000d55f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55f4:	4770      	bx	lr

000d55f6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d55f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55f8:	2100      	movs	r1, #0
   d55fa:	7c00      	ldrb	r0, [r0, #16]
   d55fc:	f7ff fa26 	bl	d4a4c <HAL_USB_USART_Receive_Data>
}
   d5600:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5604:	bf28      	it	cs
   d5606:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d560a:	bd08      	pop	{r3, pc}

000d560c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d560c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d560e:	2101      	movs	r1, #1
   d5610:	7c00      	ldrb	r0, [r0, #16]
   d5612:	f7ff fa1b 	bl	d4a4c <HAL_USB_USART_Receive_Data>
}
   d5616:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d561a:	bf28      	it	cs
   d561c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5620:	bd08      	pop	{r3, pc}

000d5622 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5622:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5624:	7c00      	ldrb	r0, [r0, #16]
   d5626:	f7ff fa09 	bl	d4a3c <HAL_USB_USART_Available_Data_For_Write>
}
   d562a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d562e:	bd08      	pop	{r3, pc}

000d5630 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5630:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5632:	7c00      	ldrb	r0, [r0, #16]
   d5634:	f7ff f9fa 	bl	d4a2c <HAL_USB_USART_Available_Data>
}
   d5638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d563c:	bd08      	pop	{r3, pc}

000d563e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d563e:	7c00      	ldrb	r0, [r0, #16]
   d5640:	f7ff ba14 	b.w	d4a6c <HAL_USB_USART_Flush_Data>

000d5644 <_ZN9USBSerialD0Ev>:
   d5644:	b510      	push	{r4, lr}
   d5646:	2114      	movs	r1, #20
   d5648:	4604      	mov	r4, r0
   d564a:	f000 f996 	bl	d597a <_ZdlPvj>
   d564e:	4620      	mov	r0, r4
   d5650:	bd10      	pop	{r4, pc}

000d5652 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5652:	b538      	push	{r3, r4, r5, lr}
   d5654:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5656:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5658:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d565a:	f7ff f9ef 	bl	d4a3c <HAL_USB_USART_Available_Data_For_Write>
   d565e:	2800      	cmp	r0, #0
   d5660:	dc01      	bgt.n	d5666 <_ZN9USBSerial5writeEh+0x14>
   d5662:	7c60      	ldrb	r0, [r4, #17]
   d5664:	b128      	cbz	r0, d5672 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5666:	4629      	mov	r1, r5
   d5668:	7c20      	ldrb	r0, [r4, #16]
   d566a:	f7ff f9f7 	bl	d4a5c <HAL_USB_USART_Send_Data>
   d566e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5672:	bd38      	pop	{r3, r4, r5, pc}

000d5674 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5674:	b510      	push	{r4, lr}
   d5676:	4604      	mov	r4, r0
   d5678:	2300      	movs	r3, #0
   d567a:	6063      	str	r3, [r4, #4]
   d567c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5680:	60a3      	str	r3, [r4, #8]
   d5682:	4b05      	ldr	r3, [pc, #20]	; (d5698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5684:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5686:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5688:	4608      	mov	r0, r1
{
  _serial = serial;
   d568a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d568c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d568e:	4611      	mov	r1, r2
   d5690:	f7ff f9bc 	bl	d4a0c <HAL_USB_USART_Init>
}
   d5694:	4620      	mov	r0, r4
   d5696:	bd10      	pop	{r4, pc}
   d5698:	000d6a20 	.word	0x000d6a20

000d569c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d569c:	2200      	movs	r2, #0
   d569e:	7c00      	ldrb	r0, [r0, #16]
   d56a0:	f7ff b9bc 	b.w	d4a1c <HAL_USB_USART_Begin>

000d56a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56a6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56aa:	2100      	movs	r1, #0
   d56ac:	f000 ffc9 	bl	d6642 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd10      	pop	{r4, pc}

000d56b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56b6:	4d0e      	ldr	r5, [pc, #56]	; (d56f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d56b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56ba:	a801      	add	r0, sp, #4
   d56bc:	f7ff fff2 	bl	d56a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56c0:	6829      	ldr	r1, [r5, #0]
   d56c2:	f011 0401 	ands.w	r4, r1, #1
   d56c6:	d110      	bne.n	d56ea <_Z16_fetch_usbserialv+0x36>
   d56c8:	4628      	mov	r0, r5
   d56ca:	f7fe fcea 	bl	d40a2 <__cxa_guard_acquire>
   d56ce:	b160      	cbz	r0, d56ea <_Z16_fetch_usbserialv+0x36>
   d56d0:	aa01      	add	r2, sp, #4
   d56d2:	4621      	mov	r1, r4
   d56d4:	4807      	ldr	r0, [pc, #28]	; (d56f4 <_Z16_fetch_usbserialv+0x40>)
   d56d6:	f7ff ffcd 	bl	d5674 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d56da:	4628      	mov	r0, r5
   d56dc:	f7fe fce6 	bl	d40ac <__cxa_guard_release>
   d56e0:	4a05      	ldr	r2, [pc, #20]	; (d56f8 <_Z16_fetch_usbserialv+0x44>)
   d56e2:	4906      	ldr	r1, [pc, #24]	; (d56fc <_Z16_fetch_usbserialv+0x48>)
   d56e4:	4803      	ldr	r0, [pc, #12]	; (d56f4 <_Z16_fetch_usbserialv+0x40>)
   d56e6:	f000 f943 	bl	d5970 <__aeabi_atexit>
	return _usbserial;
}
   d56ea:	4802      	ldr	r0, [pc, #8]	; (d56f4 <_Z16_fetch_usbserialv+0x40>)
   d56ec:	b007      	add	sp, #28
   d56ee:	bd30      	pop	{r4, r5, pc}
   d56f0:	2003e6f0 	.word	0x2003e6f0
   d56f4:	2003e6f4 	.word	0x2003e6f4
   d56f8:	2003e3b8 	.word	0x2003e3b8
   d56fc:	000d55f5 	.word	0x000d55f5

000d5700 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5700:	2200      	movs	r2, #0
   d5702:	4611      	mov	r1, r2
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	f7ff b9fd 	b.w	d4b04 <network_ready>

000d570a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d570a:	2200      	movs	r2, #0
   d570c:	4611      	mov	r1, r2
   d570e:	6840      	ldr	r0, [r0, #4]
   d5710:	f7ff ba18 	b.w	d4b44 <network_listening>

000d5714 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5714:	2200      	movs	r2, #0
   d5716:	4611      	mov	r1, r2
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	f7ff ba23 	b.w	d4b64 <network_get_listen_timeout>

000d571e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d571e:	2200      	movs	r2, #0
   d5720:	6840      	ldr	r0, [r0, #4]
   d5722:	f7ff ba17 	b.w	d4b54 <network_set_listen_timeout>

000d5726 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5726:	2200      	movs	r2, #0
   d5728:	f081 0101 	eor.w	r1, r1, #1
   d572c:	6840      	ldr	r0, [r0, #4]
   d572e:	f7ff ba01 	b.w	d4b34 <network_listen>

000d5732 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5732:	2300      	movs	r3, #0
   d5734:	461a      	mov	r2, r3
   d5736:	4619      	mov	r1, r3
   d5738:	6840      	ldr	r0, [r0, #4]
   d573a:	f7ff b9f3 	b.w	d4b24 <network_off>

000d573e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d573e:	2300      	movs	r3, #0
   d5740:	461a      	mov	r2, r3
   d5742:	4619      	mov	r1, r3
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	f7ff b9e5 	b.w	d4b14 <network_on>

000d574a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d574a:	2200      	movs	r2, #0
   d574c:	4611      	mov	r1, r2
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7ff b9c8 	b.w	d4ae4 <network_connecting>

000d5754 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5754:	2200      	movs	r2, #0
   d5756:	2102      	movs	r1, #2
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	f7ff b9cb 	b.w	d4af4 <network_disconnect>

000d575e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d575e:	2300      	movs	r3, #0
   d5760:	461a      	mov	r2, r3
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7ff b9b6 	b.w	d4ad4 <network_connect>

000d5768 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5768:	4b02      	ldr	r3, [pc, #8]	; (d5774 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d576a:	2204      	movs	r2, #4
   d576c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d576e:	4a02      	ldr	r2, [pc, #8]	; (d5778 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5770:	601a      	str	r2, [r3, #0]
   d5772:	4770      	bx	lr
   d5774:	2003e708 	.word	0x2003e708
   d5778:	000d6a50 	.word	0x000d6a50

000d577c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d577c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d577e:	4b0c      	ldr	r3, [pc, #48]	; (d57b0 <serialEventRun+0x34>)
   d5780:	b133      	cbz	r3, d5790 <serialEventRun+0x14>
   d5782:	f7ff ff97 	bl	d56b4 <_Z16_fetch_usbserialv>
   d5786:	6803      	ldr	r3, [r0, #0]
   d5788:	691b      	ldr	r3, [r3, #16]
   d578a:	4798      	blx	r3
   d578c:	2800      	cmp	r0, #0
   d578e:	dc09      	bgt.n	d57a4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5790:	4b08      	ldr	r3, [pc, #32]	; (d57b4 <serialEventRun+0x38>)
   d5792:	b163      	cbz	r3, d57ae <serialEventRun+0x32>
   d5794:	f7ff ff06 	bl	d55a4 <_Z22__fetch_global_Serial1v>
   d5798:	6803      	ldr	r3, [r0, #0]
   d579a:	691b      	ldr	r3, [r3, #16]
   d579c:	4798      	blx	r3
   d579e:	2800      	cmp	r0, #0
   d57a0:	dc03      	bgt.n	d57aa <serialEventRun+0x2e>
   d57a2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57a4:	f3af 8000 	nop.w
   d57a8:	e7f2      	b.n	d5790 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57aa:	f3af 8000 	nop.w
   d57ae:	bd08      	pop	{r3, pc}
	...

000d57b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57b8:	b508      	push	{r3, lr}
	serialEventRun();
   d57ba:	f7ff ffdf 	bl	d577c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57be:	f7ff f82d 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57c2:	4b01      	ldr	r3, [pc, #4]	; (d57c8 <_post_loop+0x10>)
   d57c4:	6018      	str	r0, [r3, #0]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	2003e714 	.word	0x2003e714

000d57cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57ce:	2300      	movs	r3, #0
   d57d0:	9300      	str	r3, [sp, #0]
   d57d2:	461a      	mov	r2, r3
   d57d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57d8:	f7ff f96a 	bl	d4ab0 <system_ctrl_set_result>
}
   d57dc:	b003      	add	sp, #12
   d57de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d57e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d57e6:	8843      	ldrh	r3, [r0, #2]
   d57e8:	2b0a      	cmp	r3, #10
   d57ea:	d008      	beq.n	d57fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d57ec:	2b50      	cmp	r3, #80	; 0x50
   d57ee:	d109      	bne.n	d5804 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d57f0:	4b09      	ldr	r3, [pc, #36]	; (d5818 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d57f2:	681b      	ldr	r3, [r3, #0]
   d57f4:	b13b      	cbz	r3, d5806 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d57f6:	b003      	add	sp, #12
   d57f8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d57fc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d57fe:	f7ff ffe5 	bl	d57cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5802:	e006      	b.n	d5812 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5804:	2300      	movs	r3, #0
   d5806:	9300      	str	r3, [sp, #0]
   d5808:	461a      	mov	r2, r3
   d580a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d580e:	f7ff f94f 	bl	d4ab0 <system_ctrl_set_result>
        break;
    }
}
   d5812:	b003      	add	sp, #12
   d5814:	f85d fb04 	ldr.w	pc, [sp], #4
   d5818:	2003e710 	.word	0x2003e710

000d581c <module_user_init_hook>:

void module_user_init_hook()
{
   d581c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d581e:	f7fe fff5 	bl	d480c <HAL_RNG_GetRandomNumber>
   d5822:	4604      	mov	r4, r0
    srand(seed);
   d5824:	f000 ff16 	bl	d6654 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5828:	4b07      	ldr	r3, [pc, #28]	; (d5848 <module_user_init_hook+0x2c>)
   d582a:	b113      	cbz	r3, d5832 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d582c:	4620      	mov	r0, r4
   d582e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5832:	2100      	movs	r1, #0
   d5834:	4804      	ldr	r0, [pc, #16]	; (d5848 <module_user_init_hook+0x2c>)
   d5836:	f7ff f945 	bl	d4ac4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d583a:	2100      	movs	r1, #0
   d583c:	4803      	ldr	r0, [pc, #12]	; (d584c <module_user_init_hook+0x30>)
}
   d583e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5842:	f7ff b92b 	b.w	d4a9c <system_ctrl_set_app_request_handler>
   d5846:	bf00      	nop
   d5848:	00000000 	.word	0x00000000
   d584c:	000d57e5 	.word	0x000d57e5

000d5850 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5850:	b510      	push	{r4, lr}
   d5852:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5854:	480f      	ldr	r0, [pc, #60]	; (d5894 <pinAvailable+0x44>)
   d5856:	f7ff fe2f 	bl	d54b8 <_ZN8SPIClass9isEnabledEv>
   d585a:	b128      	cbz	r0, d5868 <pinAvailable+0x18>
   d585c:	f1a4 030b 	sub.w	r3, r4, #11
   d5860:	2b02      	cmp	r3, #2
   d5862:	d801      	bhi.n	d5868 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5864:	2000      	movs	r0, #0
   d5866:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5868:	f000 f840 	bl	d58ec <_Z19__fetch_global_Wirev>
   d586c:	f7ff fa49 	bl	d4d02 <_ZN7TwoWire9isEnabledEv>
   d5870:	b108      	cbz	r0, d5876 <pinAvailable+0x26>
   d5872:	2c01      	cmp	r4, #1
   d5874:	d9f6      	bls.n	d5864 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5876:	f7ff fe95 	bl	d55a4 <_Z22__fetch_global_Serial1v>
   d587a:	f7ff fe8f 	bl	d559c <_ZN11USARTSerial9isEnabledEv>
   d587e:	b118      	cbz	r0, d5888 <pinAvailable+0x38>
   d5880:	f1a4 0309 	sub.w	r3, r4, #9
   d5884:	2b01      	cmp	r3, #1
   d5886:	d9ed      	bls.n	d5864 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5888:	2c23      	cmp	r4, #35	; 0x23
   d588a:	bf8c      	ite	hi
   d588c:	2000      	movhi	r0, #0
   d588e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5890:	bd10      	pop	{r4, pc}
   d5892:	bf00      	nop
   d5894:	2003e730 	.word	0x2003e730

000d5898 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5898:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d589a:	b538      	push	{r3, r4, r5, lr}
   d589c:	4604      	mov	r4, r0
   d589e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58a0:	d80a      	bhi.n	d58b8 <pinMode+0x20>
   d58a2:	29ff      	cmp	r1, #255	; 0xff
   d58a4:	d008      	beq.n	d58b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d58a6:	f7ff ffd3 	bl	d5850 <pinAvailable>
   d58aa:	b128      	cbz	r0, d58b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58ac:	4629      	mov	r1, r5
   d58ae:	4620      	mov	r0, r4
}
   d58b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58b4:	f7fe bfc2 	b.w	d483c <HAL_Pin_Mode>
   d58b8:	bd38      	pop	{r3, r4, r5, pc}

000d58ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d58ba:	b538      	push	{r3, r4, r5, lr}
   d58bc:	4604      	mov	r4, r0
   d58be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d58c0:	f7fe ffc4 	bl	d484c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d58c4:	28ff      	cmp	r0, #255	; 0xff
   d58c6:	d010      	beq.n	d58ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d58c8:	2806      	cmp	r0, #6
   d58ca:	d804      	bhi.n	d58d6 <digitalWrite+0x1c>
   d58cc:	234d      	movs	r3, #77	; 0x4d
   d58ce:	fa23 f000 	lsr.w	r0, r3, r0
   d58d2:	07c3      	lsls	r3, r0, #31
   d58d4:	d409      	bmi.n	d58ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d58d6:	4620      	mov	r0, r4
   d58d8:	f7ff ffba 	bl	d5850 <pinAvailable>
   d58dc:	b128      	cbz	r0, d58ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58de:	4629      	mov	r1, r5
   d58e0:	4620      	mov	r0, r4
}
   d58e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58e6:	f7fe bfb9 	b.w	d485c <HAL_GPIO_Write>
   d58ea:	bd38      	pop	{r3, r4, r5, pc}

000d58ec <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d58ec:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d58ee:	4d0b      	ldr	r5, [pc, #44]	; (d591c <_Z19__fetch_global_Wirev+0x30>)
   d58f0:	6829      	ldr	r1, [r5, #0]
   d58f2:	f011 0401 	ands.w	r4, r1, #1
   d58f6:	d10f      	bne.n	d5918 <_Z19__fetch_global_Wirev+0x2c>
   d58f8:	4628      	mov	r0, r5
   d58fa:	f7fe fbd2 	bl	d40a2 <__cxa_guard_acquire>
   d58fe:	b158      	cbz	r0, d5918 <_Z19__fetch_global_Wirev+0x2c>
   d5900:	4621      	mov	r1, r4
   d5902:	4807      	ldr	r0, [pc, #28]	; (d5920 <_Z19__fetch_global_Wirev+0x34>)
   d5904:	f7ff f9ce 	bl	d4ca4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5908:	4628      	mov	r0, r5
   d590a:	f7fe fbcf 	bl	d40ac <__cxa_guard_release>
   d590e:	4a05      	ldr	r2, [pc, #20]	; (d5924 <_Z19__fetch_global_Wirev+0x38>)
   d5910:	4905      	ldr	r1, [pc, #20]	; (d5928 <_Z19__fetch_global_Wirev+0x3c>)
   d5912:	4803      	ldr	r0, [pc, #12]	; (d5920 <_Z19__fetch_global_Wirev+0x34>)
   d5914:	f000 f82c 	bl	d5970 <__aeabi_atexit>
	return wire;
}
   d5918:	4801      	ldr	r0, [pc, #4]	; (d5920 <_Z19__fetch_global_Wirev+0x34>)
   d591a:	bd38      	pop	{r3, r4, r5, pc}
   d591c:	2003e718 	.word	0x2003e718
   d5920:	2003e71c 	.word	0x2003e71c
   d5924:	2003e3b8 	.word	0x2003e3b8
   d5928:	000d4c4d 	.word	0x000d4c4d

000d592c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d592c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d592e:	4c0c      	ldr	r4, [pc, #48]	; (d5960 <_GLOBAL__sub_I_SPI+0x34>)
   d5930:	4e0c      	ldr	r6, [pc, #48]	; (d5964 <_GLOBAL__sub_I_SPI+0x38>)
   d5932:	4d0d      	ldr	r5, [pc, #52]	; (d5968 <_GLOBAL__sub_I_SPI+0x3c>)
   d5934:	2100      	movs	r1, #0
   d5936:	4620      	mov	r0, r4
   d5938:	f7ff fdaa 	bl	d5490 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d593c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d593e:	4c0b      	ldr	r4, [pc, #44]	; (d596c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5940:	4632      	mov	r2, r6
   d5942:	4629      	mov	r1, r5
   d5944:	f000 f814 	bl	d5970 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5948:	2101      	movs	r1, #1
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff fda0 	bl	d5490 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5950:	4632      	mov	r2, r6
   d5952:	4629      	mov	r1, r5
   d5954:	4620      	mov	r0, r4
   d5956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d595a:	f000 b809 	b.w	d5970 <__aeabi_atexit>
   d595e:	bf00      	nop
   d5960:	2003e730 	.word	0x2003e730
   d5964:	2003e3b8 	.word	0x2003e3b8
   d5968:	000d5481 	.word	0x000d5481
   d596c:	2003e740 	.word	0x2003e740

000d5970 <__aeabi_atexit>:
   d5970:	460b      	mov	r3, r1
   d5972:	4601      	mov	r1, r0
   d5974:	4618      	mov	r0, r3
   d5976:	f000 be4b 	b.w	d6610 <__cxa_atexit>

000d597a <_ZdlPvj>:
   d597a:	f7fe bb8e 	b.w	d409a <_ZdlPv>
	...

000d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5980:	4b24      	ldr	r3, [pc, #144]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d0      	lsls	r0, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4b22      	ldr	r3, [pc, #136]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d1      	lsls	r1, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4b20      	ldr	r3, [pc, #128]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d599a:	681a      	ldr	r2, [r3, #0]
   d599c:	07d2      	lsls	r2, r2, #31
   d599e:	bf5c      	itt	pl
   d59a0:	2201      	movpl	r2, #1
   d59a2:	601a      	strpl	r2, [r3, #0]
   d59a4:	4b1e      	ldr	r3, [pc, #120]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d0      	lsls	r0, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b1c      	ldr	r3, [pc, #112]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d1      	lsls	r1, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b1a      	ldr	r3, [pc, #104]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d2      	lsls	r2, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b18      	ldr	r3, [pc, #96]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d0      	lsls	r0, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b16      	ldr	r3, [pc, #88]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d1      	lsls	r1, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b14      	ldr	r3, [pc, #80]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d2      	lsls	r2, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b12      	ldr	r3, [pc, #72]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d0      	lsls	r0, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b10      	ldr	r3, [pc, #64]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d1      	lsls	r1, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b0e      	ldr	r3, [pc, #56]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d2      	lsls	r2, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4770      	bx	lr
   d5a12:	bf00      	nop
   d5a14:	2003e77c 	.word	0x2003e77c
   d5a18:	2003e778 	.word	0x2003e778
   d5a1c:	2003e774 	.word	0x2003e774
   d5a20:	2003e770 	.word	0x2003e770
   d5a24:	2003e76c 	.word	0x2003e76c
   d5a28:	2003e768 	.word	0x2003e768
   d5a2c:	2003e764 	.word	0x2003e764
   d5a30:	2003e760 	.word	0x2003e760
   d5a34:	2003e75c 	.word	0x2003e75c
   d5a38:	2003e758 	.word	0x2003e758
   d5a3c:	2003e754 	.word	0x2003e754
   d5a40:	2003e750 	.word	0x2003e750

000d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a44:	4b18      	ldr	r3, [pc, #96]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d1      	lsls	r1, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b16      	ldr	r3, [pc, #88]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d2      	lsls	r2, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b14      	ldr	r3, [pc, #80]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d0      	lsls	r0, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b12      	ldr	r3, [pc, #72]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b10      	ldr	r3, [pc, #64]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b0e      	ldr	r3, [pc, #56]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d0      	lsls	r0, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b0c      	ldr	r3, [pc, #48]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d1      	lsls	r1, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b0a      	ldr	r3, [pc, #40]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d2      	lsls	r2, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4770      	bx	lr
   d5aa6:	bf00      	nop
   d5aa8:	2003e79c 	.word	0x2003e79c
   d5aac:	2003e798 	.word	0x2003e798
   d5ab0:	2003e794 	.word	0x2003e794
   d5ab4:	2003e790 	.word	0x2003e790
   d5ab8:	2003e78c 	.word	0x2003e78c
   d5abc:	2003e788 	.word	0x2003e788
   d5ac0:	2003e784 	.word	0x2003e784
   d5ac4:	2003e780 	.word	0x2003e780

000d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ac8:	4b18      	ldr	r3, [pc, #96]	; (d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d1      	lsls	r1, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b16      	ldr	r3, [pc, #88]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d2      	lsls	r2, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b14      	ldr	r3, [pc, #80]	; (d5b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d0      	lsls	r0, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b12      	ldr	r3, [pc, #72]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d1      	lsls	r1, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b10      	ldr	r3, [pc, #64]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d2      	lsls	r2, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b0e      	ldr	r3, [pc, #56]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d0      	lsls	r0, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b0c      	ldr	r3, [pc, #48]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d1      	lsls	r1, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b0a      	ldr	r3, [pc, #40]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d2      	lsls	r2, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4770      	bx	lr
   d5b2a:	bf00      	nop
   d5b2c:	2003e7bc 	.word	0x2003e7bc
   d5b30:	2003e7b8 	.word	0x2003e7b8
   d5b34:	2003e7b4 	.word	0x2003e7b4
   d5b38:	2003e7b0 	.word	0x2003e7b0
   d5b3c:	2003e7ac 	.word	0x2003e7ac
   d5b40:	2003e7a8 	.word	0x2003e7a8
   d5b44:	2003e7a4 	.word	0x2003e7a4
   d5b48:	2003e7a0 	.word	0x2003e7a0

000d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b4c:	4b24      	ldr	r3, [pc, #144]	; (d5be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b4e:	681a      	ldr	r2, [r3, #0]
   d5b50:	07d0      	lsls	r0, r2, #31
   d5b52:	bf5c      	itt	pl
   d5b54:	2201      	movpl	r2, #1
   d5b56:	601a      	strpl	r2, [r3, #0]
   d5b58:	4b22      	ldr	r3, [pc, #136]	; (d5be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b5a:	681a      	ldr	r2, [r3, #0]
   d5b5c:	07d1      	lsls	r1, r2, #31
   d5b5e:	bf5c      	itt	pl
   d5b60:	2201      	movpl	r2, #1
   d5b62:	601a      	strpl	r2, [r3, #0]
   d5b64:	4b20      	ldr	r3, [pc, #128]	; (d5be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b66:	681a      	ldr	r2, [r3, #0]
   d5b68:	07d2      	lsls	r2, r2, #31
   d5b6a:	bf5c      	itt	pl
   d5b6c:	2201      	movpl	r2, #1
   d5b6e:	601a      	strpl	r2, [r3, #0]
   d5b70:	4b1e      	ldr	r3, [pc, #120]	; (d5bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b72:	681a      	ldr	r2, [r3, #0]
   d5b74:	07d0      	lsls	r0, r2, #31
   d5b76:	bf5c      	itt	pl
   d5b78:	2201      	movpl	r2, #1
   d5b7a:	601a      	strpl	r2, [r3, #0]
   d5b7c:	4b1c      	ldr	r3, [pc, #112]	; (d5bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b7e:	681a      	ldr	r2, [r3, #0]
   d5b80:	07d1      	lsls	r1, r2, #31
   d5b82:	bf5c      	itt	pl
   d5b84:	2201      	movpl	r2, #1
   d5b86:	601a      	strpl	r2, [r3, #0]
   d5b88:	4b1a      	ldr	r3, [pc, #104]	; (d5bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b8a:	681a      	ldr	r2, [r3, #0]
   d5b8c:	07d2      	lsls	r2, r2, #31
   d5b8e:	bf5c      	itt	pl
   d5b90:	2201      	movpl	r2, #1
   d5b92:	601a      	strpl	r2, [r3, #0]
   d5b94:	4b18      	ldr	r3, [pc, #96]	; (d5bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b96:	681a      	ldr	r2, [r3, #0]
   d5b98:	07d0      	lsls	r0, r2, #31
   d5b9a:	bf5c      	itt	pl
   d5b9c:	2201      	movpl	r2, #1
   d5b9e:	601a      	strpl	r2, [r3, #0]
   d5ba0:	4b16      	ldr	r3, [pc, #88]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5ba2:	681a      	ldr	r2, [r3, #0]
   d5ba4:	07d1      	lsls	r1, r2, #31
   d5ba6:	bf5c      	itt	pl
   d5ba8:	2201      	movpl	r2, #1
   d5baa:	601a      	strpl	r2, [r3, #0]
   d5bac:	4b14      	ldr	r3, [pc, #80]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bae:	681a      	ldr	r2, [r3, #0]
   d5bb0:	07d2      	lsls	r2, r2, #31
   d5bb2:	bf5c      	itt	pl
   d5bb4:	2201      	movpl	r2, #1
   d5bb6:	601a      	strpl	r2, [r3, #0]
   d5bb8:	4b12      	ldr	r3, [pc, #72]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bba:	681a      	ldr	r2, [r3, #0]
   d5bbc:	07d0      	lsls	r0, r2, #31
   d5bbe:	bf5c      	itt	pl
   d5bc0:	2201      	movpl	r2, #1
   d5bc2:	601a      	strpl	r2, [r3, #0]
   d5bc4:	4b10      	ldr	r3, [pc, #64]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bc6:	681a      	ldr	r2, [r3, #0]
   d5bc8:	07d1      	lsls	r1, r2, #31
   d5bca:	bf5c      	itt	pl
   d5bcc:	2201      	movpl	r2, #1
   d5bce:	601a      	strpl	r2, [r3, #0]
   d5bd0:	4b0e      	ldr	r3, [pc, #56]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	07d2      	lsls	r2, r2, #31
   d5bd6:	bf5c      	itt	pl
   d5bd8:	2201      	movpl	r2, #1
   d5bda:	601a      	strpl	r2, [r3, #0]
   d5bdc:	4770      	bx	lr
   d5bde:	bf00      	nop
   d5be0:	2003e7ec 	.word	0x2003e7ec
   d5be4:	2003e7e8 	.word	0x2003e7e8
   d5be8:	2003e7e4 	.word	0x2003e7e4
   d5bec:	2003e7e0 	.word	0x2003e7e0
   d5bf0:	2003e7dc 	.word	0x2003e7dc
   d5bf4:	2003e7d8 	.word	0x2003e7d8
   d5bf8:	2003e7d4 	.word	0x2003e7d4
   d5bfc:	2003e7d0 	.word	0x2003e7d0
   d5c00:	2003e7cc 	.word	0x2003e7cc
   d5c04:	2003e7c8 	.word	0x2003e7c8
   d5c08:	2003e7c4 	.word	0x2003e7c4
   d5c0c:	2003e7c0 	.word	0x2003e7c0

000d5c10 <__aeabi_drsub>:
   d5c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5c14:	e002      	b.n	d5c1c <__adddf3>
   d5c16:	bf00      	nop

000d5c18 <__aeabi_dsub>:
   d5c18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5c1c <__adddf3>:
   d5c1c:	b530      	push	{r4, r5, lr}
   d5c1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5c22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5c26:	ea94 0f05 	teq	r4, r5
   d5c2a:	bf08      	it	eq
   d5c2c:	ea90 0f02 	teqeq	r0, r2
   d5c30:	bf1f      	itttt	ne
   d5c32:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5c36:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5c3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5c3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c42:	f000 80e2 	beq.w	d5e0a <__adddf3+0x1ee>
   d5c46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5c4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5c4e:	bfb8      	it	lt
   d5c50:	426d      	neglt	r5, r5
   d5c52:	dd0c      	ble.n	d5c6e <__adddf3+0x52>
   d5c54:	442c      	add	r4, r5
   d5c56:	ea80 0202 	eor.w	r2, r0, r2
   d5c5a:	ea81 0303 	eor.w	r3, r1, r3
   d5c5e:	ea82 0000 	eor.w	r0, r2, r0
   d5c62:	ea83 0101 	eor.w	r1, r3, r1
   d5c66:	ea80 0202 	eor.w	r2, r0, r2
   d5c6a:	ea81 0303 	eor.w	r3, r1, r3
   d5c6e:	2d36      	cmp	r5, #54	; 0x36
   d5c70:	bf88      	it	hi
   d5c72:	bd30      	pophi	{r4, r5, pc}
   d5c74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c84:	d002      	beq.n	d5c8c <__adddf3+0x70>
   d5c86:	4240      	negs	r0, r0
   d5c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c98:	d002      	beq.n	d5ca0 <__adddf3+0x84>
   d5c9a:	4252      	negs	r2, r2
   d5c9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5ca0:	ea94 0f05 	teq	r4, r5
   d5ca4:	f000 80a7 	beq.w	d5df6 <__adddf3+0x1da>
   d5ca8:	f1a4 0401 	sub.w	r4, r4, #1
   d5cac:	f1d5 0e20 	rsbs	lr, r5, #32
   d5cb0:	db0d      	blt.n	d5cce <__adddf3+0xb2>
   d5cb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5cb6:	fa22 f205 	lsr.w	r2, r2, r5
   d5cba:	1880      	adds	r0, r0, r2
   d5cbc:	f141 0100 	adc.w	r1, r1, #0
   d5cc0:	fa03 f20e 	lsl.w	r2, r3, lr
   d5cc4:	1880      	adds	r0, r0, r2
   d5cc6:	fa43 f305 	asr.w	r3, r3, r5
   d5cca:	4159      	adcs	r1, r3
   d5ccc:	e00e      	b.n	d5cec <__adddf3+0xd0>
   d5cce:	f1a5 0520 	sub.w	r5, r5, #32
   d5cd2:	f10e 0e20 	add.w	lr, lr, #32
   d5cd6:	2a01      	cmp	r2, #1
   d5cd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5cdc:	bf28      	it	cs
   d5cde:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5ce2:	fa43 f305 	asr.w	r3, r3, r5
   d5ce6:	18c0      	adds	r0, r0, r3
   d5ce8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5cec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cf0:	d507      	bpl.n	d5d02 <__adddf3+0xe6>
   d5cf2:	f04f 0e00 	mov.w	lr, #0
   d5cf6:	f1dc 0c00 	rsbs	ip, ip, #0
   d5cfa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5cfe:	eb6e 0101 	sbc.w	r1, lr, r1
   d5d02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d06:	d31b      	bcc.n	d5d40 <__adddf3+0x124>
   d5d08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5d0c:	d30c      	bcc.n	d5d28 <__adddf3+0x10c>
   d5d0e:	0849      	lsrs	r1, r1, #1
   d5d10:	ea5f 0030 	movs.w	r0, r0, rrx
   d5d14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5d18:	f104 0401 	add.w	r4, r4, #1
   d5d1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5d20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5d24:	f080 809a 	bcs.w	d5e5c <__adddf3+0x240>
   d5d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5d2c:	bf08      	it	eq
   d5d2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d32:	f150 0000 	adcs.w	r0, r0, #0
   d5d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d3a:	ea41 0105 	orr.w	r1, r1, r5
   d5d3e:	bd30      	pop	{r4, r5, pc}
   d5d40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5d44:	4140      	adcs	r0, r0
   d5d46:	eb41 0101 	adc.w	r1, r1, r1
   d5d4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d4e:	f1a4 0401 	sub.w	r4, r4, #1
   d5d52:	d1e9      	bne.n	d5d28 <__adddf3+0x10c>
   d5d54:	f091 0f00 	teq	r1, #0
   d5d58:	bf04      	itt	eq
   d5d5a:	4601      	moveq	r1, r0
   d5d5c:	2000      	moveq	r0, #0
   d5d5e:	fab1 f381 	clz	r3, r1
   d5d62:	bf08      	it	eq
   d5d64:	3320      	addeq	r3, #32
   d5d66:	f1a3 030b 	sub.w	r3, r3, #11
   d5d6a:	f1b3 0220 	subs.w	r2, r3, #32
   d5d6e:	da0c      	bge.n	d5d8a <__adddf3+0x16e>
   d5d70:	320c      	adds	r2, #12
   d5d72:	dd08      	ble.n	d5d86 <__adddf3+0x16a>
   d5d74:	f102 0c14 	add.w	ip, r2, #20
   d5d78:	f1c2 020c 	rsb	r2, r2, #12
   d5d7c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d80:	fa21 f102 	lsr.w	r1, r1, r2
   d5d84:	e00c      	b.n	d5da0 <__adddf3+0x184>
   d5d86:	f102 0214 	add.w	r2, r2, #20
   d5d8a:	bfd8      	it	le
   d5d8c:	f1c2 0c20 	rsble	ip, r2, #32
   d5d90:	fa01 f102 	lsl.w	r1, r1, r2
   d5d94:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d98:	bfdc      	itt	le
   d5d9a:	ea41 010c 	orrle.w	r1, r1, ip
   d5d9e:	4090      	lslle	r0, r2
   d5da0:	1ae4      	subs	r4, r4, r3
   d5da2:	bfa2      	ittt	ge
   d5da4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5da8:	4329      	orrge	r1, r5
   d5daa:	bd30      	popge	{r4, r5, pc}
   d5dac:	ea6f 0404 	mvn.w	r4, r4
   d5db0:	3c1f      	subs	r4, #31
   d5db2:	da1c      	bge.n	d5dee <__adddf3+0x1d2>
   d5db4:	340c      	adds	r4, #12
   d5db6:	dc0e      	bgt.n	d5dd6 <__adddf3+0x1ba>
   d5db8:	f104 0414 	add.w	r4, r4, #20
   d5dbc:	f1c4 0220 	rsb	r2, r4, #32
   d5dc0:	fa20 f004 	lsr.w	r0, r0, r4
   d5dc4:	fa01 f302 	lsl.w	r3, r1, r2
   d5dc8:	ea40 0003 	orr.w	r0, r0, r3
   d5dcc:	fa21 f304 	lsr.w	r3, r1, r4
   d5dd0:	ea45 0103 	orr.w	r1, r5, r3
   d5dd4:	bd30      	pop	{r4, r5, pc}
   d5dd6:	f1c4 040c 	rsb	r4, r4, #12
   d5dda:	f1c4 0220 	rsb	r2, r4, #32
   d5dde:	fa20 f002 	lsr.w	r0, r0, r2
   d5de2:	fa01 f304 	lsl.w	r3, r1, r4
   d5de6:	ea40 0003 	orr.w	r0, r0, r3
   d5dea:	4629      	mov	r1, r5
   d5dec:	bd30      	pop	{r4, r5, pc}
   d5dee:	fa21 f004 	lsr.w	r0, r1, r4
   d5df2:	4629      	mov	r1, r5
   d5df4:	bd30      	pop	{r4, r5, pc}
   d5df6:	f094 0f00 	teq	r4, #0
   d5dfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5dfe:	bf06      	itte	eq
   d5e00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5e04:	3401      	addeq	r4, #1
   d5e06:	3d01      	subne	r5, #1
   d5e08:	e74e      	b.n	d5ca8 <__adddf3+0x8c>
   d5e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e0e:	bf18      	it	ne
   d5e10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e14:	d029      	beq.n	d5e6a <__adddf3+0x24e>
   d5e16:	ea94 0f05 	teq	r4, r5
   d5e1a:	bf08      	it	eq
   d5e1c:	ea90 0f02 	teqeq	r0, r2
   d5e20:	d005      	beq.n	d5e2e <__adddf3+0x212>
   d5e22:	ea54 0c00 	orrs.w	ip, r4, r0
   d5e26:	bf04      	itt	eq
   d5e28:	4619      	moveq	r1, r3
   d5e2a:	4610      	moveq	r0, r2
   d5e2c:	bd30      	pop	{r4, r5, pc}
   d5e2e:	ea91 0f03 	teq	r1, r3
   d5e32:	bf1e      	ittt	ne
   d5e34:	2100      	movne	r1, #0
   d5e36:	2000      	movne	r0, #0
   d5e38:	bd30      	popne	{r4, r5, pc}
   d5e3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5e3e:	d105      	bne.n	d5e4c <__adddf3+0x230>
   d5e40:	0040      	lsls	r0, r0, #1
   d5e42:	4149      	adcs	r1, r1
   d5e44:	bf28      	it	cs
   d5e46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5e4a:	bd30      	pop	{r4, r5, pc}
   d5e4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5e50:	bf3c      	itt	cc
   d5e52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5e56:	bd30      	popcc	{r4, r5, pc}
   d5e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e64:	f04f 0000 	mov.w	r0, #0
   d5e68:	bd30      	pop	{r4, r5, pc}
   d5e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e6e:	bf1a      	itte	ne
   d5e70:	4619      	movne	r1, r3
   d5e72:	4610      	movne	r0, r2
   d5e74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e78:	bf1c      	itt	ne
   d5e7a:	460b      	movne	r3, r1
   d5e7c:	4602      	movne	r2, r0
   d5e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e82:	bf06      	itte	eq
   d5e84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e88:	ea91 0f03 	teqeq	r1, r3
   d5e8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e90:	bd30      	pop	{r4, r5, pc}
   d5e92:	bf00      	nop

000d5e94 <__aeabi_ui2d>:
   d5e94:	f090 0f00 	teq	r0, #0
   d5e98:	bf04      	itt	eq
   d5e9a:	2100      	moveq	r1, #0
   d5e9c:	4770      	bxeq	lr
   d5e9e:	b530      	push	{r4, r5, lr}
   d5ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ea8:	f04f 0500 	mov.w	r5, #0
   d5eac:	f04f 0100 	mov.w	r1, #0
   d5eb0:	e750      	b.n	d5d54 <__adddf3+0x138>
   d5eb2:	bf00      	nop

000d5eb4 <__aeabi_i2d>:
   d5eb4:	f090 0f00 	teq	r0, #0
   d5eb8:	bf04      	itt	eq
   d5eba:	2100      	moveq	r1, #0
   d5ebc:	4770      	bxeq	lr
   d5ebe:	b530      	push	{r4, r5, lr}
   d5ec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ec8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ecc:	bf48      	it	mi
   d5ece:	4240      	negmi	r0, r0
   d5ed0:	f04f 0100 	mov.w	r1, #0
   d5ed4:	e73e      	b.n	d5d54 <__adddf3+0x138>
   d5ed6:	bf00      	nop

000d5ed8 <__aeabi_f2d>:
   d5ed8:	0042      	lsls	r2, r0, #1
   d5eda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ede:	ea4f 0131 	mov.w	r1, r1, rrx
   d5ee2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ee6:	bf1f      	itttt	ne
   d5ee8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5eec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ef0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5ef4:	4770      	bxne	lr
   d5ef6:	f092 0f00 	teq	r2, #0
   d5efa:	bf14      	ite	ne
   d5efc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f00:	4770      	bxeq	lr
   d5f02:	b530      	push	{r4, r5, lr}
   d5f04:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f10:	e720      	b.n	d5d54 <__adddf3+0x138>
   d5f12:	bf00      	nop

000d5f14 <__aeabi_ul2d>:
   d5f14:	ea50 0201 	orrs.w	r2, r0, r1
   d5f18:	bf08      	it	eq
   d5f1a:	4770      	bxeq	lr
   d5f1c:	b530      	push	{r4, r5, lr}
   d5f1e:	f04f 0500 	mov.w	r5, #0
   d5f22:	e00a      	b.n	d5f3a <__aeabi_l2d+0x16>

000d5f24 <__aeabi_l2d>:
   d5f24:	ea50 0201 	orrs.w	r2, r0, r1
   d5f28:	bf08      	it	eq
   d5f2a:	4770      	bxeq	lr
   d5f2c:	b530      	push	{r4, r5, lr}
   d5f2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5f32:	d502      	bpl.n	d5f3a <__aeabi_l2d+0x16>
   d5f34:	4240      	negs	r0, r0
   d5f36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5f46:	f43f aedc 	beq.w	d5d02 <__adddf3+0xe6>
   d5f4a:	f04f 0203 	mov.w	r2, #3
   d5f4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f52:	bf18      	it	ne
   d5f54:	3203      	addne	r2, #3
   d5f56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f5a:	bf18      	it	ne
   d5f5c:	3203      	addne	r2, #3
   d5f5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f62:	f1c2 0320 	rsb	r3, r2, #32
   d5f66:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f6a:	fa20 f002 	lsr.w	r0, r0, r2
   d5f6e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f72:	ea40 000e 	orr.w	r0, r0, lr
   d5f76:	fa21 f102 	lsr.w	r1, r1, r2
   d5f7a:	4414      	add	r4, r2
   d5f7c:	e6c1      	b.n	d5d02 <__adddf3+0xe6>
   d5f7e:	bf00      	nop

000d5f80 <__aeabi_dmul>:
   d5f80:	b570      	push	{r4, r5, r6, lr}
   d5f82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f8e:	bf1d      	ittte	ne
   d5f90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f94:	ea94 0f0c 	teqne	r4, ip
   d5f98:	ea95 0f0c 	teqne	r5, ip
   d5f9c:	f000 f8de 	bleq	d615c <__aeabi_dmul+0x1dc>
   d5fa0:	442c      	add	r4, r5
   d5fa2:	ea81 0603 	eor.w	r6, r1, r3
   d5fa6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5faa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5fae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5fb2:	bf18      	it	ne
   d5fb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5fc0:	d038      	beq.n	d6034 <__aeabi_dmul+0xb4>
   d5fc2:	fba0 ce02 	umull	ip, lr, r0, r2
   d5fc6:	f04f 0500 	mov.w	r5, #0
   d5fca:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5fce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5fd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5fd6:	f04f 0600 	mov.w	r6, #0
   d5fda:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5fde:	f09c 0f00 	teq	ip, #0
   d5fe2:	bf18      	it	ne
   d5fe4:	f04e 0e01 	orrne.w	lr, lr, #1
   d5fe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5fec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ff0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5ff4:	d204      	bcs.n	d6000 <__aeabi_dmul+0x80>
   d5ff6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5ffa:	416d      	adcs	r5, r5
   d5ffc:	eb46 0606 	adc.w	r6, r6, r6
   d6000:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6004:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6008:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d600c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6010:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6014:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6018:	bf88      	it	hi
   d601a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d601e:	d81e      	bhi.n	d605e <__aeabi_dmul+0xde>
   d6020:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6024:	bf08      	it	eq
   d6026:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d602a:	f150 0000 	adcs.w	r0, r0, #0
   d602e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6032:	bd70      	pop	{r4, r5, r6, pc}
   d6034:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6038:	ea46 0101 	orr.w	r1, r6, r1
   d603c:	ea40 0002 	orr.w	r0, r0, r2
   d6040:	ea81 0103 	eor.w	r1, r1, r3
   d6044:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6048:	bfc2      	ittt	gt
   d604a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d604e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6052:	bd70      	popgt	{r4, r5, r6, pc}
   d6054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6058:	f04f 0e00 	mov.w	lr, #0
   d605c:	3c01      	subs	r4, #1
   d605e:	f300 80ab 	bgt.w	d61b8 <__aeabi_dmul+0x238>
   d6062:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6066:	bfde      	ittt	le
   d6068:	2000      	movle	r0, #0
   d606a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d606e:	bd70      	pople	{r4, r5, r6, pc}
   d6070:	f1c4 0400 	rsb	r4, r4, #0
   d6074:	3c20      	subs	r4, #32
   d6076:	da35      	bge.n	d60e4 <__aeabi_dmul+0x164>
   d6078:	340c      	adds	r4, #12
   d607a:	dc1b      	bgt.n	d60b4 <__aeabi_dmul+0x134>
   d607c:	f104 0414 	add.w	r4, r4, #20
   d6080:	f1c4 0520 	rsb	r5, r4, #32
   d6084:	fa00 f305 	lsl.w	r3, r0, r5
   d6088:	fa20 f004 	lsr.w	r0, r0, r4
   d608c:	fa01 f205 	lsl.w	r2, r1, r5
   d6090:	ea40 0002 	orr.w	r0, r0, r2
   d6094:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d609c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60a0:	fa21 f604 	lsr.w	r6, r1, r4
   d60a4:	eb42 0106 	adc.w	r1, r2, r6
   d60a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60ac:	bf08      	it	eq
   d60ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60b2:	bd70      	pop	{r4, r5, r6, pc}
   d60b4:	f1c4 040c 	rsb	r4, r4, #12
   d60b8:	f1c4 0520 	rsb	r5, r4, #32
   d60bc:	fa00 f304 	lsl.w	r3, r0, r4
   d60c0:	fa20 f005 	lsr.w	r0, r0, r5
   d60c4:	fa01 f204 	lsl.w	r2, r1, r4
   d60c8:	ea40 0002 	orr.w	r0, r0, r2
   d60cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60d4:	f141 0100 	adc.w	r1, r1, #0
   d60d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60dc:	bf08      	it	eq
   d60de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60e2:	bd70      	pop	{r4, r5, r6, pc}
   d60e4:	f1c4 0520 	rsb	r5, r4, #32
   d60e8:	fa00 f205 	lsl.w	r2, r0, r5
   d60ec:	ea4e 0e02 	orr.w	lr, lr, r2
   d60f0:	fa20 f304 	lsr.w	r3, r0, r4
   d60f4:	fa01 f205 	lsl.w	r2, r1, r5
   d60f8:	ea43 0302 	orr.w	r3, r3, r2
   d60fc:	fa21 f004 	lsr.w	r0, r1, r4
   d6100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6104:	fa21 f204 	lsr.w	r2, r1, r4
   d6108:	ea20 0002 	bic.w	r0, r0, r2
   d610c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6114:	bf08      	it	eq
   d6116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d611a:	bd70      	pop	{r4, r5, r6, pc}
   d611c:	f094 0f00 	teq	r4, #0
   d6120:	d10f      	bne.n	d6142 <__aeabi_dmul+0x1c2>
   d6122:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6126:	0040      	lsls	r0, r0, #1
   d6128:	eb41 0101 	adc.w	r1, r1, r1
   d612c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6130:	bf08      	it	eq
   d6132:	3c01      	subeq	r4, #1
   d6134:	d0f7      	beq.n	d6126 <__aeabi_dmul+0x1a6>
   d6136:	ea41 0106 	orr.w	r1, r1, r6
   d613a:	f095 0f00 	teq	r5, #0
   d613e:	bf18      	it	ne
   d6140:	4770      	bxne	lr
   d6142:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6146:	0052      	lsls	r2, r2, #1
   d6148:	eb43 0303 	adc.w	r3, r3, r3
   d614c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6150:	bf08      	it	eq
   d6152:	3d01      	subeq	r5, #1
   d6154:	d0f7      	beq.n	d6146 <__aeabi_dmul+0x1c6>
   d6156:	ea43 0306 	orr.w	r3, r3, r6
   d615a:	4770      	bx	lr
   d615c:	ea94 0f0c 	teq	r4, ip
   d6160:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6164:	bf18      	it	ne
   d6166:	ea95 0f0c 	teqne	r5, ip
   d616a:	d00c      	beq.n	d6186 <__aeabi_dmul+0x206>
   d616c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6170:	bf18      	it	ne
   d6172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6176:	d1d1      	bne.n	d611c <__aeabi_dmul+0x19c>
   d6178:	ea81 0103 	eor.w	r1, r1, r3
   d617c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6180:	f04f 0000 	mov.w	r0, #0
   d6184:	bd70      	pop	{r4, r5, r6, pc}
   d6186:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d618a:	bf06      	itte	eq
   d618c:	4610      	moveq	r0, r2
   d618e:	4619      	moveq	r1, r3
   d6190:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6194:	d019      	beq.n	d61ca <__aeabi_dmul+0x24a>
   d6196:	ea94 0f0c 	teq	r4, ip
   d619a:	d102      	bne.n	d61a2 <__aeabi_dmul+0x222>
   d619c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d61a0:	d113      	bne.n	d61ca <__aeabi_dmul+0x24a>
   d61a2:	ea95 0f0c 	teq	r5, ip
   d61a6:	d105      	bne.n	d61b4 <__aeabi_dmul+0x234>
   d61a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d61ac:	bf1c      	itt	ne
   d61ae:	4610      	movne	r0, r2
   d61b0:	4619      	movne	r1, r3
   d61b2:	d10a      	bne.n	d61ca <__aeabi_dmul+0x24a>
   d61b4:	ea81 0103 	eor.w	r1, r1, r3
   d61b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d61c4:	f04f 0000 	mov.w	r0, #0
   d61c8:	bd70      	pop	{r4, r5, r6, pc}
   d61ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d61d2:	bd70      	pop	{r4, r5, r6, pc}

000d61d4 <__aeabi_ddiv>:
   d61d4:	b570      	push	{r4, r5, r6, lr}
   d61d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61e2:	bf1d      	ittte	ne
   d61e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d61e8:	ea94 0f0c 	teqne	r4, ip
   d61ec:	ea95 0f0c 	teqne	r5, ip
   d61f0:	f000 f8a7 	bleq	d6342 <__aeabi_ddiv+0x16e>
   d61f4:	eba4 0405 	sub.w	r4, r4, r5
   d61f8:	ea81 0e03 	eor.w	lr, r1, r3
   d61fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6200:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6204:	f000 8088 	beq.w	d6318 <__aeabi_ddiv+0x144>
   d6208:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d620c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6210:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6214:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6218:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d621c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6220:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6224:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6228:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d622c:	429d      	cmp	r5, r3
   d622e:	bf08      	it	eq
   d6230:	4296      	cmpeq	r6, r2
   d6232:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6236:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d623a:	d202      	bcs.n	d6242 <__aeabi_ddiv+0x6e>
   d623c:	085b      	lsrs	r3, r3, #1
   d623e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6242:	1ab6      	subs	r6, r6, r2
   d6244:	eb65 0503 	sbc.w	r5, r5, r3
   d6248:	085b      	lsrs	r3, r3, #1
   d624a:	ea4f 0232 	mov.w	r2, r2, rrx
   d624e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6252:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6256:	ebb6 0e02 	subs.w	lr, r6, r2
   d625a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d625e:	bf22      	ittt	cs
   d6260:	1ab6      	subcs	r6, r6, r2
   d6262:	4675      	movcs	r5, lr
   d6264:	ea40 000c 	orrcs.w	r0, r0, ip
   d6268:	085b      	lsrs	r3, r3, #1
   d626a:	ea4f 0232 	mov.w	r2, r2, rrx
   d626e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6272:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6276:	bf22      	ittt	cs
   d6278:	1ab6      	subcs	r6, r6, r2
   d627a:	4675      	movcs	r5, lr
   d627c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6280:	085b      	lsrs	r3, r3, #1
   d6282:	ea4f 0232 	mov.w	r2, r2, rrx
   d6286:	ebb6 0e02 	subs.w	lr, r6, r2
   d628a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d628e:	bf22      	ittt	cs
   d6290:	1ab6      	subcs	r6, r6, r2
   d6292:	4675      	movcs	r5, lr
   d6294:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6298:	085b      	lsrs	r3, r3, #1
   d629a:	ea4f 0232 	mov.w	r2, r2, rrx
   d629e:	ebb6 0e02 	subs.w	lr, r6, r2
   d62a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62a6:	bf22      	ittt	cs
   d62a8:	1ab6      	subcs	r6, r6, r2
   d62aa:	4675      	movcs	r5, lr
   d62ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d62b0:	ea55 0e06 	orrs.w	lr, r5, r6
   d62b4:	d018      	beq.n	d62e8 <__aeabi_ddiv+0x114>
   d62b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d62ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d62be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d62c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d62c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d62ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d62ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d62d2:	d1c0      	bne.n	d6256 <__aeabi_ddiv+0x82>
   d62d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62d8:	d10b      	bne.n	d62f2 <__aeabi_ddiv+0x11e>
   d62da:	ea41 0100 	orr.w	r1, r1, r0
   d62de:	f04f 0000 	mov.w	r0, #0
   d62e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d62e6:	e7b6      	b.n	d6256 <__aeabi_ddiv+0x82>
   d62e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62ec:	bf04      	itt	eq
   d62ee:	4301      	orreq	r1, r0
   d62f0:	2000      	moveq	r0, #0
   d62f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d62f6:	bf88      	it	hi
   d62f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d62fc:	f63f aeaf 	bhi.w	d605e <__aeabi_dmul+0xde>
   d6300:	ebb5 0c03 	subs.w	ip, r5, r3
   d6304:	bf04      	itt	eq
   d6306:	ebb6 0c02 	subseq.w	ip, r6, r2
   d630a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d630e:	f150 0000 	adcs.w	r0, r0, #0
   d6312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6316:	bd70      	pop	{r4, r5, r6, pc}
   d6318:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d631c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6320:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6324:	bfc2      	ittt	gt
   d6326:	ebd4 050c 	rsbsgt	r5, r4, ip
   d632a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d632e:	bd70      	popgt	{r4, r5, r6, pc}
   d6330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6334:	f04f 0e00 	mov.w	lr, #0
   d6338:	3c01      	subs	r4, #1
   d633a:	e690      	b.n	d605e <__aeabi_dmul+0xde>
   d633c:	ea45 0e06 	orr.w	lr, r5, r6
   d6340:	e68d      	b.n	d605e <__aeabi_dmul+0xde>
   d6342:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6346:	ea94 0f0c 	teq	r4, ip
   d634a:	bf08      	it	eq
   d634c:	ea95 0f0c 	teqeq	r5, ip
   d6350:	f43f af3b 	beq.w	d61ca <__aeabi_dmul+0x24a>
   d6354:	ea94 0f0c 	teq	r4, ip
   d6358:	d10a      	bne.n	d6370 <__aeabi_ddiv+0x19c>
   d635a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d635e:	f47f af34 	bne.w	d61ca <__aeabi_dmul+0x24a>
   d6362:	ea95 0f0c 	teq	r5, ip
   d6366:	f47f af25 	bne.w	d61b4 <__aeabi_dmul+0x234>
   d636a:	4610      	mov	r0, r2
   d636c:	4619      	mov	r1, r3
   d636e:	e72c      	b.n	d61ca <__aeabi_dmul+0x24a>
   d6370:	ea95 0f0c 	teq	r5, ip
   d6374:	d106      	bne.n	d6384 <__aeabi_ddiv+0x1b0>
   d6376:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d637a:	f43f aefd 	beq.w	d6178 <__aeabi_dmul+0x1f8>
   d637e:	4610      	mov	r0, r2
   d6380:	4619      	mov	r1, r3
   d6382:	e722      	b.n	d61ca <__aeabi_dmul+0x24a>
   d6384:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6388:	bf18      	it	ne
   d638a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d638e:	f47f aec5 	bne.w	d611c <__aeabi_dmul+0x19c>
   d6392:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6396:	f47f af0d 	bne.w	d61b4 <__aeabi_dmul+0x234>
   d639a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d639e:	f47f aeeb 	bne.w	d6178 <__aeabi_dmul+0x1f8>
   d63a2:	e712      	b.n	d61ca <__aeabi_dmul+0x24a>

000d63a4 <__gedf2>:
   d63a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d63a8:	e006      	b.n	d63b8 <__cmpdf2+0x4>
   d63aa:	bf00      	nop

000d63ac <__ledf2>:
   d63ac:	f04f 0c01 	mov.w	ip, #1
   d63b0:	e002      	b.n	d63b8 <__cmpdf2+0x4>
   d63b2:	bf00      	nop

000d63b4 <__cmpdf2>:
   d63b4:	f04f 0c01 	mov.w	ip, #1
   d63b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d63bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d63c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63c8:	bf18      	it	ne
   d63ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d63ce:	d01b      	beq.n	d6408 <__cmpdf2+0x54>
   d63d0:	b001      	add	sp, #4
   d63d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d63d6:	bf0c      	ite	eq
   d63d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d63dc:	ea91 0f03 	teqne	r1, r3
   d63e0:	bf02      	ittt	eq
   d63e2:	ea90 0f02 	teqeq	r0, r2
   d63e6:	2000      	moveq	r0, #0
   d63e8:	4770      	bxeq	lr
   d63ea:	f110 0f00 	cmn.w	r0, #0
   d63ee:	ea91 0f03 	teq	r1, r3
   d63f2:	bf58      	it	pl
   d63f4:	4299      	cmppl	r1, r3
   d63f6:	bf08      	it	eq
   d63f8:	4290      	cmpeq	r0, r2
   d63fa:	bf2c      	ite	cs
   d63fc:	17d8      	asrcs	r0, r3, #31
   d63fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6402:	f040 0001 	orr.w	r0, r0, #1
   d6406:	4770      	bx	lr
   d6408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d640c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6410:	d102      	bne.n	d6418 <__cmpdf2+0x64>
   d6412:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6416:	d107      	bne.n	d6428 <__cmpdf2+0x74>
   d6418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d641c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6420:	d1d6      	bne.n	d63d0 <__cmpdf2+0x1c>
   d6422:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6426:	d0d3      	beq.n	d63d0 <__cmpdf2+0x1c>
   d6428:	f85d 0b04 	ldr.w	r0, [sp], #4
   d642c:	4770      	bx	lr
   d642e:	bf00      	nop

000d6430 <__aeabi_cdrcmple>:
   d6430:	4684      	mov	ip, r0
   d6432:	4610      	mov	r0, r2
   d6434:	4662      	mov	r2, ip
   d6436:	468c      	mov	ip, r1
   d6438:	4619      	mov	r1, r3
   d643a:	4663      	mov	r3, ip
   d643c:	e000      	b.n	d6440 <__aeabi_cdcmpeq>
   d643e:	bf00      	nop

000d6440 <__aeabi_cdcmpeq>:
   d6440:	b501      	push	{r0, lr}
   d6442:	f7ff ffb7 	bl	d63b4 <__cmpdf2>
   d6446:	2800      	cmp	r0, #0
   d6448:	bf48      	it	mi
   d644a:	f110 0f00 	cmnmi.w	r0, #0
   d644e:	bd01      	pop	{r0, pc}

000d6450 <__aeabi_dcmpeq>:
   d6450:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6454:	f7ff fff4 	bl	d6440 <__aeabi_cdcmpeq>
   d6458:	bf0c      	ite	eq
   d645a:	2001      	moveq	r0, #1
   d645c:	2000      	movne	r0, #0
   d645e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6462:	bf00      	nop

000d6464 <__aeabi_dcmplt>:
   d6464:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6468:	f7ff ffea 	bl	d6440 <__aeabi_cdcmpeq>
   d646c:	bf34      	ite	cc
   d646e:	2001      	movcc	r0, #1
   d6470:	2000      	movcs	r0, #0
   d6472:	f85d fb08 	ldr.w	pc, [sp], #8
   d6476:	bf00      	nop

000d6478 <__aeabi_dcmple>:
   d6478:	f84d ed08 	str.w	lr, [sp, #-8]!
   d647c:	f7ff ffe0 	bl	d6440 <__aeabi_cdcmpeq>
   d6480:	bf94      	ite	ls
   d6482:	2001      	movls	r0, #1
   d6484:	2000      	movhi	r0, #0
   d6486:	f85d fb08 	ldr.w	pc, [sp], #8
   d648a:	bf00      	nop

000d648c <__aeabi_dcmpge>:
   d648c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6490:	f7ff ffce 	bl	d6430 <__aeabi_cdrcmple>
   d6494:	bf94      	ite	ls
   d6496:	2001      	movls	r0, #1
   d6498:	2000      	movhi	r0, #0
   d649a:	f85d fb08 	ldr.w	pc, [sp], #8
   d649e:	bf00      	nop

000d64a0 <__aeabi_dcmpgt>:
   d64a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d64a4:	f7ff ffc4 	bl	d6430 <__aeabi_cdrcmple>
   d64a8:	bf34      	ite	cc
   d64aa:	2001      	movcc	r0, #1
   d64ac:	2000      	movcs	r0, #0
   d64ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d64b2:	bf00      	nop

000d64b4 <__aeabi_dcmpun>:
   d64b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64bc:	d102      	bne.n	d64c4 <__aeabi_dcmpun+0x10>
   d64be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64c2:	d10a      	bne.n	d64da <__aeabi_dcmpun+0x26>
   d64c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64cc:	d102      	bne.n	d64d4 <__aeabi_dcmpun+0x20>
   d64ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64d2:	d102      	bne.n	d64da <__aeabi_dcmpun+0x26>
   d64d4:	f04f 0000 	mov.w	r0, #0
   d64d8:	4770      	bx	lr
   d64da:	f04f 0001 	mov.w	r0, #1
   d64de:	4770      	bx	lr

000d64e0 <__aeabi_d2iz>:
   d64e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d64e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d64e8:	d215      	bcs.n	d6516 <__aeabi_d2iz+0x36>
   d64ea:	d511      	bpl.n	d6510 <__aeabi_d2iz+0x30>
   d64ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d64f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d64f4:	d912      	bls.n	d651c <__aeabi_d2iz+0x3c>
   d64f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d64fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6502:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6506:	fa23 f002 	lsr.w	r0, r3, r2
   d650a:	bf18      	it	ne
   d650c:	4240      	negne	r0, r0
   d650e:	4770      	bx	lr
   d6510:	f04f 0000 	mov.w	r0, #0
   d6514:	4770      	bx	lr
   d6516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d651a:	d105      	bne.n	d6528 <__aeabi_d2iz+0x48>
   d651c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6520:	bf08      	it	eq
   d6522:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6526:	4770      	bx	lr
   d6528:	f04f 0000 	mov.w	r0, #0
   d652c:	4770      	bx	lr
   d652e:	bf00      	nop

000d6530 <__aeabi_d2uiz>:
   d6530:	004a      	lsls	r2, r1, #1
   d6532:	d211      	bcs.n	d6558 <__aeabi_d2uiz+0x28>
   d6534:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6538:	d211      	bcs.n	d655e <__aeabi_d2uiz+0x2e>
   d653a:	d50d      	bpl.n	d6558 <__aeabi_d2uiz+0x28>
   d653c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6540:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6544:	d40e      	bmi.n	d6564 <__aeabi_d2uiz+0x34>
   d6546:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d654a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d654e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6552:	fa23 f002 	lsr.w	r0, r3, r2
   d6556:	4770      	bx	lr
   d6558:	f04f 0000 	mov.w	r0, #0
   d655c:	4770      	bx	lr
   d655e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6562:	d102      	bne.n	d656a <__aeabi_d2uiz+0x3a>
   d6564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6568:	4770      	bx	lr
   d656a:	f04f 0000 	mov.w	r0, #0
   d656e:	4770      	bx	lr

000d6570 <__aeabi_d2f>:
   d6570:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6574:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6578:	bf24      	itt	cs
   d657a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d657e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6582:	d90d      	bls.n	d65a0 <__aeabi_d2f+0x30>
   d6584:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6588:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d658c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6590:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6594:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6598:	bf08      	it	eq
   d659a:	f020 0001 	biceq.w	r0, r0, #1
   d659e:	4770      	bx	lr
   d65a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d65a4:	d121      	bne.n	d65ea <__aeabi_d2f+0x7a>
   d65a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d65aa:	bfbc      	itt	lt
   d65ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d65b0:	4770      	bxlt	lr
   d65b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d65ba:	f1c2 0218 	rsb	r2, r2, #24
   d65be:	f1c2 0c20 	rsb	ip, r2, #32
   d65c2:	fa10 f30c 	lsls.w	r3, r0, ip
   d65c6:	fa20 f002 	lsr.w	r0, r0, r2
   d65ca:	bf18      	it	ne
   d65cc:	f040 0001 	orrne.w	r0, r0, #1
   d65d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d65d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d65dc:	ea40 000c 	orr.w	r0, r0, ip
   d65e0:	fa23 f302 	lsr.w	r3, r3, r2
   d65e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d65e8:	e7cc      	b.n	d6584 <__aeabi_d2f+0x14>
   d65ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d65ee:	d107      	bne.n	d6600 <__aeabi_d2f+0x90>
   d65f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d65f4:	bf1e      	ittt	ne
   d65f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d65fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d65fe:	4770      	bxne	lr
   d6600:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6604:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6608:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d660c:	4770      	bx	lr
   d660e:	bf00      	nop

000d6610 <__cxa_atexit>:
   d6610:	b510      	push	{r4, lr}
   d6612:	4c05      	ldr	r4, [pc, #20]	; (d6628 <__cxa_atexit+0x18>)
   d6614:	4613      	mov	r3, r2
   d6616:	b12c      	cbz	r4, d6624 <__cxa_atexit+0x14>
   d6618:	460a      	mov	r2, r1
   d661a:	4601      	mov	r1, r0
   d661c:	2002      	movs	r0, #2
   d661e:	f3af 8000 	nop.w
   d6622:	bd10      	pop	{r4, pc}
   d6624:	4620      	mov	r0, r4
   d6626:	bd10      	pop	{r4, pc}
   d6628:	00000000 	.word	0x00000000

000d662c <memcpy>:
   d662c:	b510      	push	{r4, lr}
   d662e:	1e43      	subs	r3, r0, #1
   d6630:	440a      	add	r2, r1
   d6632:	4291      	cmp	r1, r2
   d6634:	d004      	beq.n	d6640 <memcpy+0x14>
   d6636:	f811 4b01 	ldrb.w	r4, [r1], #1
   d663a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d663e:	e7f8      	b.n	d6632 <memcpy+0x6>
   d6640:	bd10      	pop	{r4, pc}

000d6642 <memset>:
   d6642:	4402      	add	r2, r0
   d6644:	4603      	mov	r3, r0
   d6646:	4293      	cmp	r3, r2
   d6648:	d002      	beq.n	d6650 <memset+0xe>
   d664a:	f803 1b01 	strb.w	r1, [r3], #1
   d664e:	e7fa      	b.n	d6646 <memset+0x4>
   d6650:	4770      	bx	lr
	...

000d6654 <srand>:
   d6654:	b538      	push	{r3, r4, r5, lr}
   d6656:	4b12      	ldr	r3, [pc, #72]	; (d66a0 <srand+0x4c>)
   d6658:	681c      	ldr	r4, [r3, #0]
   d665a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d665c:	4605      	mov	r5, r0
   d665e:	b9d3      	cbnz	r3, d6696 <srand+0x42>
   d6660:	2018      	movs	r0, #24
   d6662:	f7fe fa87 	bl	d4b74 <malloc>
   d6666:	f243 330e 	movw	r3, #13070	; 0x330e
   d666a:	63a0      	str	r0, [r4, #56]	; 0x38
   d666c:	8003      	strh	r3, [r0, #0]
   d666e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6672:	8043      	strh	r3, [r0, #2]
   d6674:	f241 2334 	movw	r3, #4660	; 0x1234
   d6678:	8083      	strh	r3, [r0, #4]
   d667a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d667e:	80c3      	strh	r3, [r0, #6]
   d6680:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6684:	8103      	strh	r3, [r0, #8]
   d6686:	2305      	movs	r3, #5
   d6688:	8143      	strh	r3, [r0, #10]
   d668a:	230b      	movs	r3, #11
   d668c:	8183      	strh	r3, [r0, #12]
   d668e:	2201      	movs	r2, #1
   d6690:	2300      	movs	r3, #0
   d6692:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6698:	2200      	movs	r2, #0
   d669a:	611d      	str	r5, [r3, #16]
   d669c:	615a      	str	r2, [r3, #20]
   d669e:	bd38      	pop	{r3, r4, r5, pc}
   d66a0:	2003e3b4 	.word	0x2003e3b4

000d66a4 <strlen>:
   d66a4:	4603      	mov	r3, r0
   d66a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66aa:	2a00      	cmp	r2, #0
   d66ac:	d1fb      	bne.n	d66a6 <strlen+0x2>
   d66ae:	1a18      	subs	r0, r3, r0
   d66b0:	3801      	subs	r0, #1
   d66b2:	4770      	bx	lr

000d66b4 <dynalib_user>:
   d66b4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d66c4:	0000 0000 7055 6562 7461 4c20 6261 2073     ....Upbeat Labs 
   d66d4:	7244 202e 6157 7474 6f73 206e 6e45 7265     Dr. Wattson Ener
   d66e4:	7967 4420 7461 2061 7845 6d61 6c70 2065     gy Data Example 
   d66f4:	6b53 7465 6863 2a00 2a2a 2a2a 2a2a 2a2a     Sketch.*********
   d6704:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   d6714:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   d6724:	2a2a 2a2a 2a2a 2a2a 002a 7543 7272 6e65     *********.Curren
   d6734:	2074 203d 4c00 6e69 2065 7246 7165 6575     t = .Line Freque
   d6744:	636e 2079 203d 4100 616e 6f6c 2067 6e49     ncy = .Analog In
   d6754:	7570 2074 6f56 746c 6761 2065 203d 5000     put Voltage = .P
   d6764:	776f 7265 4620 6361 6f74 2072 203d 4100     ower Factor = .A
   d6774:	7463 7669 2065 6f50 6577 2072 203d 5200     ctive Power = .R
   d6784:	6165 7463 7669 2065 6f50 6577 2072 203d     eactive Power = 
   d6794:	4100 7070 7261 6e65 2074 6f50 6577 2072     .Apparent Power 
   d67a4:	203d 1b00 0063 7245 6f72 2072 6572 7574     = ..c.Error retu
   d67b4:	6e72 6465 2021 6300 6568 6b63 7573 546d     rned! .checksumT
   d67c4:	746f 6c61 3a3a 0020 7561 5763 6972 6574     otal:: .aucWrite
   d67d4:	6144 6174 7542 5b66 6925 3a5d 203a 0000     DataBuf[%i]:: ..

000d67e4 <_ZTVN5spark13EthernetClassE>:
	...
   d67ec:	4c2d 000d 4c23 000d 4c19 000d 4c0f 000d     -L..#L...L...L..
   d67fc:	4c03 000d 4bf7 000d 4beb 000d 4be3 000d     .L...K...K...K..
   d680c:	4bd9 000d 4bcf 000d 501d 000d               .K...K...P..

000d6818 <_ZTV7TwoWire>:
	...
   d6820:	4c4d 000d 4c97 000d 4c6f 000d 4c4f 000d     ML...L..oL..OL..
   d6830:	4c77 000d 4c7f 000d 4c87 000d 4c8f 000d     wL...L...L...L..

000d6840 <_ZTV9IPAddress>:
	...
   d6848:	4d6d 000d 4d5d 000d 4d5f 000d 6162 6475     mM..]M.._M..baud
   d6858:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6868:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6878:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6888:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6898:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d68a8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d68b8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d68c8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d68d8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d68e8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d68f8:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d6908:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d6918:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6928:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d6934 <_ZTVN5spark9MeshClassE>:
	...
   d693c:	4eaf 000d 4ea5 000d 4e9b 000d 4e91 000d     .N...N...N...N..
   d694c:	4e85 000d 4e79 000d 4e6d 000d 4e65 000d     .N..yN..mN..eN..
   d695c:	4e5b 000d 4e51 000d 501d 000d               [N..QN...P..

000d6968 <_ZTVN5spark12NetworkClassE>:
	...
   d6970:	4fb5 000d 4fbf 000d 4fc9 000d 4fd3 000d     .O...O...O...O..
   d6980:	4fdd 000d 4fe9 000d 4ff5 000d 5001 000d     .O...O...O...P..
   d6990:	5009 000d 5013 000d 501d 000d 616e 006e     .P...P...P..nan.
   d69a0:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d69ac <_ZTV8SPIClass>:
	...
   d69b4:	5481 000d 5483 000d 005a 2b25 3330 3a64     .T...T..Z.%+03d:
   d69c4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d69d4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d69e4:	0000 0000                                   ....

000d69e8 <_ZTV11USARTSerial>:
	...
   d69f0:	54ed 000d 553d 000d 554b 000d 50fd 000d     .T..=U..KU...P..
   d6a00:	5501 000d 5523 000d 550f 000d 5537 000d     .U..#U...U..7U..
   d6a10:	54ef 000d 54f3 000d                         .T...T..

000d6a18 <_ZTV9USBSerial>:
	...
   d6a20:	55f5 000d 5645 000d 5653 000d 50fd 000d     .U..EV..SV...P..
   d6a30:	5631 000d 55f7 000d 560d 000d 563f 000d     1V...U...V..?V..
   d6a40:	5623 000d 55f1 000d                         #V...U..

000d6a48 <_ZTVN5spark9WiFiClassE>:
	...
   d6a50:	575f 000d 5755 000d 574b 000d 5701 000d     _W..UW..KW...W..
   d6a60:	573f 000d 5733 000d 5727 000d 571f 000d     ?W..3W..'W...W..
   d6a70:	5715 000d 570b 000d 501d 000d               .W...W...P..

000d6a7c <__sf_fake_stdin>:
	...

000d6a9c <__sf_fake_stdout>:
	...

000d6abc <__sf_fake_stderr>:
	...
   d6adc:	0043                                        C.

000d6ade <link_const_variable_data_end>:
	...

000d6ae0 <link_constructors_location>:
   d6ae0:	000d42ed 	.word	0x000d42ed
   d6ae4:	000d47b9 	.word	0x000d47b9
   d6ae8:	000d4bad 	.word	0x000d4bad
   d6aec:	000d4c39 	.word	0x000d4c39
   d6af0:	000d4e41 	.word	0x000d4e41
   d6af4:	000d4f65 	.word	0x000d4f65
   d6af8:	000d50e9 	.word	0x000d50e9
   d6afc:	000d5465 	.word	0x000d5465
   d6b00:	000d54c1 	.word	0x000d54c1
   d6b04:	000d54d9 	.word	0x000d54d9
   d6b08:	000d5769 	.word	0x000d5769
   d6b0c:	000d592d 	.word	0x000d592d
   d6b10:	000d5981 	.word	0x000d5981
   d6b14:	000d5a45 	.word	0x000d5a45
   d6b18:	000d5ac9 	.word	0x000d5ac9
   d6b1c:	000d5b4d 	.word	0x000d5b4d
