
/Users/nicholas/Desktop/argon-test/argon-test/target/1.5.2/argon/argon-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ac0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6ae0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e350  000d6ae4  0001e350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000430  2003e3c0  2003e3c0  0002e3c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6b54  000d6b54  00026b54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6b7c  000d6b7c  00026b7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dc592  00000000  00000000  00026b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011165  00000000  00000000  00103112  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e3f0  00000000  00000000  00114277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002420  00000000  00000000  00132667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004530  00000000  00000000  00134a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035d9d  00000000  00000000  00138fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000290e6  00000000  00000000  0016ed54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109172  00000000  00000000  00197e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb14  00000000  00000000  002a0fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 faf7 	bl	d6624 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fafc 	bl	d663a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e350 	.word	0x2003e350
   d404c:	000d6ae4 	.word	0x000d6ae4
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e3c0 	.word	0x2003e3c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fb9d 	bl	d579c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6adc 	.word	0x000d6adc
   d4084:	000d6aa0 	.word	0x000d6aa0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba7c 	b.w	d4584 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb1d 	bl	d46cc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb43 	b.w	d5720 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bd49 	b.w	d4b30 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd47 	b.w	d4b30 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN20UpbeatLabs_MCP39F521C1Ev>:

// Constructor

UpbeatLabs_MCP39F521::UpbeatLabs_MCP39F521(void) {

}
   d40b2:	4770      	bx	lr
   d40b4:	0000      	movs	r0, r0
	...

000d40b8 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData>:
// The data returned by the MCP39F521 is all integer. If you want the results in more human-readable format,
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fData->voltageRMS = data->voltageRMS/10.0f;
   d40bc:	888b      	ldrh	r3, [r1, #4]
   d40be:	ee07 3a90 	vmov	s15, r3
   d40c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d40ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
// The data returned by the MCP39F521 is all integer. If you want the results in more human-readable format,
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
   d40ce:	4614      	mov	r4, r2
   d40d0:	460d      	mov	r5, r1
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;

  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d40d2:	260e      	movs	r6, #14
  
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d40d4:	f04f 0a01 	mov.w	sl, #1

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d40d8:	eddf 6a3f 	vldr	s13, [pc, #252]	; d41d8 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x120>
// use this method to convert from UpbeatLabs_MCP39F521_Data to UpbeatLabs_MCP39F521_FormattedData.

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
   d40dc:	ed82 7a01 	vstr	s14, [r2, #4]
  fData->currentRMS = data->currentRMS/10000.0f;
   d40e0:	edd1 7a03 	vldr	s15, [r1, #12]
   d40e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d40e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d40ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; d41dc <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x124>

void UpbeatLabs_MCP39F521::convertRawData(UpbeatLabs_MCP39F521_Data *data,
                                          UpbeatLabs_MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d40f0:	ed82 7a05 	vstr	s14, [r2, #20]
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d40f4:	88cb      	ldrh	r3, [r1, #6]
   d40f6:	ee07 3a90 	vmov	s15, r3
   d40fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4102:	ed82 7a02 	vstr	s14, [r2, #8]
  // Analog Input Voltage represents ADC output for 10 bit ADC
  // By trial, it's been found that it has a ref voltage of 3.3v
  // So the register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
   d4106:	890b      	ldrh	r3, [r1, #8]
   d4108:	ed9f 7a35 	vldr	s14, [pc, #212]	; d41e0 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x128>
   d410c:	ee07 3a90 	vmov	s15, r3
   d4110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4114:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4118:	ee16 0a90 	vmov	r0, s13
   d411c:	f001 fed8 	bl	d5ed0 <__aeabi_f2d>
   d4120:	a32b      	add	r3, pc, #172	; (adr r3, d41d0 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x118>)
   d4122:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4126:	f001 ff27 	bl	d5f78 <__aeabi_dmul>
   d412a:	f002 fa1d 	bl	d6568 <__aeabi_d2f>
   d412e:	60e0      	str	r0, [r4, #12]

  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d4130:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
   d4134:	ea4f 70db 	mov.w	r0, fp, lsr #31
   d4138:	f001 feb8 	bl	d5eac <__aeabi_i2d>
   d413c:	f002 fa14 	bl	d6568 <__aeabi_d2f>
   d4140:	f080 4700 	eor.w	r7, r0, #2147483648	; 0x80000000
  
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d4144:	fa0a f006 	lsl.w	r0, sl, r6
   d4148:	ea00 000b 	and.w	r0, r0, fp
   d414c:	4130      	asrs	r0, r6
   d414e:	f001 fead 	bl	d5eac <__aeabi_i2d>
   d4152:	4680      	mov	r8, r0
   d4154:	f1c6 000f 	rsb	r0, r6, #15
   d4158:	fa0a f000 	lsl.w	r0, sl, r0
   d415c:	4689      	mov	r9, r1
   d415e:	f001 fea5 	bl	d5eac <__aeabi_i2d>
   d4162:	4602      	mov	r2, r0
   d4164:	460b      	mov	r3, r1
   d4166:	4640      	mov	r0, r8
   d4168:	4649      	mov	r1, r9
   d416a:	f002 f82f 	bl	d61cc <__aeabi_ddiv>
   d416e:	4680      	mov	r8, r0
   d4170:	4638      	mov	r0, r7
   d4172:	4689      	mov	r9, r1
   d4174:	f001 feac 	bl	d5ed0 <__aeabi_f2d>
   d4178:	4602      	mov	r2, r0
   d417a:	460b      	mov	r3, r1
   d417c:	4640      	mov	r0, r8
   d417e:	4649      	mov	r1, r9
   d4180:	f001 fd48 	bl	d5c14 <__adddf3>
   d4184:	f002 f9f0 	bl	d6568 <__aeabi_d2f>
   d4188:	3e01      	subs	r6, #1
  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  
  for(ch=14; ch > 3; ch--)
   d418a:	2e03      	cmp	r6, #3
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d418c:	4607      	mov	r7, r0
  float f;
  unsigned char ch;
  
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  
  for(ch=14; ch > 3; ch--)
   d418e:	d1d9      	bne.n	d4144 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x8c>
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));

  fData->powerFactor = f;
   d4190:	6120      	str	r0, [r4, #16]

  fData->activePower = data->activePower/100.0f;
   d4192:	edd5 7a04 	vldr	s15, [r5, #16]
   d4196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   d419a:	eddf 7a12 	vldr	s15, [pc, #72]	; d41e4 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData+0x12c>
   d419e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41a2:	edc4 6a06 	vstr	s13, [r4, #24]
  fData->reactivePower = data->reactivePower/100.0f;
   d41a6:	ed95 7a05 	vldr	s14, [r5, #20]
   d41aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d41ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41b2:	edc4 6a07 	vstr	s13, [r4, #28]
  fData->apparentPower = data->apparentPower/100.0f;
   d41b6:	ed95 7a06 	vldr	s14, [r5, #24]
   d41ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d41be:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41c2:	edc4 6a08 	vstr	s13, [r4, #32]
   d41c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d41ca:	bf00      	nop
   d41cc:	f3af 8000 	nop.w
   d41d0:	66666666 	.word	0x66666666
   d41d4:	400a6666 	.word	0x400a6666
   d41d8:	461c4000 	.word	0x461c4000
   d41dc:	447a0000 	.word	0x447a0000
   d41e0:	447fc000 	.word	0x447fc000
   d41e4:	42c80000 	.word	0x42c80000

000d41e8 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi>:
// this method should return SUCCESS

int UpbeatLabs_MCP39F521::checkHeaderAndChecksum( int numBytesToRead,
                                                  uint8_t *byteArray,
                                                  int byteArraySize)
{
   d41e8:	b570      	push	{r4, r5, r6, lr}
  int i;
  uint16_t checksumTotal = 0;
  
  uint8_t header = byteArray[0];
  uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
   d41ea:	1853      	adds	r3, r2, r1
                                                  int byteArraySize)
{
  int i;
  uint16_t checksumTotal = 0;
  
  uint8_t header = byteArray[0];
   d41ec:	7815      	ldrb	r5, [r2, #0]
  uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
   d41ee:	7898      	ldrb	r0, [r3, #2]
   d41f0:	4614      	mov	r4, r2
int UpbeatLabs_MCP39F521::checkHeaderAndChecksum( int numBytesToRead,
                                                  uint8_t *byteArray,
                                                  int byteArraySize)
{
  int i;
  uint16_t checksumTotal = 0;
   d41f2:	2300      	movs	r3, #0
  
  uint8_t header = byteArray[0];
  uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
  
  for (i = 0; i < numBytesToRead + 3 - 1; i++) {
   d41f4:	3101      	adds	r1, #1
   d41f6:	1aa6      	subs	r6, r4, r2
   d41f8:	42b1      	cmp	r1, r6
   d41fa:	db04      	blt.n	d4206 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi+0x1e>
    checksumTotal += byteArray[i];
   d41fc:	f814 6b01 	ldrb.w	r6, [r4], #1
   d4200:	4433      	add	r3, r6
   d4202:	b29b      	uxth	r3, r3
  
  uint8_t header = byteArray[0];
  uint8_t dataLen = byteArray[1];
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
  
  for (i = 0; i < numBytesToRead + 3 - 1; i++) {
   d4204:	e7f7      	b.n	d41f6 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi+0xe>
// If all is good, this will return SUCCESS

int UpbeatLabs_MCP39F521::checkHeader( int header)
{
  int error = SUCCESS;
  if (header != RESPONSE_ACK) {
   d4206:	2d06      	cmp	r5, #6
  uint8_t checksum = byteArray[numBytesToRead + 3 - 1];
  
  for (i = 0; i < numBytesToRead + 3 - 1; i++) {
    checksumTotal += byteArray[i];
  }
  uint8_t calculatedChecksum = checksumTotal % 256;
   d4208:	b2db      	uxtb	r3, r3
// If all is good, this will return SUCCESS

int UpbeatLabs_MCP39F521::checkHeader( int header)
{
  int error = SUCCESS;
  if (header != RESPONSE_ACK) {
   d420a:	d004      	beq.n	d4216 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi+0x2e>
    error = ERROR_INCORRECT_HEADER;
    if (header == RESPONSE_CSFAIL) {
      error = ERROR_CHECKSUM_FAIL;
   d420c:	2d51      	cmp	r5, #81	; 0x51
   d420e:	bf14      	ite	ne
   d4210:	2201      	movne	r2, #1
   d4212:	2202      	moveq	r2, #2
   d4214:	e000      	b.n	d4218 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi+0x30>
// Convenience method to check the header of the response.
// If all is good, this will return SUCCESS

int UpbeatLabs_MCP39F521::checkHeader( int header)
{
  int error = SUCCESS;
   d4216:	2200      	movs	r2, #0
  if (calculatedChecksum != checksum) {
    error = ERROR_CHECKSUM_MISMATCH;
  }
  
  return error;
}
   d4218:	4298      	cmp	r0, r3
   d421a:	bf0c      	ite	eq
   d421c:	4610      	moveq	r0, r2
   d421e:	2005      	movne	r0, #5
   d4220:	bd70      	pop	{r4, r5, r6, pc}

000d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>:
// Read the contents of the registers starting with the starting address, up to the number of bytes specified. 

int UpbeatLabs_MCP39F521::registerReadNBytes(int addressHigh, int addressLow,
                                             int numBytesToRead, uint8_t *byteArray,
                                             int byteArraySize)
{
   d4222:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4226:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d422a:	9f0a      	ldr	r7, [sp, #40]	; 0x28

  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  
  if (byteArraySize < numBytesToRead + 3) {
   d422c:	f103 0902 	add.w	r9, r3, #2
   d4230:	45c1      	cmp	r9, r8
// Read the contents of the registers starting with the starting address, up to the number of bytes specified. 

int UpbeatLabs_MCP39F521::registerReadNBytes(int addressHigh, int addressLow,
                                             int numBytesToRead, uint8_t *byteArray,
                                             int byteArraySize)
{
   d4232:	4606      	mov	r6, r0
   d4234:	461c      	mov	r4, r3

  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  
  if (byteArraySize < numBytesToRead + 3) {
   d4236:	da5c      	bge.n	d42f2 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xd0>
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
  }
    
  aucWriteDataBuf[0] = 0xa5; // Header
   d4238:	23a5      	movs	r3, #165	; 0xa5
   d423a:	f88d 3000 	strb.w	r3, [sp]
  aucWriteDataBuf[1] = 0x08; // Num bytes
   d423e:	2308      	movs	r3, #8
   d4240:	f88d 3001 	strb.w	r3, [sp, #1]
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
   d4244:	2341      	movs	r3, #65	; 0x41
   d4246:	f88d 3002 	strb.w	r3, [sp, #2]
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
   d424a:	234e      	movs	r3, #78	; 0x4e
   d424c:	f88d 3005 	strb.w	r3, [sp, #5]
  aucWriteDataBuf[6] = numBytesToRead;
   d4250:	b2e5      	uxtb	r5, r4
  aucWriteDataBuf[7] = 0; // Checksum - computed below
   d4252:	2300      	movs	r3, #0
    
  aucWriteDataBuf[0] = 0xa5; // Header
  aucWriteDataBuf[1] = 0x08; // Num bytes
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
   d4254:	f88d 2004 	strb.w	r2, [sp, #4]
  }
    
  aucWriteDataBuf[0] = 0xa5; // Header
  aucWriteDataBuf[1] = 0x08; // Num bytes
  aucWriteDataBuf[2] = COMMAND_SET_ADDRESS_POINTER; // Command - set address pointer
  aucWriteDataBuf[3] = addressHigh;
   d4258:	f88d 1003 	strb.w	r1, [sp, #3]
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
   d425c:	f88d 5006 	strb.w	r5, [sp, #6]
  aucWriteDataBuf[7] = 0; // Checksum - computed below
   d4260:	f88d 3007 	strb.w	r3, [sp, #7]
  for(i=0; i<7;i++) {
   d4264:	461a      	mov	r2, r3
    checksumTotal += aucWriteDataBuf[i];
   d4266:	f81d 1002 	ldrb.w	r1, [sp, r2]
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
  aucWriteDataBuf[7] = 0; // Checksum - computed below
  for(i=0; i<7;i++) {
   d426a:	3201      	adds	r2, #1
   d426c:	2a07      	cmp	r2, #7
    checksumTotal += aucWriteDataBuf[i];
   d426e:	440b      	add	r3, r1
  aucWriteDataBuf[3] = addressHigh;
  aucWriteDataBuf[4] = addressLow;
  aucWriteDataBuf[5] = COMMAND_REGISTER_READ_N_BYTES; // Command - read register, N bytes
  aucWriteDataBuf[6] = numBytesToRead;
  aucWriteDataBuf[7] = 0; // Checksum - computed below
  for(i=0; i<7;i++) {
   d4270:	d1f9      	bne.n	d4266 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x44>
    checksumTotal += aucWriteDataBuf[i];
  }
  aucWriteDataBuf[7] = checksumTotal % 256;
   d4272:	f88d 3007 	strb.w	r3, [sp, #7]

  Wire.beginTransmission(i2c_addr);
   d4276:	f001 fb37 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d427a:	7831      	ldrb	r1, [r6, #0]
   d427c:	f000 fd41 	bl	d4d02 <_ZN7TwoWire17beginTransmissionEh>
  for(i=0; i< 8; i++) {
   d4280:	f04f 0a00 	mov.w	sl, #0
    Wire.write(aucWriteDataBuf[i]);
   d4284:	f001 fb30 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d4288:	6803      	ldr	r3, [r0, #0]
   d428a:	f81d 100a 	ldrb.w	r1, [sp, sl]
   d428e:	689b      	ldr	r3, [r3, #8]
    checksumTotal += aucWriteDataBuf[i];
  }
  aucWriteDataBuf[7] = checksumTotal % 256;

  Wire.beginTransmission(i2c_addr);
  for(i=0; i< 8; i++) {
   d4290:	f10a 0a01 	add.w	sl, sl, #1
    Wire.write(aucWriteDataBuf[i]);
   d4294:	4798      	blx	r3
    checksumTotal += aucWriteDataBuf[i];
  }
  aucWriteDataBuf[7] = checksumTotal % 256;

  Wire.beginTransmission(i2c_addr);
  for(i=0; i< 8; i++) {
   d4296:	f1ba 0f08 	cmp.w	sl, #8
   d429a:	d1f3      	bne.n	d4284 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0x62>
    Wire.write(aucWriteDataBuf[i]);
  }
  Wire.endTransmission();
   d429c:	f001 fb24 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d42a0:	f000 fd37 	bl	d4d12 <_ZN7TwoWire15endTransmissionEv>

  delay(100);
   d42a4:	2064      	movs	r0, #100	; 0x64
   d42a6:	f000 fc4b 	bl	d4b40 <delay>
  
  //
  // Read the specified length of data - numBytesToRead + 3 bytes
  //

  Wire.requestFrom(i2c_addr, (uint8_t)(numBytesToRead + 3));
   d42aa:	f001 fb1d 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d42ae:	1cea      	adds	r2, r5, #3
   d42b0:	b2d2      	uxtb	r2, r2
   d42b2:	7831      	ldrb	r1, [r6, #0]
   d42b4:	f000 fd22 	bl	d4cfc <_ZN7TwoWire11requestFromEhj>
  int requestDataLength = Wire.available();
   d42b8:	f001 fb16 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d42bc:	6803      	ldr	r3, [r0, #0]
   d42be:	691b      	ldr	r3, [r3, #16]
   d42c0:	4798      	blx	r3
  if (requestDataLength==(numBytesToRead + 3)) {
   d42c2:	1ce3      	adds	r3, r4, #3
   d42c4:	4298      	cmp	r0, r3
   d42c6:	d116      	bne.n	d42f6 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xd4>
   d42c8:	463d      	mov	r5, r7
    for (i = 0; i < numBytesToRead + 3 ; i++) {
   d42ca:	1beb      	subs	r3, r5, r7
   d42cc:	4599      	cmp	r9, r3
   d42ce:	db07      	blt.n	d42e0 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xbe>
      byteArray[i] = Wire.read();
   d42d0:	f001 fb0a 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d42d4:	6803      	ldr	r3, [r0, #0]
   d42d6:	695b      	ldr	r3, [r3, #20]
   d42d8:	4798      	blx	r3
   d42da:	f805 0b01 	strb.w	r0, [r5], #1
  //

  Wire.requestFrom(i2c_addr, (uint8_t)(numBytesToRead + 3));
  int requestDataLength = Wire.available();
  if (requestDataLength==(numBytesToRead + 3)) {
    for (i = 0; i < numBytesToRead + 3 ; i++) {
   d42de:	e7f4      	b.n	d42ca <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xa8>
      byteArray[i] = Wire.read();
    }

    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
   d42e0:	4643      	mov	r3, r8
   d42e2:	463a      	mov	r2, r7
   d42e4:	4621      	mov	r1, r4
   d42e6:	4630      	mov	r0, r6
    // Unexpected. Handle error  
    return ERROR_UNEXPECTED_RESPONSE; 
  }

  return SUCCESS;
}
   d42e8:	b002      	add	sp, #8
   d42ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (i = 0; i < numBytesToRead + 3 ; i++) {
      byteArray[i] = Wire.read();
    }

    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
   d42ee:	f7ff bf7b 	b.w	d41e8 <_ZN20UpbeatLabs_MCP39F52122checkHeaderAndChecksumEiPhi>
  uint8_t aucWriteDataBuf[8];
  int i;
  uint32_t checksumTotal = 0;
  
  if (byteArraySize < numBytesToRead + 3) {
    return ERROR_INSUFFICIENT_ARRAY_SIZE;
   d42f2:	2004      	movs	r0, #4
   d42f4:	e000      	b.n	d42f8 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi+0xd6>
    // Check header and checksum
    return checkHeaderAndChecksum(numBytesToRead, byteArray, byteArraySize);      
    
  } else {
    // Unexpected. Handle error  
    return ERROR_UNEXPECTED_RESPONSE; 
   d42f6:	2003      	movs	r0, #3
  }

  return SUCCESS;
}
   d42f8:	b002      	add	sp, #8
   d42fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d42fe <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData>:
// reactiveEnergyImport, reactiveEnergyExport into two calls
// as the total is 32+3 = 35 bytes otherwise.

int UpbeatLabs_MCP39F521::read(UpbeatLabs_MCP39F521_Data *output,
                               UpbeatLabs_MCP39F521_AccumData *accumOutput)
{
   d42fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4302:	4606      	mov	r6, r0
   d4304:	b08d      	sub	sp, #52	; 0x34
   d4306:	4615      	mov	r5, r2
  uint8_t aucWriteDataBuf[8];
  uint8_t aucReadDataBuf[35];
  int i;
  int retval = SUCCESS;

  if (output) {
   d4308:	460c      	mov	r4, r1
   d430a:	2900      	cmp	r1, #0
   d430c:	d044      	beq.n	d4398 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x9a>

    retval = registerReadNBytes(0x00, 0x02, 28, aucReadDataBuf, 35);
   d430e:	2323      	movs	r3, #35	; 0x23
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	ab03      	add	r3, sp, #12
   d4314:	9300      	str	r3, [sp, #0]
   d4316:	2202      	movs	r2, #2
   d4318:	231c      	movs	r3, #28
   d431a:	2100      	movs	r1, #0
   d431c:	f7ff ff81 	bl	d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>
  
    if (retval != SUCCESS) {
   d4320:	2800      	cmp	r0, #0
   d4322:	f040 80c3 	bne.w	d44ac <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {
    
      /* System status */
      output->systemStatus = ((aucReadDataBuf[3] << 8) | aucReadDataBuf[2]);
   d4326:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d432a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d432e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4332:	8023      	strh	r3, [r4, #0]
      output->systemVersion = ((aucReadDataBuf[5] << 8) | aucReadDataBuf[4]);
   d4334:	f89d 2011 	ldrb.w	r2, [sp, #17]
   d4338:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d433c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4340:	8063      	strh	r3, [r4, #2]
      output->voltageRMS = ((aucReadDataBuf[7] << 8) | aucReadDataBuf[6]);
   d4342:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d4346:	f89d 3012 	ldrb.w	r3, [sp, #18]
   d434a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d434e:	80a3      	strh	r3, [r4, #4]
      output->lineFrequency = ((aucReadDataBuf[9] << 8) | aucReadDataBuf[8]);
   d4350:	f89d 2015 	ldrb.w	r2, [sp, #21]
   d4354:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d435c:	80e3      	strh	r3, [r4, #6]
      output->analogInputVoltage = ((aucReadDataBuf[11] << 8) | aucReadDataBuf[10]);
   d435e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   d4362:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d4366:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d436a:	8123      	strh	r3, [r4, #8]
      output->powerFactor = (((signed char)aucReadDataBuf[13] << 8) +
                             (unsigned char)aucReadDataBuf[12]);
   d436c:	f99d 2019 	ldrsb.w	r2, [sp, #25]
   d4370:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4374:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4378:	8163      	strh	r3, [r4, #10]
    
      output->currentRMS =  ((uint32_t)(aucReadDataBuf[17]) << 24 |
                             (uint32_t)(aucReadDataBuf[16]) << 16 |
                             (uint32_t)(aucReadDataBuf[15]) << 8 |
   d437a:	f8dd 301a 	ldr.w	r3, [sp, #26]
                             aucReadDataBuf[14]);
   d437e:	60e3      	str	r3, [r4, #12]
      output->activePower =  ((uint32_t)(aucReadDataBuf[21]) << 24 |
                              (uint32_t)(aucReadDataBuf[20]) << 16 |
                              (uint32_t)(aucReadDataBuf[19]) << 8 |
   d4380:	f8dd 301e 	ldr.w	r3, [sp, #30]
                              aucReadDataBuf[18]);
   d4384:	6123      	str	r3, [r4, #16]
      output->reactivePower =  ((uint32_t)(aucReadDataBuf[25]) << 24 |
                                (uint32_t)(aucReadDataBuf[24]) << 16 |
                                (uint32_t)(aucReadDataBuf[23]) << 8 |
   d4386:	f8dd 3022 	ldr.w	r3, [sp, #34]	; 0x22
                                aucReadDataBuf[22]);
   d438a:	6163      	str	r3, [r4, #20]
      output->apparentPower =  ((uint32_t)(aucReadDataBuf[29]) << 24 |
                                (uint32_t)(aucReadDataBuf[28]) << 16 |
                                (uint32_t)(aucReadDataBuf[27]) << 8 |
   d438c:	f8dd 3026 	ldr.w	r3, [sp, #38]	; 0x26
                                aucReadDataBuf[26]);
   d4390:	61a3      	str	r3, [r4, #24]
    }
  
    delay(100);
   d4392:	2064      	movs	r0, #100	; 0x64
   d4394:	f000 fbd4 	bl	d4b40 <delay>

  }

  if (accumOutput) {
   d4398:	2d00      	cmp	r5, #0
   d439a:	f000 8086 	beq.w	d44aa <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ac>

    retval = registerReadNBytes(0x00, 0x1e, 16, aucReadDataBuf, 19);
   d439e:	2313      	movs	r3, #19
   d43a0:	ac03      	add	r4, sp, #12
   d43a2:	9301      	str	r3, [sp, #4]
   d43a4:	9400      	str	r4, [sp, #0]
   d43a6:	2310      	movs	r3, #16
   d43a8:	221e      	movs	r2, #30
   d43aa:	2100      	movs	r1, #0
   d43ac:	4630      	mov	r0, r6
   d43ae:	f7ff ff38 	bl	d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>

    if (retval != SUCCESS) {
   d43b2:	2800      	cmp	r0, #0
   d43b4:	d17a      	bne.n	d44ac <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {
    
      if (_energy_accum_correction_factor == -1)  {
   d43b6:	6870      	ldr	r0, [r6, #4]
   d43b8:	1c42      	adds	r2, r0, #1
   d43ba:	d110      	bne.n	d43de <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0xe0>
                                            ((uint64_t)aucReadDataBuf[8]) << 48 |
                                            ((uint64_t)aucReadDataBuf[7]) << 40 |
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
   d43bc:	f8dd 200e 	ldr.w	r2, [sp, #14]
   d43c0:	f8dd 3012 	ldr.w	r3, [sp, #18]
                                            (uint64_t)aucReadDataBuf[2]) /
          2;
   d43c4:	085b      	lsrs	r3, r3, #1
   d43c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d43ca:	e9c5 2300 	strd	r2, r3, [r5]
                                            ((uint64_t)aucReadDataBuf[16]) << 48 |
                                            ((uint64_t)aucReadDataBuf[15]) << 40 |
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
   d43ce:	f8dd 2016 	ldr.w	r2, [sp, #22]
   d43d2:	f8dd 301a 	ldr.w	r3, [sp, #26]
                                            (uint64_t)aucReadDataBuf[10]) /
          2;
   d43d6:	085b      	lsrs	r3, r3, #1
   d43d8:	ea4f 0232 	mov.w	r2, r2, rrx
   d43dc:	e01e      	b.n	d441c <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x11e>
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
                                            (uint64_t)aucReadDataBuf[2]) *
          ( 1 << _energy_accum_correction_factor);
   d43de:	2201      	movs	r2, #1
   d43e0:	fa02 f000 	lsl.w	r0, r2, r0
                                            ((uint64_t)aucReadDataBuf[8]) << 48 |
                                            ((uint64_t)aucReadDataBuf[7]) << 40 |
                                            ((uint64_t)aucReadDataBuf[6]) << 32 |
                                            (uint64_t)(aucReadDataBuf[5]) << 24 |
                                            (uint64_t)(aucReadDataBuf[4]) << 16 |
                                            (uint64_t)(aucReadDataBuf[3]) << 8 |
   d43e4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d43e8:	f8dd 1012 	ldr.w	r1, [sp, #18]
                                            (uint64_t)aucReadDataBuf[2]) *
          ( 1 << _energy_accum_correction_factor);
   d43ec:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d43f0:	fb03 f709 	mul.w	r7, r3, r9
   d43f4:	fb00 7701 	mla	r7, r0, r1, r7
   d43f8:	fba3 0100 	umull	r0, r1, r3, r0
   d43fc:	4439      	add	r1, r7
   d43fe:	e9c5 0100 	strd	r0, r1, [r5]
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
                                            (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4402:	6871      	ldr	r1, [r6, #4]
                                            ((uint64_t)aucReadDataBuf[16]) << 48 |
                                            ((uint64_t)aucReadDataBuf[15]) << 40 |
                                            ((uint64_t)aucReadDataBuf[14]) << 32 |
                                            (uint64_t)(aucReadDataBuf[13]) << 24 |
                                            (uint64_t)(aucReadDataBuf[12]) << 16 |
                                            (uint64_t)(aucReadDataBuf[11]) << 8 |
   d4404:	f8dd 3016 	ldr.w	r3, [sp, #22]
   d4408:	f8dd 701a 	ldr.w	r7, [sp, #26]
                                            (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d440c:	408a      	lsls	r2, r1
   d440e:	17d1      	asrs	r1, r2, #31
   d4410:	4359      	muls	r1, r3
   d4412:	fb02 1107 	mla	r1, r2, r7, r1
   d4416:	fba3 2302 	umull	r2, r3, r3, r2
   d441a:	440b      	add	r3, r1
   d441c:	e9c5 2302 	strd	r2, r3, [r5, #8]
      }

    }
  
    delay(100);
   d4420:	2064      	movs	r0, #100	; 0x64
   d4422:	f000 fb8d 	bl	d4b40 <delay>

    retval = registerReadNBytes(0x00, 0x2e, 16, aucReadDataBuf, 19);
   d4426:	2313      	movs	r3, #19
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	9400      	str	r4, [sp, #0]
   d442c:	2310      	movs	r3, #16
   d442e:	222e      	movs	r2, #46	; 0x2e
   d4430:	2100      	movs	r1, #0
   d4432:	4630      	mov	r0, r6
   d4434:	f7ff fef5 	bl	d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>

    if (retval != SUCCESS) {
   d4438:	2800      	cmp	r0, #0
   d443a:	d137      	bne.n	d44ac <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      return retval;
    } else {

      if (_energy_accum_correction_factor == -1)  {
   d443c:	6871      	ldr	r1, [r6, #4]
   d443e:	1c4b      	adds	r3, r1, #1
   d4440:	d110      	bne.n	d4464 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x166>
                                              ((uint64_t)aucReadDataBuf[8]) << 48 |
                                              ((uint64_t)aucReadDataBuf[7]) << 40 |
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
   d4442:	f8dd 200e 	ldr.w	r2, [sp, #14]
   d4446:	f8dd 3012 	ldr.w	r3, [sp, #18]
                                              (uint64_t)aucReadDataBuf[2]) /
          2;
   d444a:	085b      	lsrs	r3, r3, #1
   d444c:	ea4f 0232 	mov.w	r2, r2, rrx
   d4450:	e9c5 2304 	strd	r2, r3, [r5, #16]
                                              ((uint64_t)aucReadDataBuf[16]) << 48 |
                                              ((uint64_t)aucReadDataBuf[15]) << 40 |
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
   d4454:	f8dd 2016 	ldr.w	r2, [sp, #22]
   d4458:	f8dd 301a 	ldr.w	r3, [sp, #26]
                                              (uint64_t)aucReadDataBuf[10]) /
          2;
   d445c:	085b      	lsrs	r3, r3, #1
   d445e:	ea4f 0232 	mov.w	r2, r2, rrx
   d4462:	e01f      	b.n	d44a4 <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1a6>
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
                                              (uint64_t)aucReadDataBuf[2]) *
          (1 << _energy_accum_correction_factor);
   d4464:	2201      	movs	r2, #1
   d4466:	fa02 f801 	lsl.w	r8, r2, r1
                                              ((uint64_t)aucReadDataBuf[8]) << 48 |
                                              ((uint64_t)aucReadDataBuf[7]) << 40 |
                                              ((uint64_t)aucReadDataBuf[6]) << 32 |
                                              (uint64_t)(aucReadDataBuf[5]) << 24 |
                                              (uint64_t)(aucReadDataBuf[4]) << 16 |
                                              (uint64_t)(aucReadDataBuf[3]) << 8 |
   d446a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d446e:	f8dd 4012 	ldr.w	r4, [sp, #18]
                                              (uint64_t)aucReadDataBuf[2]) *
          (1 << _energy_accum_correction_factor);
   d4472:	ea4f 7be8 	mov.w	fp, r8, asr #31
   d4476:	fb03 f10b 	mul.w	r1, r3, fp
   d447a:	fb08 1104 	mla	r1, r8, r4, r1
   d447e:	fba3 8908 	umull	r8, r9, r3, r8
   d4482:	4489      	add	r9, r1
   d4484:	e9c5 8904 	strd	r8, r9, [r5, #16]
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
                                              (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4488:	6874      	ldr	r4, [r6, #4]
                                              ((uint64_t)aucReadDataBuf[16]) << 48 |
                                              ((uint64_t)aucReadDataBuf[15]) << 40 |
                                              ((uint64_t)aucReadDataBuf[14]) << 32 |
                                              (uint64_t)(aucReadDataBuf[13]) << 24 |
                                              (uint64_t)(aucReadDataBuf[12]) << 16 |
                                              (uint64_t)(aucReadDataBuf[11]) << 8 |
   d448a:	f8dd 3016 	ldr.w	r3, [sp, #22]
   d448e:	f8dd 101a 	ldr.w	r1, [sp, #26]
                                              (uint64_t)aucReadDataBuf[10]) *
          (1 << _energy_accum_correction_factor);
   d4492:	40a2      	lsls	r2, r4
   d4494:	17d7      	asrs	r7, r2, #31
   d4496:	fb03 f407 	mul.w	r4, r3, r7
   d449a:	fb02 4101 	mla	r1, r2, r1, r4
   d449e:	fba3 2302 	umull	r2, r3, r3, r2
   d44a2:	440b      	add	r3, r1
   d44a4:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d44a8:	e000      	b.n	d44ac <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData+0x1ae>
      }
    
    }
  }
    
  return SUCCESS;
   d44aa:	4628      	mov	r0, r5
}
   d44ac:	b00d      	add	sp, #52	; 0x34
   d44ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d44b2 <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb>:
  return SUCCESS;  

}

int UpbeatLabs_MCP39F521::isEnergyAccumulationEnabled(bool *enabled)
{
   d44b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  int retVal;
  uint8_t readArray[5];
  int readValue;

  retVal = registerReadNBytes(0x00, 0xDC, 2, readArray, 5);
   d44b4:	2305      	movs	r3, #5
   d44b6:	9301      	str	r3, [sp, #4]
   d44b8:	ab02      	add	r3, sp, #8
  return SUCCESS;  

}

int UpbeatLabs_MCP39F521::isEnergyAccumulationEnabled(bool *enabled)
{
   d44ba:	460c      	mov	r4, r1
  int retVal;
  uint8_t readArray[5];
  int readValue;

  retVal = registerReadNBytes(0x00, 0xDC, 2, readArray, 5);
   d44bc:	9300      	str	r3, [sp, #0]
   d44be:	22dc      	movs	r2, #220	; 0xdc
   d44c0:	2302      	movs	r3, #2
   d44c2:	2100      	movs	r1, #0
   d44c4:	f7ff fead 	bl	d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>

  if (retVal != SUCCESS) {
   d44c8:	b928      	cbnz	r0, d44d6 <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb+0x24>
    return retVal;
  } else {
    *enabled = readArray[2];
   d44ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d44ce:	3300      	adds	r3, #0
   d44d0:	bf18      	it	ne
   d44d2:	2301      	movne	r3, #1
   d44d4:	7023      	strb	r3, [r4, #0]
  }

  return SUCCESS;

}
   d44d6:	b004      	add	sp, #16
   d44d8:	bd10      	pop	{r4, pc}

000d44da <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi>:
// number of line cycles to be used for a single computation.
// You will not be modifying this unless you are performing a
// calibration. 

int UpbeatLabs_MCP39F521::readAccumulationIntervalRegister(int *value)
{
   d44da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  int retVal = 0;
  uint8_t readArray[5];
  int readValue;

  retVal = registerReadNBytes(0x00, 0x9e, 2, readArray, 5);
   d44dc:	2305      	movs	r3, #5
   d44de:	9301      	str	r3, [sp, #4]
   d44e0:	ab02      	add	r3, sp, #8
// number of line cycles to be used for a single computation.
// You will not be modifying this unless you are performing a
// calibration. 

int UpbeatLabs_MCP39F521::readAccumulationIntervalRegister(int *value)
{
   d44e2:	460c      	mov	r4, r1
  int retVal = 0;
  uint8_t readArray[5];
  int readValue;

  retVal = registerReadNBytes(0x00, 0x9e, 2, readArray, 5);
   d44e4:	9300      	str	r3, [sp, #0]
   d44e6:	229e      	movs	r2, #158	; 0x9e
   d44e8:	2302      	movs	r3, #2
   d44ea:	2100      	movs	r1, #0
   d44ec:	f7ff fe99 	bl	d4222 <_ZN20UpbeatLabs_MCP39F52118registerReadNBytesEiiiPhi>
  if (retVal != SUCCESS) {
   d44f0:	b910      	cbnz	r0, d44f8 <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi+0x1e>
    return retVal;
  } else {
    *value = ((readArray[3] << 8) | readArray[2]);
   d44f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   d44f6:	6023      	str	r3, [r4, #0]
  }

  return SUCCESS;
}
   d44f8:	b004      	add	sp, #16
   d44fa:	bd10      	pop	{r4, pc}

000d44fc <_ZN20UpbeatLabs_MCP39F5215beginEh>:
// values are off if the energy accumulation interval is
// anything but 2. This applies the workaround for that problem.
// To be removed for chips that have the issue fixed. 

void UpbeatLabs_MCP39F521::begin(uint8_t _addr)
{
   d44fc:	b513      	push	{r0, r1, r4, lr}
  i2c_addr = _addr;
   d44fe:	7001      	strb	r1, [r0, #0]
// values are off if the energy accumulation interval is
// anything but 2. This applies the workaround for that problem.
// To be removed for chips that have the issue fixed. 

void UpbeatLabs_MCP39F521::begin(uint8_t _addr)
{
   d4500:	4604      	mov	r4, r0
  i2c_addr = _addr;
  Wire.setSpeed(CLOCK_SPEED_100KHZ);
   d4502:	f001 f9f1 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d4506:	490d      	ldr	r1, [pc, #52]	; (d453c <_ZN20UpbeatLabs_MCP39F5215beginEh+0x40>)
   d4508:	f000 fbc0 	bl	d4c8c <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   d450c:	f001 f9ec 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d4510:	f000 fbc0 	bl	d4c94 <_ZN7TwoWire5beginEv>

  int retVal = SUCCESS;
  bool enabled = false;
   d4514:	a902      	add	r1, sp, #8
   d4516:	2300      	movs	r3, #0
   d4518:	f801 3d05 	strb.w	r3, [r1, #-5]!
  retVal = isEnergyAccumulationEnabled(&enabled);
   d451c:	4620      	mov	r0, r4
   d451e:	f7ff ffc8 	bl	d44b2 <_ZN20UpbeatLabs_MCP39F52127isEnergyAccumulationEnabledEPb>

  if (retVal == SUCCESS && enabled) {
   d4522:	b948      	cbnz	r0, d4538 <_ZN20UpbeatLabs_MCP39F5215beginEh+0x3c>
   d4524:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4528:	b133      	cbz	r3, d4538 <_ZN20UpbeatLabs_MCP39F5215beginEh+0x3c>
    // other than the default (2), note the correction
    // factor that has to be applied to the energy
    // accumulation.
    int accumIntervalReg; 
    
    retVal = readAccumulationIntervalRegister(&accumIntervalReg);
   d452a:	a901      	add	r1, sp, #4
   d452c:	4620      	mov	r0, r4
   d452e:	f7ff ffd4 	bl	d44da <_ZN20UpbeatLabs_MCP39F52132readAccumulationIntervalRegisterEPi>
    
    _energy_accum_correction_factor = (accumIntervalReg - 2);
   d4532:	9b01      	ldr	r3, [sp, #4]
   d4534:	3b02      	subs	r3, #2
   d4536:	6063      	str	r3, [r4, #4]
  }
  
}
   d4538:	b002      	add	sp, #8
   d453a:	bd10      	pop	{r4, pc}
   d453c:	000186a0 	.word	0x000186a0

000d4540 <_GLOBAL__sub_I__ZN20UpbeatLabs_MCP39F521C2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4540:	f000 b942 	b.w	d47c8 <HAL_Pin_Map>

000d4544 <_Z3zcdv>:
// 40 times a second (120/3). A SLOW_DOWN_FACTOR of 120 means that
// the LED will flash 120/120 = 1 times a second

#define SLOW_DOWN_FACTOR 3

void zcd() {
   d4544:	b510      	push	{r4, lr}
  static int state = HIGH;
  static int numInterrupts = 0;
  digitalWrite(led, state);
   d4546:	4b0c      	ldr	r3, [pc, #48]	; (d4578 <_Z3zcdv+0x34>)
   d4548:	4c0c      	ldr	r4, [pc, #48]	; (d457c <_Z3zcdv+0x38>)
   d454a:	8818      	ldrh	r0, [r3, #0]
   d454c:	7821      	ldrb	r1, [r4, #0]
   d454e:	f001 f998 	bl	d5882 <digitalWrite>
  numInterrupts++;
   d4552:	490b      	ldr	r1, [pc, #44]	; (d4580 <_Z3zcdv+0x3c>)
  numInterrupts = numInterrupts % SLOW_DOWN_FACTOR;
   d4554:	680b      	ldr	r3, [r1, #0]
   d4556:	1c5a      	adds	r2, r3, #1
   d4558:	2303      	movs	r3, #3
   d455a:	fb92 f3f3 	sdiv	r3, r2, r3
   d455e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4562:	1ad3      	subs	r3, r2, r3
  if (numInterrupts == (SLOW_DOWN_FACTOR-1)) {
   d4564:	2b02      	cmp	r3, #2
void zcd() {
  static int state = HIGH;
  static int numInterrupts = 0;
  digitalWrite(led, state);
  numInterrupts++;
  numInterrupts = numInterrupts % SLOW_DOWN_FACTOR;
   d4566:	600b      	str	r3, [r1, #0]
  if (numInterrupts == (SLOW_DOWN_FACTOR-1)) {
    state = !state;
   d4568:	bf01      	itttt	eq
   d456a:	6823      	ldreq	r3, [r4, #0]
   d456c:	fab3 f383 	clzeq	r3, r3
   d4570:	095b      	lsreq	r3, r3, #5
   d4572:	6023      	streq	r3, [r4, #0]
   d4574:	bd10      	pop	{r4, pc}
   d4576:	bf00      	nop
   d4578:	2003e350 	.word	0x2003e350
   d457c:	2003e354 	.word	0x2003e354
   d4580:	2003e3c4 	.word	0x2003e3c4

000d4584 <setup>:
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();

void setup() {                
   d4584:	b507      	push	{r0, r1, r2, lr}
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);     
   d4586:	4b12      	ldr	r3, [pc, #72]	; (d45d0 <setup+0x4c>)
   d4588:	2101      	movs	r1, #1
   d458a:	8818      	ldrh	r0, [r3, #0]
   d458c:	f001 f968 	bl	d5860 <pinMode>
  attachInterrupt(0, zcd, CHANGE);
   d4590:	2200      	movs	r2, #0
   d4592:	9200      	str	r2, [sp, #0]
   d4594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4598:	4610      	mov	r0, r2
   d459a:	490e      	ldr	r1, [pc, #56]	; (d45d4 <setup+0x50>)
   d459c:	f000 fbc2 	bl	d4d24 <_Z15attachInterrupttPFvvE13InterruptModeah>
  Serial.begin(9600);  //turn on serial communication
   d45a0:	f001 f83c 	bl	d561c <_Z16_fetch_usbserialv>
   d45a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d45a8:	f001 f82c 	bl	d5604 <_ZN9USBSerial5beginEl>
  Serial.println("Upbeat Labs Dr. Wattson Energy Data Example Sketch");
   d45ac:	f001 f836 	bl	d561c <_Z16_fetch_usbserialv>
   d45b0:	4909      	ldr	r1, [pc, #36]	; (d45d8 <setup+0x54>)
   d45b2:	f000 fdf8 	bl	d51a6 <_ZN5Print7printlnEPKc>
  Serial.println("**************************************************");
   d45b6:	f001 f831 	bl	d561c <_Z16_fetch_usbserialv>
   d45ba:	4908      	ldr	r1, [pc, #32]	; (d45dc <setup+0x58>)
   d45bc:	f000 fdf3 	bl	d51a6 <_ZN5Print7printlnEPKc>
  
  wattson.begin(); // Pass in the appropriate address. Defaults to 0x74
   d45c0:	4807      	ldr	r0, [pc, #28]	; (d45e0 <setup+0x5c>)
   d45c2:	2174      	movs	r1, #116	; 0x74
}
   d45c4:	b003      	add	sp, #12
   d45c6:	f85d eb04 	ldr.w	lr, [sp], #4
  attachInterrupt(0, zcd, CHANGE);
  Serial.begin(9600);  //turn on serial communication
  Serial.println("Upbeat Labs Dr. Wattson Energy Data Example Sketch");
  Serial.println("**************************************************");
  
  wattson.begin(); // Pass in the appropriate address. Defaults to 0x74
   d45ca:	f7ff bf97 	b.w	d44fc <_ZN20UpbeatLabs_MCP39F5215beginEh>
   d45ce:	bf00      	nop
   d45d0:	2003e350 	.word	0x2003e350
   d45d4:	000d4545 	.word	0x000d4545
   d45d8:	000d66c0 	.word	0x000d66c0
   d45dc:	000d66f3 	.word	0x000d66f3
   d45e0:	2003e3c8 	.word	0x2003e3c8

000d45e4 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData>:
    state = !state;
  }
} 

void printMCP39F521Data(UpbeatLabs_MCP39F521_FormattedData *data)
{
   d45e4:	b510      	push	{r4, lr}
   d45e6:	4604      	mov	r4, r0
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
   d45e8:	f001 f818 	bl	d561c <_Z16_fetch_usbserialv>
   d45ec:	492f      	ldr	r1, [pc, #188]	; (d46ac <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xc8>)
   d45ee:	f000 fdca 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d45f2:	f001 f813 	bl	d561c <_Z16_fetch_usbserialv>
   d45f6:	ed94 0a01 	vldr	s0, [r4, #4]
   d45fa:	2104      	movs	r1, #4
   d45fc:	f000 fec7 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
   d4600:	f001 f80c 	bl	d561c <_Z16_fetch_usbserialv>
   d4604:	492a      	ldr	r1, [pc, #168]	; (d46b0 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xcc>)
   d4606:	f000 fdbe 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d460a:	f001 f807 	bl	d561c <_Z16_fetch_usbserialv>
   d460e:	ed94 0a05 	vldr	s0, [r4, #20]
   d4612:	2104      	movs	r1, #4
   d4614:	f000 febb 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
   d4618:	f001 f800 	bl	d561c <_Z16_fetch_usbserialv>
   d461c:	4925      	ldr	r1, [pc, #148]	; (d46b4 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xd0>)
   d461e:	f000 fdb2 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d4622:	f000 fffb 	bl	d561c <_Z16_fetch_usbserialv>
   d4626:	ed94 0a02 	vldr	s0, [r4, #8]
   d462a:	2104      	movs	r1, #4
   d462c:	f000 feaf 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
   d4630:	f000 fff4 	bl	d561c <_Z16_fetch_usbserialv>
   d4634:	4920      	ldr	r1, [pc, #128]	; (d46b8 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xd4>)
   d4636:	f000 fd9f 	bl	d5178 <_ZN5Print5printEPKc>
   d463a:	f000 ffef 	bl	d561c <_Z16_fetch_usbserialv>
   d463e:	ed94 0a03 	vldr	s0, [r4, #12]
   d4642:	2104      	movs	r1, #4
   d4644:	f000 fea3 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
   d4648:	f000 ffe8 	bl	d561c <_Z16_fetch_usbserialv>
   d464c:	491b      	ldr	r1, [pc, #108]	; (d46bc <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xd8>)
   d464e:	f000 fd9a 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d4652:	f000 ffe3 	bl	d561c <_Z16_fetch_usbserialv>
   d4656:	ed94 0a04 	vldr	s0, [r4, #16]
   d465a:	2104      	movs	r1, #4
   d465c:	f000 fe97 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
   d4660:	f000 ffdc 	bl	d561c <_Z16_fetch_usbserialv>
   d4664:	4916      	ldr	r1, [pc, #88]	; (d46c0 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xdc>)
   d4666:	f000 fd8e 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d466a:	f000 ffd7 	bl	d561c <_Z16_fetch_usbserialv>
   d466e:	ed94 0a06 	vldr	s0, [r4, #24]
   d4672:	2104      	movs	r1, #4
   d4674:	f000 fe8b 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
   d4678:	f000 ffd0 	bl	d561c <_Z16_fetch_usbserialv>
   d467c:	4911      	ldr	r1, [pc, #68]	; (d46c4 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xe0>)
   d467e:	f000 fd82 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d4682:	f000 ffcb 	bl	d561c <_Z16_fetch_usbserialv>
   d4686:	ed94 0a07 	vldr	s0, [r4, #28]
   d468a:	2104      	movs	r1, #4
   d468c:	f000 fe7f 	bl	d538e <_ZN5Print7printlnEfi>
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d4690:	f000 ffc4 	bl	d561c <_Z16_fetch_usbserialv>
   d4694:	490c      	ldr	r1, [pc, #48]	; (d46c8 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData+0xe4>)
   d4696:	f000 fd76 	bl	d5186 <_ZN5Print5printEPK19__FlashStringHelper>
   d469a:	f000 ffbf 	bl	d561c <_Z16_fetch_usbserialv>
   d469e:	ed94 0a08 	vldr	s0, [r4, #32]
   d46a2:	2104      	movs	r1, #4
}
   d46a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d46a8:	f000 be71 	b.w	d538e <_ZN5Print7printlnEfi>
   d46ac:	000d6750 	.word	0x000d6750
   d46b0:	000d6726 	.word	0x000d6726
   d46b4:	000d6731 	.word	0x000d6731
   d46b8:	000d6743 	.word	0x000d6743
   d46bc:	000d675b 	.word	0x000d675b
   d46c0:	000d676b 	.word	0x000d676b
   d46c4:	000d677b 	.word	0x000d677b
   d46c8:	000d678d 	.word	0x000d678d

000d46cc <loop>:
  Serial.println("**************************************************");
  
  wattson.begin(); // Pass in the appropriate address. Defaults to 0x74
}
 
void loop() {
   d46cc:	b530      	push	{r4, r5, lr}
   d46ce:	b091      	sub	sp, #68	; 0x44
  UpbeatLabs_MCP39F521_Data data;
  UpbeatLabs_MCP39F521_FormattedData fData;

  int readMCPretval = wattson.read(&data, NULL);
   d46d0:	2200      	movs	r2, #0
   d46d2:	4669      	mov	r1, sp
   d46d4:	4818      	ldr	r0, [pc, #96]	; (d4738 <loop+0x6c>)
   d46d6:	f7ff fe12 	bl	d42fe <_ZN20UpbeatLabs_MCP39F5214readEP25UpbeatLabs_MCP39F521_DataP30UpbeatLabs_MCP39F521_AccumData>
  if (readMCPretval == UpbeatLabs_MCP39F521::SUCCESS) {
   d46da:	4604      	mov	r4, r0
   d46dc:	b978      	cbnz	r0, d46fe <loop+0x32>
    // Print stuff out
    Serial.write("\x1B" "c"); // Clear the screen on a regular terminal                               
   d46de:	f000 ff9d 	bl	d561c <_Z16_fetch_usbserialv>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46e2:	6803      	ldr	r3, [r0, #0]
   d46e4:	4915      	ldr	r1, [pc, #84]	; (d473c <loop+0x70>)
   d46e6:	68db      	ldr	r3, [r3, #12]
   d46e8:	2202      	movs	r2, #2
   d46ea:	4798      	blx	r3
    wattson.convertRawData(&data, &fData);
   d46ec:	aa07      	add	r2, sp, #28
   d46ee:	4669      	mov	r1, sp
   d46f0:	4811      	ldr	r0, [pc, #68]	; (d4738 <loop+0x6c>)
   d46f2:	f7ff fce1 	bl	d40b8 <_ZN20UpbeatLabs_MCP39F52114convertRawDataEP25UpbeatLabs_MCP39F521_DataP34UpbeatLabs_MCP39F521_FormattedData>
    printMCP39F521Data(&fData);
   d46f6:	a807      	add	r0, sp, #28
   d46f8:	f7ff ff74 	bl	d45e4 <_Z18printMCP39F521DataP34UpbeatLabs_MCP39F521_FormattedData>
   d46fc:	e016      	b.n	d472c <loop+0x60>
  } else {
    Serial.print("Error returned! "); Serial.println(readMCPretval);
   d46fe:	f000 ff8d 	bl	d561c <_Z16_fetch_usbserialv>
   d4702:	490f      	ldr	r1, [pc, #60]	; (d4740 <loop+0x74>)
   d4704:	f000 fd38 	bl	d5178 <_ZN5Print5printEPKc>
   d4708:	f000 ff88 	bl	d561c <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d470c:	2c00      	cmp	r4, #0
   d470e:	4605      	mov	r5, r0
   d4710:	da04      	bge.n	d471c <loop+0x50>
            t = print('-');
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	f000 fd34 	bl	d5180 <_ZN5Print5printEc>
            val = -n;
   d4718:	4261      	negs	r1, r4
   d471a:	e000      	b.n	d471e <loop+0x52>
        } else {
            val = n;
   d471c:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d471e:	220a      	movs	r2, #10
   d4720:	4628      	mov	r0, r5
   d4722:	f000 fd4a 	bl	d51ba <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4726:	4628      	mov	r0, r5
   d4728:	f000 fd31 	bl	d518e <_ZN5Print7printlnEv>
  }

  delay(1000);               // wait for a second
   d472c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4730:	f000 fa06 	bl	d4b40 <delay>
}
   d4734:	b011      	add	sp, #68	; 0x44
   d4736:	bd30      	pop	{r4, r5, pc}
   d4738:	2003e3c8 	.word	0x2003e3c8
   d473c:	000d679f 	.word	0x000d679f
   d4740:	000d67a2 	.word	0x000d67a2

000d4744 <_GLOBAL__sub_I_led>:
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
}
   d4744:	b508      	push	{r3, lr}
   d4746:	f000 f83f 	bl	d47c8 <HAL_Pin_Map>

// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();
   d474a:	4802      	ldr	r0, [pc, #8]	; (d4754 <_GLOBAL__sub_I_led+0x10>)
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
}
   d474c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;

UpbeatLabs_MCP39F521 wattson = UpbeatLabs_MCP39F521();
   d4750:	f7ff bcaf 	b.w	d40b2 <_ZN20UpbeatLabs_MCP39F521C1Ev>
   d4754:	2003e3c8 	.word	0x2003e3c8

000d4758 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <os_thread_is_current+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	689b      	ldr	r3, [r3, #8]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030248 	.word	0x00030248

000d4768 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <os_thread_join+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	691b      	ldr	r3, [r3, #16]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030248 	.word	0x00030248

000d4778 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <os_thread_cleanup+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	695b      	ldr	r3, [r3, #20]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030248 	.word	0x00030248

000d4788 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <os_mutex_recursive_create+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030248 	.word	0x00030248

000d4798 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <os_mutex_recursive_destroy+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030248 	.word	0x00030248

000d47a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_RNG_GetRandomNumber+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	685b      	ldr	r3, [r3, #4]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030218 	.word	0x00030218

000d47b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	695b      	ldr	r3, [r3, #20]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030218 	.word	0x00030218

000d47c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_Pin_Map+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	681b      	ldr	r3, [r3, #0]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003022c 	.word	0x0003022c

000d47d8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_Pin_Mode+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	689b      	ldr	r3, [r3, #8]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003022c 	.word	0x0003022c

000d47e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_Get_Pin_Mode+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	68db      	ldr	r3, [r3, #12]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003022c 	.word	0x0003022c

000d47f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_GPIO_Write+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	691b      	ldr	r3, [r3, #16]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003022c 	.word	0x0003022c

000d4808 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_Interrupts_Attach+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	699b      	ldr	r3, [r3, #24]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003022c 	.word	0x0003022c

000d4818 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_Interrupts_Detach+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	69db      	ldr	r3, [r3, #28]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003022c 	.word	0x0003022c

000d4828 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_I2C_Set_Speed+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	681b      	ldr	r3, [r3, #0]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030228 	.word	0x00030228

000d4838 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_I2C_Begin+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	68db      	ldr	r3, [r3, #12]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030228 	.word	0x00030228

000d4848 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_I2C_Begin_Transmission+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	699b      	ldr	r3, [r3, #24]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030228 	.word	0x00030228

000d4858 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_I2C_End_Transmission+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	69db      	ldr	r3, [r3, #28]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030228 	.word	0x00030228

000d4868 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_I2C_Write_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6a1b      	ldr	r3, [r3, #32]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030228 	.word	0x00030228

000d4878 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_I2C_Available_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030228 	.word	0x00030228

000d4888 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_I2C_Read_Data+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030228 	.word	0x00030228

000d4898 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_I2C_Peek_Data+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030228 	.word	0x00030228

000d48a8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_I2C_Flush_Data+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030228 	.word	0x00030228

000d48b8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_I2C_Is_Enabled+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030228 	.word	0x00030228

000d48c8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_I2C_Init+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030228 	.word	0x00030228

000d48d8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_I2C_Request_Data_Ex+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030228 	.word	0x00030228

000d48e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <inet_inet_ntop+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030264 	.word	0x00030264

000d48f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <netdb_freeaddrinfo+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030268 	.word	0x00030268

000d4908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <netdb_getaddrinfo+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	68db      	ldr	r3, [r3, #12]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030268 	.word	0x00030268

000d4918 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_SPI_Init+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	69db      	ldr	r3, [r3, #28]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030230 	.word	0x00030230

000d4928 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_SPI_Is_Enabled+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6a1b      	ldr	r3, [r3, #32]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030230 	.word	0x00030230

000d4938 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_USART_Init+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	681b      	ldr	r3, [r3, #0]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003023c 	.word	0x0003023c

000d4948 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USART_Write_Data+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	68db      	ldr	r3, [r3, #12]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003023c 	.word	0x0003023c

000d4958 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USART_Available_Data+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003023c 	.word	0x0003023c

000d4968 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_USART_Read_Data+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003023c 	.word	0x0003023c

000d4978 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USART_Peek_Data+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	699b      	ldr	r3, [r3, #24]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003023c 	.word	0x0003023c

000d4988 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USART_Flush_Data+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003023c 	.word	0x0003023c

000d4998 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USART_Is_Enabled+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003023c 	.word	0x0003023c

000d49a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USB_USART_Init+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	681b      	ldr	r3, [r3, #0]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003024c 	.word	0x0003024c

000d49c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USB_USART_Begin+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	685b      	ldr	r3, [r3, #4]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003024c 	.word	0x0003024c

000d49d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USB_USART_Available_Data+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	691b      	ldr	r3, [r3, #16]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003024c 	.word	0x0003024c

000d49e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003024c 	.word	0x0003024c

000d49f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_USB_USART_Receive_Data+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	699b      	ldr	r3, [r3, #24]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003024c 	.word	0x0003024c

000d4a08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_USB_USART_Send_Data+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	69db      	ldr	r3, [r3, #28]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003024c 	.word	0x0003024c

000d4a18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_USB_USART_Flush_Data+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a1b      	ldr	r3, [r3, #32]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003024c 	.word	0x0003024c

000d4a28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <set_system_mode+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	685b      	ldr	r3, [r3, #4]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030220 	.word	0x00030220

000d4a38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <system_delay_ms+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	695b      	ldr	r3, [r3, #20]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030220 	.word	0x00030220

000d4a48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b03      	ldr	r3, [pc, #12]	; (d4a58 <system_ctrl_set_app_request_handler+0x10>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a52:	9301      	str	r3, [sp, #4]
   d4a54:	bd08      	pop	{r3, pc}
   d4a56:	0000      	.short	0x0000
   d4a58:	00030220 	.word	0x00030220

000d4a5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b03      	ldr	r3, [pc, #12]	; (d4a6c <system_ctrl_set_result+0x10>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a66:	9301      	str	r3, [sp, #4]
   d4a68:	bd08      	pop	{r3, pc}
   d4a6a:	0000      	.short	0x0000
   d4a6c:	00030220 	.word	0x00030220

000d4a70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030244 	.word	0x00030244

000d4a80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_connect+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	685b      	ldr	r3, [r3, #4]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <network_connecting+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	689b      	ldr	r3, [r3, #8]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030240 	.word	0x00030240

000d4aa0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_disconnect+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	68db      	ldr	r3, [r3, #12]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_ready+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	691b      	ldr	r3, [r3, #16]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_on+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	695b      	ldr	r3, [r3, #20]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <network_off+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	699b      	ldr	r3, [r3, #24]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030240 	.word	0x00030240

000d4ae0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <network_listen+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	69db      	ldr	r3, [r3, #28]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030240 	.word	0x00030240

000d4af0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <network_listening+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6a1b      	ldr	r3, [r3, #32]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030240 	.word	0x00030240

000d4b00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <network_set_listen_timeout+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030240 	.word	0x00030240

000d4b10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <network_get_listen_timeout+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030240 	.word	0x00030240

000d4b20 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <malloc+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	681b      	ldr	r3, [r3, #0]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003021c 	.word	0x0003021c

000d4b30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <free+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	685b      	ldr	r3, [r3, #4]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003021c 	.word	0x0003021c

000d4b40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b40:	2100      	movs	r1, #0
   d4b42:	f7ff bf79 	b.w	d4a38 <system_delay_ms>

000d4b46 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b46:	b510      	push	{r4, lr}
   d4b48:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b4a:	6800      	ldr	r0, [r0, #0]
   d4b4c:	b108      	cbz	r0, d4b52 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b4e:	f7ff fe23 	bl	d4798 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4b52:	4620      	mov	r0, r4
   d4b54:	bd10      	pop	{r4, pc}
	...

000d4b58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b58:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b5a:	4c06      	ldr	r4, [pc, #24]	; (d4b74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b5c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4b5e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b60:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b62:	f7ff fe11 	bl	d4788 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b66:	4620      	mov	r0, r4
   d4b68:	4a03      	ldr	r2, [pc, #12]	; (d4b78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b6a:	4904      	ldr	r1, [pc, #16]	; (d4b7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b70:	f000 bee0 	b.w	d5934 <__aeabi_atexit>
   d4b74:	2003e3d0 	.word	0x2003e3d0
   d4b78:	2003e3c0 	.word	0x2003e3c0
   d4b7c:	000d4b47 	.word	0x000d4b47

000d4b80 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b80:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b82:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b84:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b86:	b113      	cbz	r3, d4b8e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b88:	2203      	movs	r2, #3
   d4b8a:	4601      	mov	r1, r0
   d4b8c:	4798      	blx	r3
    }
   d4b8e:	4620      	mov	r0, r4
   d4b90:	bd10      	pop	{r4, pc}

000d4b92 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b92:	2200      	movs	r2, #0
   d4b94:	4611      	mov	r1, r2
   d4b96:	6840      	ldr	r0, [r0, #4]
   d4b98:	f7ff bfaa 	b.w	d4af0 <network_listening>

000d4b9c <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	4611      	mov	r1, r2
   d4ba0:	6840      	ldr	r0, [r0, #4]
   d4ba2:	f7ff bfb5 	b.w	d4b10 <network_get_listen_timeout>

000d4ba6 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ba6:	2200      	movs	r2, #0
   d4ba8:	6840      	ldr	r0, [r0, #4]
   d4baa:	f7ff bfa9 	b.w	d4b00 <network_set_listen_timeout>

000d4bae <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bae:	2200      	movs	r2, #0
   d4bb0:	f081 0101 	eor.w	r1, r1, #1
   d4bb4:	6840      	ldr	r0, [r0, #4]
   d4bb6:	f7ff bf93 	b.w	d4ae0 <network_listen>

000d4bba <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4bba:	2300      	movs	r3, #0
   d4bbc:	461a      	mov	r2, r3
   d4bbe:	4619      	mov	r1, r3
   d4bc0:	6840      	ldr	r0, [r0, #4]
   d4bc2:	f7ff bf85 	b.w	d4ad0 <network_off>

000d4bc6 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4bc6:	2300      	movs	r3, #0
   d4bc8:	461a      	mov	r2, r3
   d4bca:	4619      	mov	r1, r3
   d4bcc:	6840      	ldr	r0, [r0, #4]
   d4bce:	f7ff bf77 	b.w	d4ac0 <network_on>

000d4bd2 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	4611      	mov	r1, r2
   d4bd6:	6840      	ldr	r0, [r0, #4]
   d4bd8:	f7ff bf6a 	b.w	d4ab0 <network_ready>

000d4bdc <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bdc:	2200      	movs	r2, #0
   d4bde:	4611      	mov	r1, r2
   d4be0:	6840      	ldr	r0, [r0, #4]
   d4be2:	f7ff bf55 	b.w	d4a90 <network_connecting>

000d4be6 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4be6:	2200      	movs	r2, #0
   d4be8:	2102      	movs	r1, #2
   d4bea:	6840      	ldr	r0, [r0, #4]
   d4bec:	f7ff bf58 	b.w	d4aa0 <network_disconnect>

000d4bf0 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4bf0:	2300      	movs	r3, #0
   d4bf2:	461a      	mov	r2, r3
   d4bf4:	6840      	ldr	r0, [r0, #4]
   d4bf6:	f7ff bf43 	b.w	d4a80 <network_connect>
	...

000d4bfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bfc:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bfe:	2203      	movs	r2, #3
   d4c00:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c02:	4a02      	ldr	r2, [pc, #8]	; (d4c0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c04:	601a      	str	r2, [r3, #0]
   d4c06:	4770      	bx	lr
   d4c08:	2003e3d4 	.word	0x2003e3d4
   d4c0c:	000d67bc 	.word	0x000d67bc

000d4c10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4c10:	4770      	bx	lr

000d4c12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c14:	4606      	mov	r6, r0
   d4c16:	4615      	mov	r5, r2
   d4c18:	460c      	mov	r4, r1
   d4c1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c1c:	42bc      	cmp	r4, r7
   d4c1e:	d006      	beq.n	d4c2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c20:	6833      	ldr	r3, [r6, #0]
   d4c22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c26:	689b      	ldr	r3, [r3, #8]
   d4c28:	4630      	mov	r0, r6
   d4c2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c2c:	e7f6      	b.n	d4c1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4c2e:	4628      	mov	r0, r5
   d4c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4c32:	2200      	movs	r2, #0
   d4c34:	7c00      	ldrb	r0, [r0, #16]
   d4c36:	f7ff be17 	b.w	d4868 <HAL_I2C_Write_Data>

000d4c3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4c3a:	2100      	movs	r1, #0
   d4c3c:	7c00      	ldrb	r0, [r0, #16]
   d4c3e:	f7ff be1b 	b.w	d4878 <HAL_I2C_Available_Data>

000d4c42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4c42:	2100      	movs	r1, #0
   d4c44:	7c00      	ldrb	r0, [r0, #16]
   d4c46:	f7ff be1f 	b.w	d4888 <HAL_I2C_Read_Data>

000d4c4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4c4a:	2100      	movs	r1, #0
   d4c4c:	7c00      	ldrb	r0, [r0, #16]
   d4c4e:	f7ff be23 	b.w	d4898 <HAL_I2C_Peek_Data>

000d4c52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4c52:	2100      	movs	r1, #0
   d4c54:	7c00      	ldrb	r0, [r0, #16]
   d4c56:	f7ff be27 	b.w	d48a8 <HAL_I2C_Flush_Data>

000d4c5a <_ZN7TwoWireD0Ev>:
   d4c5a:	b510      	push	{r4, lr}
   d4c5c:	2114      	movs	r1, #20
   d4c5e:	4604      	mov	r4, r0
   d4c60:	f000 fe6d 	bl	d593e <_ZdlPvj>
   d4c64:	4620      	mov	r0, r4
   d4c66:	bd10      	pop	{r4, pc}

000d4c68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4c68:	b510      	push	{r4, lr}
   d4c6a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c74:	60a3      	str	r3, [r4, #8]
   d4c76:	4b04      	ldr	r3, [pc, #16]	; (d4c88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4c78:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4c7a:	4608      	mov	r0, r1
   d4c7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4c7e:	4611      	mov	r1, r2
   d4c80:	f7ff fe22 	bl	d48c8 <HAL_I2C_Init>
}
   d4c84:	4620      	mov	r0, r4
   d4c86:	bd10      	pop	{r4, pc}
   d4c88:	000d67f0 	.word	0x000d67f0

000d4c8c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d4c8c:	2200      	movs	r2, #0
   d4c8e:	7c00      	ldrb	r0, [r0, #16]
   d4c90:	f7ff bdca 	b.w	d4828 <HAL_I2C_Set_Speed>

000d4c94 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4c94:	2300      	movs	r3, #0
   d4c96:	461a      	mov	r2, r3
   d4c98:	4619      	mov	r1, r3
   d4c9a:	7c00      	ldrb	r0, [r0, #16]
   d4c9c:	f7ff bdcc 	b.w	d4838 <HAL_I2C_Begin>

000d4ca0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4ca0:	b570      	push	{r4, r5, r6, lr}
   d4ca2:	460c      	mov	r4, r1
   d4ca4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4ca6:	2514      	movs	r5, #20
   d4ca8:	4606      	mov	r6, r0
   d4caa:	462a      	mov	r2, r5
   d4cac:	2100      	movs	r1, #0
   d4cae:	a801      	add	r0, sp, #4
   d4cb0:	f001 fcc3 	bl	d663a <memset>
   d4cb4:	7823      	ldrb	r3, [r4, #0]
   d4cb6:	f88d 3008 	strb.w	r3, [sp, #8]
   d4cba:	6863      	ldr	r3, [r4, #4]
   d4cbc:	9303      	str	r3, [sp, #12]
   d4cbe:	68e3      	ldr	r3, [r4, #12]
   d4cc0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4cc2:	2200      	movs	r2, #0
   d4cc4:	7a23      	ldrb	r3, [r4, #8]
   d4cc6:	7c30      	ldrb	r0, [r6, #16]
   d4cc8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4ccc:	a901      	add	r1, sp, #4
   d4cce:	9305      	str	r3, [sp, #20]
   d4cd0:	f7ff fe02 	bl	d48d8 <HAL_I2C_Request_Data_Ex>
}
   d4cd4:	b006      	add	sp, #24
   d4cd6:	bd70      	pop	{r4, r5, r6, pc}

000d4cd8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4cda:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4cdc:	f88d 1000 	strb.w	r1, [sp]
   d4ce0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4ce4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4ce6:	bf18      	it	ne
   d4ce8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4cea:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4cec:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4cee:	f88d 3008 	strb.w	r3, [sp, #8]
   d4cf2:	f7ff ffd5 	bl	d4ca0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4cf6:	b005      	add	sp, #20
   d4cf8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cfc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4cfc:	2301      	movs	r3, #1
   d4cfe:	f7ff bfeb 	b.w	d4cd8 <_ZN7TwoWire11requestFromEhjh>

000d4d02 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4d02:	2200      	movs	r2, #0
   d4d04:	7c00      	ldrb	r0, [r0, #16]
   d4d06:	f7ff bd9f 	b.w	d4848 <HAL_I2C_Begin_Transmission>

000d4d0a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	7c00      	ldrb	r0, [r0, #16]
   d4d0e:	f7ff bda3 	b.w	d4858 <HAL_I2C_End_Transmission>

000d4d12 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4d12:	2101      	movs	r1, #1
   d4d14:	f7ff bff9 	b.w	d4d0a <_ZN7TwoWire15endTransmissionEh>

000d4d18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4d18:	2100      	movs	r1, #0
   d4d1a:	7c00      	ldrb	r0, [r0, #16]
   d4d1c:	f7ff bdcc 	b.w	d48b8 <HAL_I2C_Is_Enabled>

000d4d20 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d4d20:	4700      	bx	r0
	...

000d4d24 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d26:	b085      	sub	sp, #20
   d4d28:	461c      	mov	r4, r3
   d4d2a:	460e      	mov	r6, r1
   d4d2c:	4617      	mov	r7, r2
   d4d2e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d4d30:	f7ff fd72 	bl	d4818 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d4d34:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d4d36:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d4d38:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d4d3c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d4d3e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d4d42:	bfa5      	ittet	ge
   d4d44:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d4d48:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d4d4c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d4d4e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d4d50:	9300      	str	r3, [sp, #0]
   d4d52:	4632      	mov	r2, r6
   d4d54:	463b      	mov	r3, r7
   d4d56:	4906      	ldr	r1, [pc, #24]	; (d4d70 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d4d58:	bfa8      	it	ge
   d4d5a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d4d5e:	4628      	mov	r0, r5
   d4d60:	f7ff fd52 	bl	d4808 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d4d64:	fab0 f080 	clz	r0, r0
   d4d68:	0940      	lsrs	r0, r0, #5
   d4d6a:	b005      	add	sp, #20
   d4d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d6e:	bf00      	nop
   d4d70:	000d4d21 	.word	0x000d4d21

000d4d74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d74:	4770      	bx	lr

000d4d76 <_ZN9IPAddressD0Ev>:
   d4d76:	b510      	push	{r4, lr}
   d4d78:	2118      	movs	r1, #24
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	f000 fddf 	bl	d593e <_ZdlPvj>
   d4d80:	4620      	mov	r0, r4
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d86:	7d03      	ldrb	r3, [r0, #20]
   d4d88:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d8a:	b08d      	sub	sp, #52	; 0x34
   d4d8c:	460e      	mov	r6, r1
   d4d8e:	f100 0704 	add.w	r7, r0, #4
   d4d92:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d96:	d002      	beq.n	d4d9e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d98:	f100 0508 	add.w	r5, r0, #8
   d4d9c:	e018      	b.n	d4dd0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d9e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4da0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4da2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4da6:	232f      	movs	r3, #47	; 0x2f
   d4da8:	462a      	mov	r2, r5
   d4daa:	200a      	movs	r0, #10
   d4dac:	f7ff fd9c 	bl	d48e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4db0:	4628      	mov	r0, r5
   d4db2:	f001 fc73 	bl	d669c <strlen>
   d4db6:	6833      	ldr	r3, [r6, #0]
   d4db8:	4602      	mov	r2, r0
   d4dba:	68db      	ldr	r3, [r3, #12]
   d4dbc:	4629      	mov	r1, r5
   d4dbe:	4630      	mov	r0, r6
   d4dc0:	4798      	blx	r3
   d4dc2:	e00f      	b.n	d4de4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4dc4:	b124      	cbz	r4, d4dd0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4dc6:	212e      	movs	r1, #46	; 0x2e
   d4dc8:	4630      	mov	r0, r6
   d4dca:	f000 f9d9 	bl	d5180 <_ZN5Print5printEc>
   d4dce:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4dd4:	220a      	movs	r2, #10
   d4dd6:	4630      	mov	r0, r6
   d4dd8:	f000 f9ef 	bl	d51ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ddc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4dde:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4de0:	d1f0      	bne.n	d4dc4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4de2:	4620      	mov	r0, r4
    }
    return n;
}
   d4de4:	b00d      	add	sp, #52	; 0x34
   d4de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4de8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4de8:	b510      	push	{r4, lr}
   d4dea:	4b05      	ldr	r3, [pc, #20]	; (d4e00 <_ZN9IPAddressC1Ev+0x18>)
   d4dec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4dee:	2211      	movs	r2, #17
   d4df0:	f840 3b04 	str.w	r3, [r0], #4
   d4df4:	2100      	movs	r1, #0
   d4df6:	f001 fc20 	bl	d663a <memset>
{
    clear();
}
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	bd10      	pop	{r4, pc}
   d4dfe:	bf00      	nop
   d4e00:	000d6818 	.word	0x000d6818

000d4e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e04:	4603      	mov	r3, r0
   d4e06:	4a07      	ldr	r2, [pc, #28]	; (d4e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e08:	b510      	push	{r4, lr}
   d4e0a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e0e:	f101 0210 	add.w	r2, r1, #16
   d4e12:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e16:	f843 4b04 	str.w	r4, [r3], #4
   d4e1a:	4291      	cmp	r1, r2
   d4e1c:	d1f9      	bne.n	d4e12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e1e:	780a      	ldrb	r2, [r1, #0]
   d4e20:	701a      	strb	r2, [r3, #0]
}
   d4e22:	bd10      	pop	{r4, pc}
   d4e24:	000d6818 	.word	0x000d6818

000d4e28 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4e28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e3a:	2304      	movs	r3, #4
   d4e3c:	6041      	str	r1, [r0, #4]
   d4e3e:	7503      	strb	r3, [r0, #20]
   d4e40:	bd10      	pop	{r4, pc}

000d4e42 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e42:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e44:	780d      	ldrb	r5, [r1, #0]
   d4e46:	788b      	ldrb	r3, [r1, #2]
   d4e48:	784a      	ldrb	r2, [r1, #1]
   d4e4a:	78c9      	ldrb	r1, [r1, #3]
   d4e4c:	9100      	str	r1, [sp, #0]
   d4e4e:	4629      	mov	r1, r5
   d4e50:	f7ff ffea 	bl	d4e28 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e54:	b003      	add	sp, #12
   d4e56:	bd30      	pop	{r4, r5, pc}

000d4e58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e58:	4b01      	ldr	r3, [pc, #4]	; (d4e60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e5a:	4a02      	ldr	r2, [pc, #8]	; (d4e64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e5c:	601a      	str	r2, [r3, #0]
   d4e5e:	4770      	bx	lr
   d4e60:	2003e3dc 	.word	0x2003e3dc
   d4e64:	000d6897 	.word	0x000d6897

000d4e68 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e68:	2200      	movs	r2, #0
   d4e6a:	4611      	mov	r1, r2
   d4e6c:	6840      	ldr	r0, [r0, #4]
   d4e6e:	f7ff be3f 	b.w	d4af0 <network_listening>

000d4e72 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e72:	2200      	movs	r2, #0
   d4e74:	4611      	mov	r1, r2
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff be4a 	b.w	d4b10 <network_get_listen_timeout>

000d4e7c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e7c:	2200      	movs	r2, #0
   d4e7e:	6840      	ldr	r0, [r0, #4]
   d4e80:	f7ff be3e 	b.w	d4b00 <network_set_listen_timeout>

000d4e84 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e84:	2200      	movs	r2, #0
   d4e86:	f081 0101 	eor.w	r1, r1, #1
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff be28 	b.w	d4ae0 <network_listen>

000d4e90 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e90:	2300      	movs	r3, #0
   d4e92:	461a      	mov	r2, r3
   d4e94:	2101      	movs	r1, #1
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	f7ff be1a 	b.w	d4ad0 <network_off>

000d4e9c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e9c:	2300      	movs	r3, #0
   d4e9e:	461a      	mov	r2, r3
   d4ea0:	4619      	mov	r1, r3
   d4ea2:	6840      	ldr	r0, [r0, #4]
   d4ea4:	f7ff be0c 	b.w	d4ac0 <network_on>

000d4ea8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	4611      	mov	r1, r2
   d4eac:	6840      	ldr	r0, [r0, #4]
   d4eae:	f7ff bdff 	b.w	d4ab0 <network_ready>

000d4eb2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	4611      	mov	r1, r2
   d4eb6:	6840      	ldr	r0, [r0, #4]
   d4eb8:	f7ff bdea 	b.w	d4a90 <network_connecting>

000d4ebc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ebc:	2200      	movs	r2, #0
   d4ebe:	2102      	movs	r1, #2
   d4ec0:	6840      	ldr	r0, [r0, #4]
   d4ec2:	f7ff bded 	b.w	d4aa0 <network_disconnect>

000d4ec6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ec6:	2300      	movs	r3, #0
   d4ec8:	461a      	mov	r2, r3
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	f7ff bdd8 	b.w	d4a80 <network_connect>

000d4ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ed0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ed2:	4605      	mov	r5, r0
   d4ed4:	b188      	cbz	r0, d4efa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ed6:	6804      	ldr	r4, [r0, #0]
   d4ed8:	b14c      	cbz	r4, d4eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4eda:	68a3      	ldr	r3, [r4, #8]
   d4edc:	b11b      	cbz	r3, d4ee6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ede:	2203      	movs	r2, #3
   d4ee0:	4621      	mov	r1, r4
   d4ee2:	4620      	mov	r0, r4
   d4ee4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ee6:	2110      	movs	r1, #16
   d4ee8:	4620      	mov	r0, r4
   d4eea:	f000 fd28 	bl	d593e <_ZdlPvj>
   d4eee:	4628      	mov	r0, r5
   d4ef0:	2114      	movs	r1, #20
      }
   d4ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ef6:	f000 bd22 	b.w	d593e <_ZdlPvj>
   d4efa:	bd38      	pop	{r3, r4, r5, pc}

000d4efc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4efc:	b110      	cbz	r0, d4f04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4efe:	6803      	ldr	r3, [r0, #0]
   d4f00:	685b      	ldr	r3, [r3, #4]
   d4f02:	4718      	bx	r3
   d4f04:	4770      	bx	lr

000d4f06 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4f06:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f08:	6803      	ldr	r3, [r0, #0]
   d4f0a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f0c:	b1bb      	cbz	r3, d4f3e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f0e:	6858      	ldr	r0, [r3, #4]
   d4f10:	f7ff fc22 	bl	d4758 <os_thread_is_current>
   d4f14:	b978      	cbnz	r0, d4f36 <_ZN6ThreadD1Ev+0x30>
   d4f16:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f18:	7c5a      	ldrb	r2, [r3, #17]
   d4f1a:	b912      	cbnz	r2, d4f22 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f1c:	6858      	ldr	r0, [r3, #4]
   d4f1e:	f7ff fc23 	bl	d4768 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f22:	6823      	ldr	r3, [r4, #0]
   d4f24:	6858      	ldr	r0, [r3, #4]
   d4f26:	f7ff fc27 	bl	d4778 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f2a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f2c:	2300      	movs	r3, #0
   d4f2e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f30:	b128      	cbz	r0, d4f3e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f32:	f7ff ffcd 	bl	d4ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f36:	6820      	ldr	r0, [r4, #0]
   d4f38:	b108      	cbz	r0, d4f3e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f3a:	f7ff ffc9 	bl	d4ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f3e:	4620      	mov	r0, r4
   d4f40:	bd10      	pop	{r4, pc}

000d4f42 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f42:	b538      	push	{r3, r4, r5, lr}
   d4f44:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f46:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f4a:	b108      	cbz	r0, d4f50 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f4c:	f7ff f8a7 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f50:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f54:	b108      	cbz	r0, d4f5a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f56:	f7ff fc1f 	bl	d4798 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f5a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f5e:	b135      	cbz	r5, d4f6e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f60:	4628      	mov	r0, r5
   d4f62:	f7ff ffd0 	bl	d4f06 <_ZN6ThreadD1Ev>
   d4f66:	2104      	movs	r1, #4
   d4f68:	4628      	mov	r0, r5
   d4f6a:	f000 fce8 	bl	d593e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f6e:	6820      	ldr	r0, [r4, #0]
   d4f70:	b108      	cbz	r0, d4f76 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f72:	f7ff ffc3 	bl	d4efc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f76:	4620      	mov	r0, r4
   d4f78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f7c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4b04      	ldr	r3, [pc, #16]	; (d4f90 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f80:	4604      	mov	r4, r0
   d4f82:	f840 3b08 	str.w	r3, [r0], #8
   d4f86:	f7ff ffdc 	bl	d4f42 <_ZN5spark11MeshPublishD1Ev>
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	bd10      	pop	{r4, pc}
   d4f8e:	bf00      	nop
   d4f90:	000d690c 	.word	0x000d690c

000d4f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f94:	b538      	push	{r3, r4, r5, lr}
   d4f96:	4c0e      	ldr	r4, [pc, #56]	; (d4fd0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f98:	4b0e      	ldr	r3, [pc, #56]	; (d4fd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f9a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f9c:	2500      	movs	r5, #0
   d4f9e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4fa0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4fa4:	6063      	str	r3, [r4, #4]
   d4fa6:	60a5      	str	r5, [r4, #8]
   d4fa8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4fb0:	f7ff fbea 	bl	d4788 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4fb4:	4b08      	ldr	r3, [pc, #32]	; (d4fd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4fb6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4fbe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	4a06      	ldr	r2, [pc, #24]	; (d4fdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4fc4:	4906      	ldr	r1, [pc, #24]	; (d4fe0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4fca:	f000 bcb3 	b.w	d5934 <__aeabi_atexit>
   d4fce:	bf00      	nop
   d4fd0:	2003e3e0 	.word	0x2003e3e0
   d4fd4:	000d6940 	.word	0x000d6940
   d4fd8:	000d690c 	.word	0x000d690c
   d4fdc:	2003e3c0 	.word	0x2003e3c0
   d4fe0:	000d4f7d 	.word	0x000d4f7d

000d4fe4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fe4:	2300      	movs	r3, #0
   d4fe6:	461a      	mov	r2, r3
   d4fe8:	6840      	ldr	r0, [r0, #4]
   d4fea:	f7ff bd49 	b.w	d4a80 <network_connect>

000d4fee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fee:	2200      	movs	r2, #0
   d4ff0:	2102      	movs	r1, #2
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	f7ff bd54 	b.w	d4aa0 <network_disconnect>

000d4ff8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ff8:	2200      	movs	r2, #0
   d4ffa:	4611      	mov	r1, r2
   d4ffc:	6840      	ldr	r0, [r0, #4]
   d4ffe:	f7ff bd47 	b.w	d4a90 <network_connecting>

000d5002 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5002:	2200      	movs	r2, #0
   d5004:	4611      	mov	r1, r2
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff bd52 	b.w	d4ab0 <network_ready>

000d500c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d500c:	2300      	movs	r3, #0
   d500e:	461a      	mov	r2, r3
   d5010:	4619      	mov	r1, r3
   d5012:	6840      	ldr	r0, [r0, #4]
   d5014:	f7ff bd54 	b.w	d4ac0 <network_on>

000d5018 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5018:	2300      	movs	r3, #0
   d501a:	461a      	mov	r2, r3
   d501c:	4619      	mov	r1, r3
   d501e:	6840      	ldr	r0, [r0, #4]
   d5020:	f7ff bd56 	b.w	d4ad0 <network_off>

000d5024 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5024:	2200      	movs	r2, #0
   d5026:	f081 0101 	eor.w	r1, r1, #1
   d502a:	6840      	ldr	r0, [r0, #4]
   d502c:	f7ff bd58 	b.w	d4ae0 <network_listen>

000d5030 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5030:	2200      	movs	r2, #0
   d5032:	6840      	ldr	r0, [r0, #4]
   d5034:	f7ff bd64 	b.w	d4b00 <network_set_listen_timeout>

000d5038 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5038:	2200      	movs	r2, #0
   d503a:	4611      	mov	r1, r2
   d503c:	6840      	ldr	r0, [r0, #4]
   d503e:	f7ff bd67 	b.w	d4b10 <network_get_listen_timeout>

000d5042 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5042:	2200      	movs	r2, #0
   d5044:	4611      	mov	r1, r2
   d5046:	6840      	ldr	r0, [r0, #4]
   d5048:	f7ff bd52 	b.w	d4af0 <network_listening>

000d504c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d504c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5050:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5052:	b095      	sub	sp, #84	; 0x54
   d5054:	4616      	mov	r6, r2
   d5056:	460d      	mov	r5, r1
   d5058:	4607      	mov	r7, r0
    IPAddress addr;
   d505a:	f7ff fec5 	bl	d4de8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d505e:	4621      	mov	r1, r4
   d5060:	2220      	movs	r2, #32
   d5062:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5064:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5066:	f001 fae8 	bl	d663a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d506a:	2340      	movs	r3, #64	; 0x40
   d506c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d506e:	4621      	mov	r1, r4
   d5070:	466b      	mov	r3, sp
   d5072:	aa0c      	add	r2, sp, #48	; 0x30
   d5074:	4630      	mov	r0, r6
   d5076:	f7ff fc47 	bl	d4908 <netdb_getaddrinfo>
    if (!r) {
   d507a:	4604      	mov	r4, r0
   d507c:	2800      	cmp	r0, #0
   d507e:	d144      	bne.n	d510a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5080:	4602      	mov	r2, r0
   d5082:	2101      	movs	r1, #1
   d5084:	6868      	ldr	r0, [r5, #4]
   d5086:	f7ff fd13 	bl	d4ab0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d508a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d508c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d508e:	4622      	mov	r2, r4
   d5090:	6868      	ldr	r0, [r5, #4]
   d5092:	f7ff fd0d 	bl	d4ab0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5096:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5098:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d509a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d509c:	2e00      	cmp	r6, #0
   d509e:	d034      	beq.n	d510a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d50a0:	2900      	cmp	r1, #0
   d50a2:	d132      	bne.n	d510a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d50a4:	6873      	ldr	r3, [r6, #4]
   d50a6:	2b02      	cmp	r3, #2
   d50a8:	d002      	beq.n	d50b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d50aa:	2b0a      	cmp	r3, #10
   d50ac:	d009      	beq.n	d50c2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d50ae:	e02a      	b.n	d5106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d50b0:	f1b8 0f00 	cmp.w	r8, #0
   d50b4:	d027      	beq.n	d5106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d50b6:	6971      	ldr	r1, [r6, #20]
   d50b8:	4638      	mov	r0, r7
   d50ba:	3104      	adds	r1, #4
   d50bc:	f7ff fec1 	bl	d4e42 <_ZN9IPAddressaSEPKh>
   d50c0:	e020      	b.n	d5104 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d50c2:	f1b9 0f00 	cmp.w	r9, #0
   d50c6:	d01e      	beq.n	d5106 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d50c8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d50ca:	2211      	movs	r2, #17
   d50cc:	a801      	add	r0, sp, #4
   d50ce:	f001 fab4 	bl	d663a <memset>
                    a.v = 6;
   d50d2:	2306      	movs	r3, #6
   d50d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50d8:	ad01      	add	r5, sp, #4
   d50da:	f104 0308 	add.w	r3, r4, #8
   d50de:	3418      	adds	r4, #24
   d50e0:	6818      	ldr	r0, [r3, #0]
   d50e2:	6859      	ldr	r1, [r3, #4]
   d50e4:	462a      	mov	r2, r5
   d50e6:	c203      	stmia	r2!, {r0, r1}
   d50e8:	3308      	adds	r3, #8
   d50ea:	42a3      	cmp	r3, r4
   d50ec:	4615      	mov	r5, r2
   d50ee:	d1f7      	bne.n	d50e0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50f0:	a901      	add	r1, sp, #4
   d50f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50f4:	ad07      	add	r5, sp, #28
   d50f6:	f7ff fe85 	bl	d4e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50fc:	1d3c      	adds	r4, r7, #4
   d50fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5100:	682b      	ldr	r3, [r5, #0]
   d5102:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5104:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5106:	69f6      	ldr	r6, [r6, #28]
   d5108:	e7c8      	b.n	d509c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d510a:	9800      	ldr	r0, [sp, #0]
   d510c:	f7ff fbf4 	bl	d48f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5110:	4638      	mov	r0, r7
   d5112:	b015      	add	sp, #84	; 0x54
   d5114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5118 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5118:	4b02      	ldr	r3, [pc, #8]	; (d5124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d511a:	4a03      	ldr	r2, [pc, #12]	; (d5128 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d511c:	601a      	str	r2, [r3, #0]
   d511e:	2200      	movs	r2, #0
   d5120:	605a      	str	r2, [r3, #4]
   d5122:	4770      	bx	lr
   d5124:	2003e5b4 	.word	0x2003e5b4
   d5128:	000d6940 	.word	0x000d6940

000d512c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d512e:	4606      	mov	r6, r0
   d5130:	460d      	mov	r5, r1
   d5132:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5134:	2400      	movs	r4, #0
  while (size--) {
   d5136:	42bd      	cmp	r5, r7
   d5138:	d00c      	beq.n	d5154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d513a:	6833      	ldr	r3, [r6, #0]
   d513c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5140:	689b      	ldr	r3, [r3, #8]
   d5142:	4630      	mov	r0, r6
   d5144:	4798      	blx	r3
     if (chunk>=0)
   d5146:	2800      	cmp	r0, #0
   d5148:	db01      	blt.n	d514e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d514a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d514c:	e7f3      	b.n	d5136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d514e:	2c00      	cmp	r4, #0
   d5150:	bf08      	it	eq
   d5152:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5154:	4620      	mov	r0, r4
   d5156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5158 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5158:	b570      	push	{r4, r5, r6, lr}
   d515a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d515c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d515e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5160:	b149      	cbz	r1, d5176 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5162:	f001 fa9b 	bl	d669c <strlen>
   d5166:	682b      	ldr	r3, [r5, #0]
   d5168:	4602      	mov	r2, r0
   d516a:	4621      	mov	r1, r4
   d516c:	4628      	mov	r0, r5
   d516e:	68db      	ldr	r3, [r3, #12]
    }
   d5170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5174:	4718      	bx	r3
    }
   d5176:	bd70      	pop	{r4, r5, r6, pc}

000d5178 <_ZN5Print5printEPKc>:
   d5178:	b508      	push	{r3, lr}
   d517a:	f7ff ffed 	bl	d5158 <_ZN5Print5writeEPKc>
   d517e:	bd08      	pop	{r3, pc}

000d5180 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5180:	6803      	ldr	r3, [r0, #0]
   d5182:	689b      	ldr	r3, [r3, #8]
   d5184:	4718      	bx	r3

000d5186 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d5186:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5188:	f7ff ffe6 	bl	d5158 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d518c:	bd08      	pop	{r3, pc}

000d518e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d518e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5190:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5192:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5194:	f7ff fff4 	bl	d5180 <_ZN5Print5printEc>
  n += print('\n');
   d5198:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d519a:	4604      	mov	r4, r0
  n += print('\n');
   d519c:	4628      	mov	r0, r5
   d519e:	f7ff ffef 	bl	d5180 <_ZN5Print5printEc>
  return n;
}
   d51a2:	4420      	add	r0, r4
   d51a4:	bd38      	pop	{r3, r4, r5, pc}

000d51a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d51a6:	b538      	push	{r3, r4, r5, lr}
   d51a8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d51aa:	f7ff ffd5 	bl	d5158 <_ZN5Print5writeEPKc>
   d51ae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d51b0:	4628      	mov	r0, r5
   d51b2:	f7ff ffec 	bl	d518e <_ZN5Print7printlnEv>
  return n;
}
   d51b6:	4420      	add	r0, r4
   d51b8:	bd38      	pop	{r3, r4, r5, pc}

000d51ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d51ba:	b530      	push	{r4, r5, lr}
   d51bc:	b08b      	sub	sp, #44	; 0x2c
   d51be:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51c0:	2100      	movs	r1, #0
   d51c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51c6:	2a01      	cmp	r2, #1
   d51c8:	bf98      	it	ls
   d51ca:	220a      	movls	r2, #10
   d51cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d51d0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d51d4:	fb05 3312 	mls	r3, r5, r2, r3
   d51d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51dc:	2b09      	cmp	r3, #9
   d51de:	bf94      	ite	ls
   d51e0:	3330      	addls	r3, #48	; 0x30
   d51e2:	3337      	addhi	r3, #55	; 0x37
   d51e4:	b2db      	uxtb	r3, r3
   d51e6:	4621      	mov	r1, r4
   d51e8:	f804 3901 	strb.w	r3, [r4], #-1
   d51ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d51ee:	2d00      	cmp	r5, #0
   d51f0:	d1ee      	bne.n	d51d0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d51f2:	f7ff ffb1 	bl	d5158 <_ZN5Print5writeEPKc>
}
   d51f6:	b00b      	add	sp, #44	; 0x2c
   d51f8:	bd30      	pop	{r4, r5, pc}
	...

000d51fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d51fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5200:	ec57 6b10 	vmov	r6, r7, d0
   d5204:	4682      	mov	sl, r0
   d5206:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5208:	ee10 2a10 	vmov	r2, s0
   d520c:	463b      	mov	r3, r7
   d520e:	ee10 0a10 	vmov	r0, s0
   d5212:	4639      	mov	r1, r7
   d5214:	f001 f94a 	bl	d64ac <__aeabi_dcmpun>
   d5218:	b108      	cbz	r0, d521e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d521a:	494e      	ldr	r1, [pc, #312]	; (d5354 <_ZN5Print10printFloatEdh+0x158>)
   d521c:	e012      	b.n	d5244 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d521e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5226:	4b4c      	ldr	r3, [pc, #304]	; (d5358 <_ZN5Print10printFloatEdh+0x15c>)
   d5228:	4630      	mov	r0, r6
   d522a:	4649      	mov	r1, r9
   d522c:	f001 f93e 	bl	d64ac <__aeabi_dcmpun>
   d5230:	b968      	cbnz	r0, d524e <_ZN5Print10printFloatEdh+0x52>
   d5232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5236:	4b48      	ldr	r3, [pc, #288]	; (d5358 <_ZN5Print10printFloatEdh+0x15c>)
   d5238:	4630      	mov	r0, r6
   d523a:	4649      	mov	r1, r9
   d523c:	f001 f918 	bl	d6470 <__aeabi_dcmple>
   d5240:	b928      	cbnz	r0, d524e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5242:	4946      	ldr	r1, [pc, #280]	; (d535c <_ZN5Print10printFloatEdh+0x160>)
   d5244:	4650      	mov	r0, sl
   d5246:	f7ff ff87 	bl	d5158 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d524e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5252:	4b43      	ldr	r3, [pc, #268]	; (d5360 <_ZN5Print10printFloatEdh+0x164>)
   d5254:	4630      	mov	r0, r6
   d5256:	4639      	mov	r1, r7
   d5258:	f001 f91e 	bl	d6498 <__aeabi_dcmpgt>
   d525c:	b108      	cbz	r0, d5262 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d525e:	4941      	ldr	r1, [pc, #260]	; (d5364 <_ZN5Print10printFloatEdh+0x168>)
   d5260:	e7f0      	b.n	d5244 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5262:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5266:	4b40      	ldr	r3, [pc, #256]	; (d5368 <_ZN5Print10printFloatEdh+0x16c>)
   d5268:	4630      	mov	r0, r6
   d526a:	4639      	mov	r1, r7
   d526c:	f001 f8f6 	bl	d645c <__aeabi_dcmplt>
   d5270:	2800      	cmp	r0, #0
   d5272:	d1f4      	bne.n	d525e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5274:	2200      	movs	r2, #0
   d5276:	2300      	movs	r3, #0
   d5278:	4630      	mov	r0, r6
   d527a:	4639      	mov	r1, r7
   d527c:	f001 f8ee 	bl	d645c <__aeabi_dcmplt>
   d5280:	b140      	cbz	r0, d5294 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5282:	212d      	movs	r1, #45	; 0x2d
   d5284:	4650      	mov	r0, sl
   d5286:	f7ff ff7b 	bl	d5180 <_ZN5Print5printEc>
     number = -number;
   d528a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d528e:	4604      	mov	r4, r0
     number = -number;
   d5290:	461f      	mov	r7, r3
   d5292:	e000      	b.n	d5296 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5294:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5296:	4935      	ldr	r1, [pc, #212]	; (d536c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5298:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d529c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d529e:	fa5f f388 	uxtb.w	r3, r8
   d52a2:	429d      	cmp	r5, r3
   d52a4:	d906      	bls.n	d52b4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d52a6:	2200      	movs	r2, #0
   d52a8:	4b31      	ldr	r3, [pc, #196]	; (d5370 <_ZN5Print10printFloatEdh+0x174>)
   d52aa:	f000 ff8f 	bl	d61cc <__aeabi_ddiv>
   d52ae:	f108 0801 	add.w	r8, r8, #1
   d52b2:	e7f4      	b.n	d529e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d52b4:	4632      	mov	r2, r6
   d52b6:	463b      	mov	r3, r7
   d52b8:	f000 fcac 	bl	d5c14 <__adddf3>
   d52bc:	460f      	mov	r7, r1
   d52be:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d52c0:	f001 f932 	bl	d6528 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d52c4:	220a      	movs	r2, #10
   d52c6:	4601      	mov	r1, r0
   d52c8:	4680      	mov	r8, r0
   d52ca:	4650      	mov	r0, sl
   d52cc:	f7ff ff75 	bl	d51ba <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d52d0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d52d2:	b3e5      	cbz	r5, d534e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d52d4:	4640      	mov	r0, r8
   d52d6:	f000 fdd9 	bl	d5e8c <__aeabi_ui2d>
   d52da:	4602      	mov	r2, r0
   d52dc:	460b      	mov	r3, r1
   d52de:	4630      	mov	r0, r6
   d52e0:	4639      	mov	r1, r7
   d52e2:	f000 fc95 	bl	d5c10 <__aeabi_dsub>
   d52e6:	4606      	mov	r6, r0
   d52e8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52ea:	4650      	mov	r0, sl
   d52ec:	4921      	ldr	r1, [pc, #132]	; (d5374 <_ZN5Print10printFloatEdh+0x178>)
   d52ee:	f7ff ff33 	bl	d5158 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d52f2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d52f4:	2200      	movs	r2, #0
   d52f6:	4b1e      	ldr	r3, [pc, #120]	; (d5370 <_ZN5Print10printFloatEdh+0x174>)
   d52f8:	4630      	mov	r0, r6
   d52fa:	4639      	mov	r1, r7
   d52fc:	f000 fe3c 	bl	d5f78 <__aeabi_dmul>
   d5300:	4606      	mov	r6, r0
   d5302:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d5304:	f001 f8e8 	bl	d64d8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5308:	f1b0 0900 	subs.w	r9, r0, #0
   d530c:	da07      	bge.n	d531e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d530e:	212d      	movs	r1, #45	; 0x2d
   d5310:	4650      	mov	r0, sl
   d5312:	f7ff ff35 	bl	d5180 <_ZN5Print5printEc>
            val = -n;
   d5316:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d531a:	4680      	mov	r8, r0
   d531c:	e002      	b.n	d5324 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d531e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5320:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5324:	220a      	movs	r2, #10
   d5326:	4650      	mov	r0, sl
   d5328:	f7ff ff47 	bl	d51ba <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d532c:	4440      	add	r0, r8
   d532e:	4404      	add	r4, r0
    remainder -= toPrint;
   d5330:	4648      	mov	r0, r9
   d5332:	f000 fdbb 	bl	d5eac <__aeabi_i2d>
   d5336:	4602      	mov	r2, r0
   d5338:	460b      	mov	r3, r1
   d533a:	4630      	mov	r0, r6
   d533c:	4639      	mov	r1, r7
   d533e:	f000 fc67 	bl	d5c10 <__aeabi_dsub>
   d5342:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5344:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5348:	4606      	mov	r6, r0
   d534a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d534c:	d1d2      	bne.n	d52f4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d534e:	4620      	mov	r0, r4
   d5350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5354:	000d696c 	.word	0x000d696c
   d5358:	7fefffff 	.word	0x7fefffff
   d535c:	000d6976 	.word	0x000d6976
   d5360:	41efffff 	.word	0x41efffff
   d5364:	000d6970 	.word	0x000d6970
   d5368:	c1efffff 	.word	0xc1efffff
   d536c:	3fe00000 	.word	0x3fe00000
   d5370:	40240000 	.word	0x40240000
   d5374:	000d6974 	.word	0x000d6974

000d5378 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5378:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d537a:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d537c:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d537e:	f7ff ff3d 	bl	d51fc <_ZN5Print10printFloatEdh>
   d5382:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5384:	4628      	mov	r0, r5
   d5386:	f7ff ff02 	bl	d518e <_ZN5Print7printlnEv>
  return n;
}
   d538a:	4420      	add	r0, r4
   d538c:	bd38      	pop	{r3, r4, r5, pc}

000d538e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d538e:	b538      	push	{r3, r4, r5, lr}
   d5390:	4604      	mov	r4, r0
    return println((double)num, digits);
   d5392:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5396:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5398:	f000 fd9a 	bl	d5ed0 <__aeabi_f2d>
   d539c:	ec41 0b10 	vmov	d0, r0, r1
   d53a0:	4629      	mov	r1, r5
   d53a2:	4620      	mov	r0, r4
}
   d53a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d53a8:	f7ff bfe6 	b.w	d5378 <_ZN5Print7printlnEdi>

000d53ac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d53ac:	b510      	push	{r4, lr}
   d53ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53b0:	f7ff fbe6 	bl	d4b80 <_ZNSt14_Function_baseD1Ev>
   d53b4:	4620      	mov	r0, r4
   d53b6:	bd10      	pop	{r4, pc}

000d53b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53b8:	4803      	ldr	r0, [pc, #12]	; (d53c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d53ba:	4a04      	ldr	r2, [pc, #16]	; (d53cc <_GLOBAL__sub_I_RGB+0x14>)
   d53bc:	4904      	ldr	r1, [pc, #16]	; (d53d0 <_GLOBAL__sub_I_RGB+0x18>)
   d53be:	2300      	movs	r3, #0
   d53c0:	6083      	str	r3, [r0, #8]
   d53c2:	f000 bab7 	b.w	d5934 <__aeabi_atexit>
   d53c6:	bf00      	nop
   d53c8:	2003e5bc 	.word	0x2003e5bc
   d53cc:	2003e3c0 	.word	0x2003e3c0
   d53d0:	000d53ad 	.word	0x000d53ad

000d53d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d53d4:	b510      	push	{r4, lr}
   d53d6:	4604      	mov	r4, r0
{
    _spi = spi;
   d53d8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d53da:	4608      	mov	r0, r1
   d53dc:	f7ff fa9c 	bl	d4918 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d53e0:	2300      	movs	r3, #0
   d53e2:	6063      	str	r3, [r4, #4]
}
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d53e8:	7800      	ldrb	r0, [r0, #0]
   d53ea:	f7ff ba9d 	b.w	d4928 <HAL_SPI_Is_Enabled>

000d53ee <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d53ee:	b510      	push	{r4, lr}
   d53f0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d53f2:	6800      	ldr	r0, [r0, #0]
   d53f4:	b118      	cbz	r0, d53fe <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d53f6:	f7ff fb9b 	bl	d4b30 <free>
            wakeupSource_ = nullptr;
   d53fa:	2300      	movs	r3, #0
   d53fc:	6023      	str	r3, [r4, #0]
   d53fe:	bd10      	pop	{r4, pc}

000d5400 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5400:	b510      	push	{r4, lr}
   d5402:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5404:	f7ff fff3 	bl	d53ee <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5408:	4620      	mov	r0, r4
   d540a:	bd10      	pop	{r4, pc}

000d540c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d540c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d540e:	4c09      	ldr	r4, [pc, #36]	; (d5434 <_GLOBAL__sub_I_System+0x28>)
   d5410:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5412:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5416:	6020      	str	r0, [r4, #0]
   d5418:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d541a:	71a0      	strb	r0, [r4, #6]
   d541c:	8120      	strh	r0, [r4, #8]
   d541e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5420:	f7ff fb02 	bl	d4a28 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5424:	4620      	mov	r0, r4
   d5426:	4a04      	ldr	r2, [pc, #16]	; (d5438 <_GLOBAL__sub_I_System+0x2c>)
   d5428:	4904      	ldr	r1, [pc, #16]	; (d543c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d542a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d542e:	f000 ba81 	b.w	d5934 <__aeabi_atexit>
   d5432:	bf00      	nop
   d5434:	2003e5cc 	.word	0x2003e5cc
   d5438:	2003e3c0 	.word	0x2003e3c0
   d543c:	000d5401 	.word	0x000d5401

000d5440 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5440:	4b02      	ldr	r3, [pc, #8]	; (d544c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5442:	681a      	ldr	r2, [r3, #0]
   d5444:	4b02      	ldr	r3, [pc, #8]	; (d5450 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5446:	601a      	str	r2, [r3, #0]
   d5448:	4770      	bx	lr
   d544a:	bf00      	nop
   d544c:	2003e358 	.word	0x2003e358
   d5450:	2003e5d8 	.word	0x2003e5d8

000d5454 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5454:	4770      	bx	lr

000d5456 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5456:	7441      	strb	r1, [r0, #17]
   d5458:	4770      	bx	lr

000d545a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d545a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d545c:	7c00      	ldrb	r0, [r0, #16]
   d545e:	f7ff faa3 	bl	d49a8 <HAL_USART_Available_Data_For_Write>
}
   d5462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5466:	bd08      	pop	{r3, pc}

000d5468 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5468:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d546a:	7c00      	ldrb	r0, [r0, #16]
   d546c:	f7ff fa74 	bl	d4958 <HAL_USART_Available_Data>
}
   d5470:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5474:	bd08      	pop	{r3, pc}

000d5476 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5476:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5478:	7c00      	ldrb	r0, [r0, #16]
   d547a:	f7ff fa7d 	bl	d4978 <HAL_USART_Peek_Data>
}
   d547e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5482:	bf28      	it	cs
   d5484:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5488:	bd08      	pop	{r3, pc}

000d548a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d548a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d548c:	7c00      	ldrb	r0, [r0, #16]
   d548e:	f7ff fa6b 	bl	d4968 <HAL_USART_Read_Data>
}
   d5492:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5496:	bf28      	it	cs
   d5498:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d549c:	bd08      	pop	{r3, pc}

000d549e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d549e:	7c00      	ldrb	r0, [r0, #16]
   d54a0:	f7ff ba72 	b.w	d4988 <HAL_USART_Flush_Data>

000d54a4 <_ZN11USARTSerialD0Ev>:
   d54a4:	b510      	push	{r4, lr}
   d54a6:	2114      	movs	r1, #20
   d54a8:	4604      	mov	r4, r0
   d54aa:	f000 fa48 	bl	d593e <_ZdlPvj>
   d54ae:	4620      	mov	r0, r4
   d54b0:	bd10      	pop	{r4, pc}

000d54b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d54b6:	4604      	mov	r4, r0
   d54b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54ba:	b925      	cbnz	r5, d54c6 <_ZN11USARTSerial5writeEh+0x14>
   d54bc:	7c00      	ldrb	r0, [r0, #16]
   d54be:	f7ff fa73 	bl	d49a8 <HAL_USART_Available_Data_For_Write>
   d54c2:	2800      	cmp	r0, #0
   d54c4:	dd05      	ble.n	d54d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54c6:	4631      	mov	r1, r6
   d54c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54ce:	f7ff ba3b 	b.w	d4948 <HAL_USART_Write_Data>
  }
  return 0;
}
   d54d2:	4628      	mov	r0, r5
   d54d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54d8:	b510      	push	{r4, lr}
   d54da:	4604      	mov	r4, r0
   d54dc:	4608      	mov	r0, r1
   d54de:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54e0:	2200      	movs	r2, #0
   d54e2:	6062      	str	r2, [r4, #4]
   d54e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54e8:	60a2      	str	r2, [r4, #8]
   d54ea:	4a05      	ldr	r2, [pc, #20]	; (d5500 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54ec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54ee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54f0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54f4:	461a      	mov	r2, r3
   d54f6:	f7ff fa1f 	bl	d4938 <HAL_USART_Init>
}
   d54fa:	4620      	mov	r0, r4
   d54fc:	bd10      	pop	{r4, pc}
   d54fe:	bf00      	nop
   d5500:	000d69ac 	.word	0x000d69ac

000d5504 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5504:	7c00      	ldrb	r0, [r0, #16]
   d5506:	f7ff ba47 	b.w	d4998 <HAL_USART_Is_Enabled>
	...

000d550c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d550c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d550e:	4d0c      	ldr	r5, [pc, #48]	; (d5540 <_Z22__fetch_global_Serial1v+0x34>)
   d5510:	6829      	ldr	r1, [r5, #0]
   d5512:	f011 0401 	ands.w	r4, r1, #1
   d5516:	d111      	bne.n	d553c <_Z22__fetch_global_Serial1v+0x30>
   d5518:	4628      	mov	r0, r5
   d551a:	f7fe fdc2 	bl	d40a2 <__cxa_guard_acquire>
   d551e:	b168      	cbz	r0, d553c <_Z22__fetch_global_Serial1v+0x30>
   d5520:	4a08      	ldr	r2, [pc, #32]	; (d5544 <_Z22__fetch_global_Serial1v+0x38>)
   d5522:	4b09      	ldr	r3, [pc, #36]	; (d5548 <_Z22__fetch_global_Serial1v+0x3c>)
   d5524:	4809      	ldr	r0, [pc, #36]	; (d554c <_Z22__fetch_global_Serial1v+0x40>)
   d5526:	4621      	mov	r1, r4
   d5528:	f7ff ffd6 	bl	d54d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d552c:	4628      	mov	r0, r5
   d552e:	f7fe fdbd 	bl	d40ac <__cxa_guard_release>
   d5532:	4a07      	ldr	r2, [pc, #28]	; (d5550 <_Z22__fetch_global_Serial1v+0x44>)
   d5534:	4907      	ldr	r1, [pc, #28]	; (d5554 <_Z22__fetch_global_Serial1v+0x48>)
   d5536:	4805      	ldr	r0, [pc, #20]	; (d554c <_Z22__fetch_global_Serial1v+0x40>)
   d5538:	f000 f9fc 	bl	d5934 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d553c:	4803      	ldr	r0, [pc, #12]	; (d554c <_Z22__fetch_global_Serial1v+0x40>)
   d553e:	bd38      	pop	{r3, r4, r5, pc}
   d5540:	2003e674 	.word	0x2003e674
   d5544:	2003e678 	.word	0x2003e678
   d5548:	2003e5f0 	.word	0x2003e5f0
   d554c:	2003e5dc 	.word	0x2003e5dc
   d5550:	2003e3c0 	.word	0x2003e3c0
   d5554:	000d5455 	.word	0x000d5455

000d5558 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5558:	7441      	strb	r1, [r0, #17]
   d555a:	4770      	bx	lr

000d555c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d555c:	4770      	bx	lr

000d555e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d555e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5560:	2100      	movs	r1, #0
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	f7ff fa48 	bl	d49f8 <HAL_USB_USART_Receive_Data>
}
   d5568:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d556c:	bf28      	it	cs
   d556e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5572:	bd08      	pop	{r3, pc}

000d5574 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5574:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5576:	2101      	movs	r1, #1
   d5578:	7c00      	ldrb	r0, [r0, #16]
   d557a:	f7ff fa3d 	bl	d49f8 <HAL_USB_USART_Receive_Data>
}
   d557e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5582:	bf28      	it	cs
   d5584:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5588:	bd08      	pop	{r3, pc}

000d558a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d558a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d558c:	7c00      	ldrb	r0, [r0, #16]
   d558e:	f7ff fa2b 	bl	d49e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5596:	bd08      	pop	{r3, pc}

000d5598 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5598:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d559a:	7c00      	ldrb	r0, [r0, #16]
   d559c:	f7ff fa1c 	bl	d49d8 <HAL_USB_USART_Available_Data>
}
   d55a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55a4:	bd08      	pop	{r3, pc}

000d55a6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d55a6:	7c00      	ldrb	r0, [r0, #16]
   d55a8:	f7ff ba36 	b.w	d4a18 <HAL_USB_USART_Flush_Data>

000d55ac <_ZN9USBSerialD0Ev>:
   d55ac:	b510      	push	{r4, lr}
   d55ae:	2114      	movs	r1, #20
   d55b0:	4604      	mov	r4, r0
   d55b2:	f000 f9c4 	bl	d593e <_ZdlPvj>
   d55b6:	4620      	mov	r0, r4
   d55b8:	bd10      	pop	{r4, pc}

000d55ba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55ba:	b538      	push	{r3, r4, r5, lr}
   d55bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55be:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55c2:	f7ff fa11 	bl	d49e8 <HAL_USB_USART_Available_Data_For_Write>
   d55c6:	2800      	cmp	r0, #0
   d55c8:	dc01      	bgt.n	d55ce <_ZN9USBSerial5writeEh+0x14>
   d55ca:	7c60      	ldrb	r0, [r4, #17]
   d55cc:	b128      	cbz	r0, d55da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d55ce:	4629      	mov	r1, r5
   d55d0:	7c20      	ldrb	r0, [r4, #16]
   d55d2:	f7ff fa19 	bl	d4a08 <HAL_USB_USART_Send_Data>
   d55d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d55da:	bd38      	pop	{r3, r4, r5, pc}

000d55dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55dc:	b510      	push	{r4, lr}
   d55de:	4604      	mov	r4, r0
   d55e0:	2300      	movs	r3, #0
   d55e2:	6063      	str	r3, [r4, #4]
   d55e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55e8:	60a3      	str	r3, [r4, #8]
   d55ea:	4b05      	ldr	r3, [pc, #20]	; (d5600 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d55ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d55f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d55f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d55f6:	4611      	mov	r1, r2
   d55f8:	f7ff f9de 	bl	d49b8 <HAL_USB_USART_Init>
}
   d55fc:	4620      	mov	r0, r4
   d55fe:	bd10      	pop	{r4, pc}
   d5600:	000d69dc 	.word	0x000d69dc

000d5604 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5604:	2200      	movs	r2, #0
   d5606:	7c00      	ldrb	r0, [r0, #16]
   d5608:	f7ff b9de 	b.w	d49c8 <HAL_USB_USART_Begin>

000d560c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d560c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d560e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5610:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5612:	2100      	movs	r1, #0
   d5614:	f001 f811 	bl	d663a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5618:	4620      	mov	r0, r4
   d561a:	bd10      	pop	{r4, pc}

000d561c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d561c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d561e:	4d0e      	ldr	r5, [pc, #56]	; (d5658 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5620:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5622:	a801      	add	r0, sp, #4
   d5624:	f7ff fff2 	bl	d560c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5628:	6829      	ldr	r1, [r5, #0]
   d562a:	f011 0401 	ands.w	r4, r1, #1
   d562e:	d110      	bne.n	d5652 <_Z16_fetch_usbserialv+0x36>
   d5630:	4628      	mov	r0, r5
   d5632:	f7fe fd36 	bl	d40a2 <__cxa_guard_acquire>
   d5636:	b160      	cbz	r0, d5652 <_Z16_fetch_usbserialv+0x36>
   d5638:	aa01      	add	r2, sp, #4
   d563a:	4621      	mov	r1, r4
   d563c:	4807      	ldr	r0, [pc, #28]	; (d565c <_Z16_fetch_usbserialv+0x40>)
   d563e:	f7ff ffcd 	bl	d55dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5642:	4628      	mov	r0, r5
   d5644:	f7fe fd32 	bl	d40ac <__cxa_guard_release>
   d5648:	4a05      	ldr	r2, [pc, #20]	; (d5660 <_Z16_fetch_usbserialv+0x44>)
   d564a:	4906      	ldr	r1, [pc, #24]	; (d5664 <_Z16_fetch_usbserialv+0x48>)
   d564c:	4803      	ldr	r0, [pc, #12]	; (d565c <_Z16_fetch_usbserialv+0x40>)
   d564e:	f000 f971 	bl	d5934 <__aeabi_atexit>
	return _usbserial;
}
   d5652:	4802      	ldr	r0, [pc, #8]	; (d565c <_Z16_fetch_usbserialv+0x40>)
   d5654:	b007      	add	sp, #28
   d5656:	bd30      	pop	{r4, r5, pc}
   d5658:	2003e6fc 	.word	0x2003e6fc
   d565c:	2003e700 	.word	0x2003e700
   d5660:	2003e3c0 	.word	0x2003e3c0
   d5664:	000d555d 	.word	0x000d555d

000d5668 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5668:	2200      	movs	r2, #0
   d566a:	4611      	mov	r1, r2
   d566c:	6840      	ldr	r0, [r0, #4]
   d566e:	f7ff ba1f 	b.w	d4ab0 <network_ready>

000d5672 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5672:	2200      	movs	r2, #0
   d5674:	4611      	mov	r1, r2
   d5676:	6840      	ldr	r0, [r0, #4]
   d5678:	f7ff ba3a 	b.w	d4af0 <network_listening>

000d567c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d567c:	2200      	movs	r2, #0
   d567e:	4611      	mov	r1, r2
   d5680:	6840      	ldr	r0, [r0, #4]
   d5682:	f7ff ba45 	b.w	d4b10 <network_get_listen_timeout>

000d5686 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5686:	2200      	movs	r2, #0
   d5688:	6840      	ldr	r0, [r0, #4]
   d568a:	f7ff ba39 	b.w	d4b00 <network_set_listen_timeout>

000d568e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d568e:	2200      	movs	r2, #0
   d5690:	f081 0101 	eor.w	r1, r1, #1
   d5694:	6840      	ldr	r0, [r0, #4]
   d5696:	f7ff ba23 	b.w	d4ae0 <network_listen>

000d569a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d569a:	2300      	movs	r3, #0
   d569c:	461a      	mov	r2, r3
   d569e:	4619      	mov	r1, r3
   d56a0:	6840      	ldr	r0, [r0, #4]
   d56a2:	f7ff ba15 	b.w	d4ad0 <network_off>

000d56a6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56a6:	2300      	movs	r3, #0
   d56a8:	461a      	mov	r2, r3
   d56aa:	4619      	mov	r1, r3
   d56ac:	6840      	ldr	r0, [r0, #4]
   d56ae:	f7ff ba07 	b.w	d4ac0 <network_on>

000d56b2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56b2:	2200      	movs	r2, #0
   d56b4:	4611      	mov	r1, r2
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff b9ea 	b.w	d4a90 <network_connecting>

000d56bc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	2102      	movs	r1, #2
   d56c0:	6840      	ldr	r0, [r0, #4]
   d56c2:	f7ff b9ed 	b.w	d4aa0 <network_disconnect>

000d56c6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56c6:	2300      	movs	r3, #0
   d56c8:	461a      	mov	r2, r3
   d56ca:	6840      	ldr	r0, [r0, #4]
   d56cc:	f7ff b9d8 	b.w	d4a80 <network_connect>

000d56d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d56d0:	4b02      	ldr	r3, [pc, #8]	; (d56dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d56d2:	2204      	movs	r2, #4
   d56d4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d56d6:	4a02      	ldr	r2, [pc, #8]	; (d56e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d56d8:	601a      	str	r2, [r3, #0]
   d56da:	4770      	bx	lr
   d56dc:	2003e714 	.word	0x2003e714
   d56e0:	000d6a0c 	.word	0x000d6a0c

000d56e4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d56e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56e6:	4b0c      	ldr	r3, [pc, #48]	; (d5718 <serialEventRun+0x34>)
   d56e8:	b133      	cbz	r3, d56f8 <serialEventRun+0x14>
   d56ea:	f7ff ff97 	bl	d561c <_Z16_fetch_usbserialv>
   d56ee:	6803      	ldr	r3, [r0, #0]
   d56f0:	691b      	ldr	r3, [r3, #16]
   d56f2:	4798      	blx	r3
   d56f4:	2800      	cmp	r0, #0
   d56f6:	dc09      	bgt.n	d570c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d56f8:	4b08      	ldr	r3, [pc, #32]	; (d571c <serialEventRun+0x38>)
   d56fa:	b163      	cbz	r3, d5716 <serialEventRun+0x32>
   d56fc:	f7ff ff06 	bl	d550c <_Z22__fetch_global_Serial1v>
   d5700:	6803      	ldr	r3, [r0, #0]
   d5702:	691b      	ldr	r3, [r3, #16]
   d5704:	4798      	blx	r3
   d5706:	2800      	cmp	r0, #0
   d5708:	dc03      	bgt.n	d5712 <serialEventRun+0x2e>
   d570a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d570c:	f3af 8000 	nop.w
   d5710:	e7f2      	b.n	d56f8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5712:	f3af 8000 	nop.w
   d5716:	bd08      	pop	{r3, pc}
	...

000d5720 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5720:	b508      	push	{r3, lr}
	serialEventRun();
   d5722:	f7ff ffdf 	bl	d56e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5726:	f7ff f847 	bl	d47b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d572a:	4b01      	ldr	r3, [pc, #4]	; (d5730 <_post_loop+0x10>)
   d572c:	6018      	str	r0, [r3, #0]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	2003e730 	.word	0x2003e730

000d5734 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5734:	4802      	ldr	r0, [pc, #8]	; (d5740 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5736:	4a03      	ldr	r2, [pc, #12]	; (d5744 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5738:	4903      	ldr	r1, [pc, #12]	; (d5748 <_Z33system_initialize_user_backup_ramv+0x14>)
   d573a:	1a12      	subs	r2, r2, r0
   d573c:	f000 bf72 	b.w	d6624 <memcpy>
   d5740:	2003f400 	.word	0x2003f400
   d5744:	2003f404 	.word	0x2003f404
   d5748:	000d6ae0 	.word	0x000d6ae0

000d574c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d574c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d574e:	2300      	movs	r3, #0
   d5750:	9300      	str	r3, [sp, #0]
   d5752:	461a      	mov	r2, r3
   d5754:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5758:	f7ff f980 	bl	d4a5c <system_ctrl_set_result>
}
   d575c:	b003      	add	sp, #12
   d575e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5764 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5764:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5766:	8843      	ldrh	r3, [r0, #2]
   d5768:	2b0a      	cmp	r3, #10
   d576a:	d008      	beq.n	d577e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d576c:	2b50      	cmp	r3, #80	; 0x50
   d576e:	d109      	bne.n	d5784 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5770:	4b09      	ldr	r3, [pc, #36]	; (d5798 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5772:	681b      	ldr	r3, [r3, #0]
   d5774:	b13b      	cbz	r3, d5786 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5776:	b003      	add	sp, #12
   d5778:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d577c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d577e:	f7ff ffe5 	bl	d574c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5782:	e006      	b.n	d5792 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5784:	2300      	movs	r3, #0
   d5786:	9300      	str	r3, [sp, #0]
   d5788:	461a      	mov	r2, r3
   d578a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d578e:	f7ff f965 	bl	d4a5c <system_ctrl_set_result>
        break;
    }
}
   d5792:	b003      	add	sp, #12
   d5794:	f85d fb04 	ldr.w	pc, [sp], #4
   d5798:	2003e71c 	.word	0x2003e71c

000d579c <module_user_init_hook>:

void module_user_init_hook()
{
   d579c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d579e:	4c10      	ldr	r4, [pc, #64]	; (d57e0 <module_user_init_hook+0x44>)
   d57a0:	4d10      	ldr	r5, [pc, #64]	; (d57e4 <module_user_init_hook+0x48>)
   d57a2:	6823      	ldr	r3, [r4, #0]
   d57a4:	42ab      	cmp	r3, r5
   d57a6:	4b10      	ldr	r3, [pc, #64]	; (d57e8 <module_user_init_hook+0x4c>)
   d57a8:	bf0c      	ite	eq
   d57aa:	2201      	moveq	r2, #1
   d57ac:	2200      	movne	r2, #0
   d57ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d57b0:	d002      	beq.n	d57b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d57b2:	f7ff ffbf 	bl	d5734 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d57b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57b8:	f7fe fff6 	bl	d47a8 <HAL_RNG_GetRandomNumber>
   d57bc:	4604      	mov	r4, r0
    srand(seed);
   d57be:	f000 ff45 	bl	d664c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57c2:	4b0a      	ldr	r3, [pc, #40]	; (d57ec <module_user_init_hook+0x50>)
   d57c4:	b113      	cbz	r3, d57cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d57c6:	4620      	mov	r0, r4
   d57c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57cc:	2100      	movs	r1, #0
   d57ce:	4807      	ldr	r0, [pc, #28]	; (d57ec <module_user_init_hook+0x50>)
   d57d0:	f7ff f94e 	bl	d4a70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57d4:	2100      	movs	r1, #0
   d57d6:	4806      	ldr	r0, [pc, #24]	; (d57f0 <module_user_init_hook+0x54>)
}
   d57d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57dc:	f7ff b934 	b.w	d4a48 <system_ctrl_set_app_request_handler>
   d57e0:	2003f400 	.word	0x2003f400
   d57e4:	9a271c1e 	.word	0x9a271c1e
   d57e8:	2003e720 	.word	0x2003e720
   d57ec:	00000000 	.word	0x00000000
   d57f0:	000d5765 	.word	0x000d5765

000d57f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d57f4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d57f6:	4e18      	ldr	r6, [pc, #96]	; (d5858 <pinAvailable+0x64>)
   d57f8:	6831      	ldr	r1, [r6, #0]
   d57fa:	f011 0501 	ands.w	r5, r1, #1
   d57fe:	4604      	mov	r4, r0
   d5800:	d10a      	bne.n	d5818 <pinAvailable+0x24>
   d5802:	4630      	mov	r0, r6
   d5804:	f7fe fc4d 	bl	d40a2 <__cxa_guard_acquire>
   d5808:	b130      	cbz	r0, d5818 <pinAvailable+0x24>
   d580a:	4629      	mov	r1, r5
   d580c:	4813      	ldr	r0, [pc, #76]	; (d585c <pinAvailable+0x68>)
   d580e:	f7ff fde1 	bl	d53d4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5812:	4630      	mov	r0, r6
   d5814:	f7fe fc4a 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5818:	4810      	ldr	r0, [pc, #64]	; (d585c <pinAvailable+0x68>)
   d581a:	f7ff fde5 	bl	d53e8 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d581e:	b128      	cbz	r0, d582c <pinAvailable+0x38>
   d5820:	f1a4 030b 	sub.w	r3, r4, #11
   d5824:	2b02      	cmp	r3, #2
   d5826:	d801      	bhi.n	d582c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5828:	2000      	movs	r0, #0
   d582a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d582c:	f000 f85c 	bl	d58e8 <_Z19__fetch_global_Wirev>
   d5830:	f7ff fa72 	bl	d4d18 <_ZN7TwoWire9isEnabledEv>
   d5834:	b108      	cbz	r0, d583a <pinAvailable+0x46>
   d5836:	2c01      	cmp	r4, #1
   d5838:	d9f6      	bls.n	d5828 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d583a:	f7ff fe67 	bl	d550c <_Z22__fetch_global_Serial1v>
   d583e:	f7ff fe61 	bl	d5504 <_ZN11USARTSerial9isEnabledEv>
   d5842:	b118      	cbz	r0, d584c <pinAvailable+0x58>
   d5844:	f1a4 0309 	sub.w	r3, r4, #9
   d5848:	2b01      	cmp	r3, #1
   d584a:	d9ed      	bls.n	d5828 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d584c:	2c23      	cmp	r4, #35	; 0x23
   d584e:	bf8c      	ite	hi
   d5850:	2000      	movhi	r0, #0
   d5852:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5854:	bd70      	pop	{r4, r5, r6, pc}
   d5856:	bf00      	nop
   d5858:	2003e724 	.word	0x2003e724
   d585c:	2003e728 	.word	0x2003e728

000d5860 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5860:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5862:	b538      	push	{r3, r4, r5, lr}
   d5864:	4604      	mov	r4, r0
   d5866:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5868:	d80a      	bhi.n	d5880 <pinMode+0x20>
   d586a:	29ff      	cmp	r1, #255	; 0xff
   d586c:	d008      	beq.n	d5880 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d586e:	f7ff ffc1 	bl	d57f4 <pinAvailable>
   d5872:	b128      	cbz	r0, d5880 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5874:	4629      	mov	r1, r5
   d5876:	4620      	mov	r0, r4
}
   d5878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d587c:	f7fe bfac 	b.w	d47d8 <HAL_Pin_Mode>
   d5880:	bd38      	pop	{r3, r4, r5, pc}

000d5882 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5882:	b538      	push	{r3, r4, r5, lr}
   d5884:	4604      	mov	r4, r0
   d5886:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5888:	f7fe ffae 	bl	d47e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d588c:	28ff      	cmp	r0, #255	; 0xff
   d588e:	d010      	beq.n	d58b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5890:	2806      	cmp	r0, #6
   d5892:	d804      	bhi.n	d589e <digitalWrite+0x1c>
   d5894:	234d      	movs	r3, #77	; 0x4d
   d5896:	fa23 f000 	lsr.w	r0, r3, r0
   d589a:	07c3      	lsls	r3, r0, #31
   d589c:	d409      	bmi.n	d58b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d589e:	4620      	mov	r0, r4
   d58a0:	f7ff ffa8 	bl	d57f4 <pinAvailable>
   d58a4:	b128      	cbz	r0, d58b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58a6:	4629      	mov	r1, r5
   d58a8:	4620      	mov	r0, r4
}
   d58aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58ae:	f7fe bfa3 	b.w	d47f8 <HAL_GPIO_Write>
   d58b2:	bd38      	pop	{r3, r4, r5, pc}

000d58b4 <_Z17acquireWireBufferv>:
   d58b4:	b570      	push	{r4, r5, r6, lr}
   d58b6:	4604      	mov	r4, r0
   d58b8:	2514      	movs	r5, #20
   d58ba:	462a      	mov	r2, r5
   d58bc:	4e09      	ldr	r6, [pc, #36]	; (d58e4 <_Z17acquireWireBufferv+0x30>)
   d58be:	2100      	movs	r1, #0
   d58c0:	f000 febb 	bl	d663a <memset>
   d58c4:	8025      	strh	r5, [r4, #0]
   d58c6:	2520      	movs	r5, #32
   d58c8:	4631      	mov	r1, r6
   d58ca:	60a5      	str	r5, [r4, #8]
   d58cc:	6125      	str	r5, [r4, #16]
   d58ce:	4628      	mov	r0, r5
   d58d0:	f000 f84f 	bl	d5972 <_ZnajRKSt9nothrow_t>
   d58d4:	4631      	mov	r1, r6
   d58d6:	6060      	str	r0, [r4, #4]
   d58d8:	4628      	mov	r0, r5
   d58da:	f000 f84a 	bl	d5972 <_ZnajRKSt9nothrow_t>
   d58de:	60e0      	str	r0, [r4, #12]
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd70      	pop	{r4, r5, r6, pc}
   d58e4:	000d6a38 	.word	0x000d6a38

000d58e8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d58e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58ea:	4d0e      	ldr	r5, [pc, #56]	; (d5924 <_Z19__fetch_global_Wirev+0x3c>)
   d58ec:	6829      	ldr	r1, [r5, #0]
   d58ee:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d58f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58f4:	d113      	bne.n	d591e <_Z19__fetch_global_Wirev+0x36>
   d58f6:	4628      	mov	r0, r5
   d58f8:	f7fe fbd3 	bl	d40a2 <__cxa_guard_acquire>
   d58fc:	b178      	cbz	r0, d591e <_Z19__fetch_global_Wirev+0x36>
   d58fe:	a801      	add	r0, sp, #4
   d5900:	f7ff ffd8 	bl	d58b4 <_Z17acquireWireBufferv>
   d5904:	aa01      	add	r2, sp, #4
   d5906:	4621      	mov	r1, r4
   d5908:	4807      	ldr	r0, [pc, #28]	; (d5928 <_Z19__fetch_global_Wirev+0x40>)
   d590a:	f7ff f9ad 	bl	d4c68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d590e:	4628      	mov	r0, r5
   d5910:	f7fe fbcc 	bl	d40ac <__cxa_guard_release>
   d5914:	4a05      	ldr	r2, [pc, #20]	; (d592c <_Z19__fetch_global_Wirev+0x44>)
   d5916:	4906      	ldr	r1, [pc, #24]	; (d5930 <_Z19__fetch_global_Wirev+0x48>)
   d5918:	4803      	ldr	r0, [pc, #12]	; (d5928 <_Z19__fetch_global_Wirev+0x40>)
   d591a:	f000 f80b 	bl	d5934 <__aeabi_atexit>
	return wire;
}
   d591e:	4802      	ldr	r0, [pc, #8]	; (d5928 <_Z19__fetch_global_Wirev+0x40>)
   d5920:	b007      	add	sp, #28
   d5922:	bd30      	pop	{r4, r5, pc}
   d5924:	2003e734 	.word	0x2003e734
   d5928:	2003e738 	.word	0x2003e738
   d592c:	2003e3c0 	.word	0x2003e3c0
   d5930:	000d4c11 	.word	0x000d4c11

000d5934 <__aeabi_atexit>:
   d5934:	460b      	mov	r3, r1
   d5936:	4601      	mov	r1, r0
   d5938:	4618      	mov	r0, r3
   d593a:	f000 be65 	b.w	d6608 <__cxa_atexit>

000d593e <_ZdlPvj>:
   d593e:	f7fe bbac 	b.w	d409a <_ZdlPv>
	...

000d5944 <_ZSt15get_new_handlerv>:
   d5944:	4b02      	ldr	r3, [pc, #8]	; (d5950 <_ZSt15get_new_handlerv+0xc>)
   d5946:	6818      	ldr	r0, [r3, #0]
   d5948:	f3bf 8f5f 	dmb	sy
   d594c:	4770      	bx	lr
   d594e:	bf00      	nop
   d5950:	2003e74c 	.word	0x2003e74c

000d5954 <_ZnwjRKSt9nothrow_t>:
   d5954:	b510      	push	{r4, lr}
   d5956:	2800      	cmp	r0, #0
   d5958:	bf14      	ite	ne
   d595a:	4604      	movne	r4, r0
   d595c:	2401      	moveq	r4, #1
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff f8de 	bl	d4b20 <malloc>
   d5964:	b920      	cbnz	r0, d5970 <_ZnwjRKSt9nothrow_t+0x1c>
   d5966:	f7ff ffed 	bl	d5944 <_ZSt15get_new_handlerv>
   d596a:	b108      	cbz	r0, d5970 <_ZnwjRKSt9nothrow_t+0x1c>
   d596c:	4780      	blx	r0
   d596e:	e7f6      	b.n	d595e <_ZnwjRKSt9nothrow_t+0xa>
   d5970:	bd10      	pop	{r4, pc}

000d5972 <_ZnajRKSt9nothrow_t>:
   d5972:	f7ff bfef 	b.w	d5954 <_ZnwjRKSt9nothrow_t>
	...

000d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5978:	4b24      	ldr	r3, [pc, #144]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d597a:	681a      	ldr	r2, [r3, #0]
   d597c:	07d0      	lsls	r0, r2, #31
   d597e:	bf5c      	itt	pl
   d5980:	2201      	movpl	r2, #1
   d5982:	601a      	strpl	r2, [r3, #0]
   d5984:	4b22      	ldr	r3, [pc, #136]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d1      	lsls	r1, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b20      	ldr	r3, [pc, #128]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d2      	lsls	r2, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4b1e      	ldr	r3, [pc, #120]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d599e:	681a      	ldr	r2, [r3, #0]
   d59a0:	07d0      	lsls	r0, r2, #31
   d59a2:	bf5c      	itt	pl
   d59a4:	2201      	movpl	r2, #1
   d59a6:	601a      	strpl	r2, [r3, #0]
   d59a8:	4b1c      	ldr	r3, [pc, #112]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d1      	lsls	r1, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b1a      	ldr	r3, [pc, #104]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d2      	lsls	r2, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b18      	ldr	r3, [pc, #96]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b16      	ldr	r3, [pc, #88]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b14      	ldr	r3, [pc, #80]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b12      	ldr	r3, [pc, #72]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d0      	lsls	r0, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b10      	ldr	r3, [pc, #64]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d1      	lsls	r1, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b0e      	ldr	r3, [pc, #56]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d2      	lsls	r2, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4770      	bx	lr
   d5a0a:	bf00      	nop
   d5a0c:	2003e77c 	.word	0x2003e77c
   d5a10:	2003e778 	.word	0x2003e778
   d5a14:	2003e774 	.word	0x2003e774
   d5a18:	2003e770 	.word	0x2003e770
   d5a1c:	2003e76c 	.word	0x2003e76c
   d5a20:	2003e768 	.word	0x2003e768
   d5a24:	2003e764 	.word	0x2003e764
   d5a28:	2003e760 	.word	0x2003e760
   d5a2c:	2003e75c 	.word	0x2003e75c
   d5a30:	2003e758 	.word	0x2003e758
   d5a34:	2003e754 	.word	0x2003e754
   d5a38:	2003e750 	.word	0x2003e750

000d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a3c:	4b18      	ldr	r3, [pc, #96]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d1      	lsls	r1, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b16      	ldr	r3, [pc, #88]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d2      	lsls	r2, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b14      	ldr	r3, [pc, #80]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d0      	lsls	r0, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b12      	ldr	r3, [pc, #72]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d1      	lsls	r1, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b10      	ldr	r3, [pc, #64]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d2      	lsls	r2, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b0e      	ldr	r3, [pc, #56]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d0      	lsls	r0, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b0c      	ldr	r3, [pc, #48]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d1      	lsls	r1, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b0a      	ldr	r3, [pc, #40]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d2      	lsls	r2, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4770      	bx	lr
   d5a9e:	bf00      	nop
   d5aa0:	2003e79c 	.word	0x2003e79c
   d5aa4:	2003e798 	.word	0x2003e798
   d5aa8:	2003e794 	.word	0x2003e794
   d5aac:	2003e790 	.word	0x2003e790
   d5ab0:	2003e78c 	.word	0x2003e78c
   d5ab4:	2003e788 	.word	0x2003e788
   d5ab8:	2003e784 	.word	0x2003e784
   d5abc:	2003e780 	.word	0x2003e780

000d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ac0:	4b18      	ldr	r3, [pc, #96]	; (d5b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d1      	lsls	r1, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b16      	ldr	r3, [pc, #88]	; (d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d2      	lsls	r2, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b14      	ldr	r3, [pc, #80]	; (d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d0      	lsls	r0, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b12      	ldr	r3, [pc, #72]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d1      	lsls	r1, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b10      	ldr	r3, [pc, #64]	; (d5b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d2      	lsls	r2, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b0e      	ldr	r3, [pc, #56]	; (d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d0      	lsls	r0, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b0c      	ldr	r3, [pc, #48]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d1      	lsls	r1, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b0a      	ldr	r3, [pc, #40]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d2      	lsls	r2, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4770      	bx	lr
   d5b22:	bf00      	nop
   d5b24:	2003e7bc 	.word	0x2003e7bc
   d5b28:	2003e7b8 	.word	0x2003e7b8
   d5b2c:	2003e7b4 	.word	0x2003e7b4
   d5b30:	2003e7b0 	.word	0x2003e7b0
   d5b34:	2003e7ac 	.word	0x2003e7ac
   d5b38:	2003e7a8 	.word	0x2003e7a8
   d5b3c:	2003e7a4 	.word	0x2003e7a4
   d5b40:	2003e7a0 	.word	0x2003e7a0

000d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b44:	4b24      	ldr	r3, [pc, #144]	; (d5bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d0      	lsls	r0, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b22      	ldr	r3, [pc, #136]	; (d5bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d1      	lsls	r1, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b20      	ldr	r3, [pc, #128]	; (d5be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d2      	lsls	r2, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b1e      	ldr	r3, [pc, #120]	; (d5be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d0      	lsls	r0, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b1c      	ldr	r3, [pc, #112]	; (d5be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d1      	lsls	r1, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4b1a      	ldr	r3, [pc, #104]	; (d5bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d2      	lsls	r2, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4b18      	ldr	r3, [pc, #96]	; (d5bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b8e:	681a      	ldr	r2, [r3, #0]
   d5b90:	07d0      	lsls	r0, r2, #31
   d5b92:	bf5c      	itt	pl
   d5b94:	2201      	movpl	r2, #1
   d5b96:	601a      	strpl	r2, [r3, #0]
   d5b98:	4b16      	ldr	r3, [pc, #88]	; (d5bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d1      	lsls	r1, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b14      	ldr	r3, [pc, #80]	; (d5bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d2      	lsls	r2, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b12      	ldr	r3, [pc, #72]	; (d5bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d0      	lsls	r0, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b10      	ldr	r3, [pc, #64]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d1      	lsls	r1, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b0e      	ldr	r3, [pc, #56]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d2      	lsls	r2, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4770      	bx	lr
   d5bd6:	bf00      	nop
   d5bd8:	2003e7ec 	.word	0x2003e7ec
   d5bdc:	2003e7e8 	.word	0x2003e7e8
   d5be0:	2003e7e4 	.word	0x2003e7e4
   d5be4:	2003e7e0 	.word	0x2003e7e0
   d5be8:	2003e7dc 	.word	0x2003e7dc
   d5bec:	2003e7d8 	.word	0x2003e7d8
   d5bf0:	2003e7d4 	.word	0x2003e7d4
   d5bf4:	2003e7d0 	.word	0x2003e7d0
   d5bf8:	2003e7cc 	.word	0x2003e7cc
   d5bfc:	2003e7c8 	.word	0x2003e7c8
   d5c00:	2003e7c4 	.word	0x2003e7c4
   d5c04:	2003e7c0 	.word	0x2003e7c0

000d5c08 <__aeabi_drsub>:
   d5c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5c0c:	e002      	b.n	d5c14 <__adddf3>
   d5c0e:	bf00      	nop

000d5c10 <__aeabi_dsub>:
   d5c10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5c14 <__adddf3>:
   d5c14:	b530      	push	{r4, r5, lr}
   d5c16:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5c1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5c1e:	ea94 0f05 	teq	r4, r5
   d5c22:	bf08      	it	eq
   d5c24:	ea90 0f02 	teqeq	r0, r2
   d5c28:	bf1f      	itttt	ne
   d5c2a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5c2e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5c32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5c36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c3a:	f000 80e2 	beq.w	d5e02 <__adddf3+0x1ee>
   d5c3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5c42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5c46:	bfb8      	it	lt
   d5c48:	426d      	neglt	r5, r5
   d5c4a:	dd0c      	ble.n	d5c66 <__adddf3+0x52>
   d5c4c:	442c      	add	r4, r5
   d5c4e:	ea80 0202 	eor.w	r2, r0, r2
   d5c52:	ea81 0303 	eor.w	r3, r1, r3
   d5c56:	ea82 0000 	eor.w	r0, r2, r0
   d5c5a:	ea83 0101 	eor.w	r1, r3, r1
   d5c5e:	ea80 0202 	eor.w	r2, r0, r2
   d5c62:	ea81 0303 	eor.w	r3, r1, r3
   d5c66:	2d36      	cmp	r5, #54	; 0x36
   d5c68:	bf88      	it	hi
   d5c6a:	bd30      	pophi	{r4, r5, pc}
   d5c6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c7c:	d002      	beq.n	d5c84 <__adddf3+0x70>
   d5c7e:	4240      	negs	r0, r0
   d5c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c90:	d002      	beq.n	d5c98 <__adddf3+0x84>
   d5c92:	4252      	negs	r2, r2
   d5c94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5c98:	ea94 0f05 	teq	r4, r5
   d5c9c:	f000 80a7 	beq.w	d5dee <__adddf3+0x1da>
   d5ca0:	f1a4 0401 	sub.w	r4, r4, #1
   d5ca4:	f1d5 0e20 	rsbs	lr, r5, #32
   d5ca8:	db0d      	blt.n	d5cc6 <__adddf3+0xb2>
   d5caa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5cae:	fa22 f205 	lsr.w	r2, r2, r5
   d5cb2:	1880      	adds	r0, r0, r2
   d5cb4:	f141 0100 	adc.w	r1, r1, #0
   d5cb8:	fa03 f20e 	lsl.w	r2, r3, lr
   d5cbc:	1880      	adds	r0, r0, r2
   d5cbe:	fa43 f305 	asr.w	r3, r3, r5
   d5cc2:	4159      	adcs	r1, r3
   d5cc4:	e00e      	b.n	d5ce4 <__adddf3+0xd0>
   d5cc6:	f1a5 0520 	sub.w	r5, r5, #32
   d5cca:	f10e 0e20 	add.w	lr, lr, #32
   d5cce:	2a01      	cmp	r2, #1
   d5cd0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5cd4:	bf28      	it	cs
   d5cd6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5cda:	fa43 f305 	asr.w	r3, r3, r5
   d5cde:	18c0      	adds	r0, r0, r3
   d5ce0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5ce4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ce8:	d507      	bpl.n	d5cfa <__adddf3+0xe6>
   d5cea:	f04f 0e00 	mov.w	lr, #0
   d5cee:	f1dc 0c00 	rsbs	ip, ip, #0
   d5cf2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5cf6:	eb6e 0101 	sbc.w	r1, lr, r1
   d5cfa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5cfe:	d31b      	bcc.n	d5d38 <__adddf3+0x124>
   d5d00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5d04:	d30c      	bcc.n	d5d20 <__adddf3+0x10c>
   d5d06:	0849      	lsrs	r1, r1, #1
   d5d08:	ea5f 0030 	movs.w	r0, r0, rrx
   d5d0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5d10:	f104 0401 	add.w	r4, r4, #1
   d5d14:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5d18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5d1c:	f080 809a 	bcs.w	d5e54 <__adddf3+0x240>
   d5d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5d24:	bf08      	it	eq
   d5d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d2a:	f150 0000 	adcs.w	r0, r0, #0
   d5d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d32:	ea41 0105 	orr.w	r1, r1, r5
   d5d36:	bd30      	pop	{r4, r5, pc}
   d5d38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5d3c:	4140      	adcs	r0, r0
   d5d3e:	eb41 0101 	adc.w	r1, r1, r1
   d5d42:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d46:	f1a4 0401 	sub.w	r4, r4, #1
   d5d4a:	d1e9      	bne.n	d5d20 <__adddf3+0x10c>
   d5d4c:	f091 0f00 	teq	r1, #0
   d5d50:	bf04      	itt	eq
   d5d52:	4601      	moveq	r1, r0
   d5d54:	2000      	moveq	r0, #0
   d5d56:	fab1 f381 	clz	r3, r1
   d5d5a:	bf08      	it	eq
   d5d5c:	3320      	addeq	r3, #32
   d5d5e:	f1a3 030b 	sub.w	r3, r3, #11
   d5d62:	f1b3 0220 	subs.w	r2, r3, #32
   d5d66:	da0c      	bge.n	d5d82 <__adddf3+0x16e>
   d5d68:	320c      	adds	r2, #12
   d5d6a:	dd08      	ble.n	d5d7e <__adddf3+0x16a>
   d5d6c:	f102 0c14 	add.w	ip, r2, #20
   d5d70:	f1c2 020c 	rsb	r2, r2, #12
   d5d74:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d78:	fa21 f102 	lsr.w	r1, r1, r2
   d5d7c:	e00c      	b.n	d5d98 <__adddf3+0x184>
   d5d7e:	f102 0214 	add.w	r2, r2, #20
   d5d82:	bfd8      	it	le
   d5d84:	f1c2 0c20 	rsble	ip, r2, #32
   d5d88:	fa01 f102 	lsl.w	r1, r1, r2
   d5d8c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d90:	bfdc      	itt	le
   d5d92:	ea41 010c 	orrle.w	r1, r1, ip
   d5d96:	4090      	lslle	r0, r2
   d5d98:	1ae4      	subs	r4, r4, r3
   d5d9a:	bfa2      	ittt	ge
   d5d9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5da0:	4329      	orrge	r1, r5
   d5da2:	bd30      	popge	{r4, r5, pc}
   d5da4:	ea6f 0404 	mvn.w	r4, r4
   d5da8:	3c1f      	subs	r4, #31
   d5daa:	da1c      	bge.n	d5de6 <__adddf3+0x1d2>
   d5dac:	340c      	adds	r4, #12
   d5dae:	dc0e      	bgt.n	d5dce <__adddf3+0x1ba>
   d5db0:	f104 0414 	add.w	r4, r4, #20
   d5db4:	f1c4 0220 	rsb	r2, r4, #32
   d5db8:	fa20 f004 	lsr.w	r0, r0, r4
   d5dbc:	fa01 f302 	lsl.w	r3, r1, r2
   d5dc0:	ea40 0003 	orr.w	r0, r0, r3
   d5dc4:	fa21 f304 	lsr.w	r3, r1, r4
   d5dc8:	ea45 0103 	orr.w	r1, r5, r3
   d5dcc:	bd30      	pop	{r4, r5, pc}
   d5dce:	f1c4 040c 	rsb	r4, r4, #12
   d5dd2:	f1c4 0220 	rsb	r2, r4, #32
   d5dd6:	fa20 f002 	lsr.w	r0, r0, r2
   d5dda:	fa01 f304 	lsl.w	r3, r1, r4
   d5dde:	ea40 0003 	orr.w	r0, r0, r3
   d5de2:	4629      	mov	r1, r5
   d5de4:	bd30      	pop	{r4, r5, pc}
   d5de6:	fa21 f004 	lsr.w	r0, r1, r4
   d5dea:	4629      	mov	r1, r5
   d5dec:	bd30      	pop	{r4, r5, pc}
   d5dee:	f094 0f00 	teq	r4, #0
   d5df2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5df6:	bf06      	itte	eq
   d5df8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5dfc:	3401      	addeq	r4, #1
   d5dfe:	3d01      	subne	r5, #1
   d5e00:	e74e      	b.n	d5ca0 <__adddf3+0x8c>
   d5e02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e06:	bf18      	it	ne
   d5e08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e0c:	d029      	beq.n	d5e62 <__adddf3+0x24e>
   d5e0e:	ea94 0f05 	teq	r4, r5
   d5e12:	bf08      	it	eq
   d5e14:	ea90 0f02 	teqeq	r0, r2
   d5e18:	d005      	beq.n	d5e26 <__adddf3+0x212>
   d5e1a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5e1e:	bf04      	itt	eq
   d5e20:	4619      	moveq	r1, r3
   d5e22:	4610      	moveq	r0, r2
   d5e24:	bd30      	pop	{r4, r5, pc}
   d5e26:	ea91 0f03 	teq	r1, r3
   d5e2a:	bf1e      	ittt	ne
   d5e2c:	2100      	movne	r1, #0
   d5e2e:	2000      	movne	r0, #0
   d5e30:	bd30      	popne	{r4, r5, pc}
   d5e32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5e36:	d105      	bne.n	d5e44 <__adddf3+0x230>
   d5e38:	0040      	lsls	r0, r0, #1
   d5e3a:	4149      	adcs	r1, r1
   d5e3c:	bf28      	it	cs
   d5e3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5e42:	bd30      	pop	{r4, r5, pc}
   d5e44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5e48:	bf3c      	itt	cc
   d5e4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5e4e:	bd30      	popcc	{r4, r5, pc}
   d5e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e5c:	f04f 0000 	mov.w	r0, #0
   d5e60:	bd30      	pop	{r4, r5, pc}
   d5e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e66:	bf1a      	itte	ne
   d5e68:	4619      	movne	r1, r3
   d5e6a:	4610      	movne	r0, r2
   d5e6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e70:	bf1c      	itt	ne
   d5e72:	460b      	movne	r3, r1
   d5e74:	4602      	movne	r2, r0
   d5e76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e7a:	bf06      	itte	eq
   d5e7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e80:	ea91 0f03 	teqeq	r1, r3
   d5e84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e88:	bd30      	pop	{r4, r5, pc}
   d5e8a:	bf00      	nop

000d5e8c <__aeabi_ui2d>:
   d5e8c:	f090 0f00 	teq	r0, #0
   d5e90:	bf04      	itt	eq
   d5e92:	2100      	moveq	r1, #0
   d5e94:	4770      	bxeq	lr
   d5e96:	b530      	push	{r4, r5, lr}
   d5e98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ea0:	f04f 0500 	mov.w	r5, #0
   d5ea4:	f04f 0100 	mov.w	r1, #0
   d5ea8:	e750      	b.n	d5d4c <__adddf3+0x138>
   d5eaa:	bf00      	nop

000d5eac <__aeabi_i2d>:
   d5eac:	f090 0f00 	teq	r0, #0
   d5eb0:	bf04      	itt	eq
   d5eb2:	2100      	moveq	r1, #0
   d5eb4:	4770      	bxeq	lr
   d5eb6:	b530      	push	{r4, r5, lr}
   d5eb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ebc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ec0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ec4:	bf48      	it	mi
   d5ec6:	4240      	negmi	r0, r0
   d5ec8:	f04f 0100 	mov.w	r1, #0
   d5ecc:	e73e      	b.n	d5d4c <__adddf3+0x138>
   d5ece:	bf00      	nop

000d5ed0 <__aeabi_f2d>:
   d5ed0:	0042      	lsls	r2, r0, #1
   d5ed2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ed6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5eda:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ede:	bf1f      	itttt	ne
   d5ee0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ee4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ee8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5eec:	4770      	bxne	lr
   d5eee:	f092 0f00 	teq	r2, #0
   d5ef2:	bf14      	ite	ne
   d5ef4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ef8:	4770      	bxeq	lr
   d5efa:	b530      	push	{r4, r5, lr}
   d5efc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5f00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f08:	e720      	b.n	d5d4c <__adddf3+0x138>
   d5f0a:	bf00      	nop

000d5f0c <__aeabi_ul2d>:
   d5f0c:	ea50 0201 	orrs.w	r2, r0, r1
   d5f10:	bf08      	it	eq
   d5f12:	4770      	bxeq	lr
   d5f14:	b530      	push	{r4, r5, lr}
   d5f16:	f04f 0500 	mov.w	r5, #0
   d5f1a:	e00a      	b.n	d5f32 <__aeabi_l2d+0x16>

000d5f1c <__aeabi_l2d>:
   d5f1c:	ea50 0201 	orrs.w	r2, r0, r1
   d5f20:	bf08      	it	eq
   d5f22:	4770      	bxeq	lr
   d5f24:	b530      	push	{r4, r5, lr}
   d5f26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5f2a:	d502      	bpl.n	d5f32 <__aeabi_l2d+0x16>
   d5f2c:	4240      	negs	r0, r0
   d5f2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5f3e:	f43f aedc 	beq.w	d5cfa <__adddf3+0xe6>
   d5f42:	f04f 0203 	mov.w	r2, #3
   d5f46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f4a:	bf18      	it	ne
   d5f4c:	3203      	addne	r2, #3
   d5f4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f52:	bf18      	it	ne
   d5f54:	3203      	addne	r2, #3
   d5f56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f5a:	f1c2 0320 	rsb	r3, r2, #32
   d5f5e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f62:	fa20 f002 	lsr.w	r0, r0, r2
   d5f66:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f6a:	ea40 000e 	orr.w	r0, r0, lr
   d5f6e:	fa21 f102 	lsr.w	r1, r1, r2
   d5f72:	4414      	add	r4, r2
   d5f74:	e6c1      	b.n	d5cfa <__adddf3+0xe6>
   d5f76:	bf00      	nop

000d5f78 <__aeabi_dmul>:
   d5f78:	b570      	push	{r4, r5, r6, lr}
   d5f7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f86:	bf1d      	ittte	ne
   d5f88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f8c:	ea94 0f0c 	teqne	r4, ip
   d5f90:	ea95 0f0c 	teqne	r5, ip
   d5f94:	f000 f8de 	bleq	d6154 <__aeabi_dmul+0x1dc>
   d5f98:	442c      	add	r4, r5
   d5f9a:	ea81 0603 	eor.w	r6, r1, r3
   d5f9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5fa2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5fa6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5faa:	bf18      	it	ne
   d5fac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5fb8:	d038      	beq.n	d602c <__aeabi_dmul+0xb4>
   d5fba:	fba0 ce02 	umull	ip, lr, r0, r2
   d5fbe:	f04f 0500 	mov.w	r5, #0
   d5fc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5fc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5fca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5fce:	f04f 0600 	mov.w	r6, #0
   d5fd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5fd6:	f09c 0f00 	teq	ip, #0
   d5fda:	bf18      	it	ne
   d5fdc:	f04e 0e01 	orrne.w	lr, lr, #1
   d5fe0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5fe4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5fe8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5fec:	d204      	bcs.n	d5ff8 <__aeabi_dmul+0x80>
   d5fee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5ff2:	416d      	adcs	r5, r5
   d5ff4:	eb46 0606 	adc.w	r6, r6, r6
   d5ff8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5ffc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6000:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6004:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6008:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d600c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6010:	bf88      	it	hi
   d6012:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6016:	d81e      	bhi.n	d6056 <__aeabi_dmul+0xde>
   d6018:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d601c:	bf08      	it	eq
   d601e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6022:	f150 0000 	adcs.w	r0, r0, #0
   d6026:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d602a:	bd70      	pop	{r4, r5, r6, pc}
   d602c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6030:	ea46 0101 	orr.w	r1, r6, r1
   d6034:	ea40 0002 	orr.w	r0, r0, r2
   d6038:	ea81 0103 	eor.w	r1, r1, r3
   d603c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6040:	bfc2      	ittt	gt
   d6042:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6046:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d604a:	bd70      	popgt	{r4, r5, r6, pc}
   d604c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6050:	f04f 0e00 	mov.w	lr, #0
   d6054:	3c01      	subs	r4, #1
   d6056:	f300 80ab 	bgt.w	d61b0 <__aeabi_dmul+0x238>
   d605a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d605e:	bfde      	ittt	le
   d6060:	2000      	movle	r0, #0
   d6062:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6066:	bd70      	pople	{r4, r5, r6, pc}
   d6068:	f1c4 0400 	rsb	r4, r4, #0
   d606c:	3c20      	subs	r4, #32
   d606e:	da35      	bge.n	d60dc <__aeabi_dmul+0x164>
   d6070:	340c      	adds	r4, #12
   d6072:	dc1b      	bgt.n	d60ac <__aeabi_dmul+0x134>
   d6074:	f104 0414 	add.w	r4, r4, #20
   d6078:	f1c4 0520 	rsb	r5, r4, #32
   d607c:	fa00 f305 	lsl.w	r3, r0, r5
   d6080:	fa20 f004 	lsr.w	r0, r0, r4
   d6084:	fa01 f205 	lsl.w	r2, r1, r5
   d6088:	ea40 0002 	orr.w	r0, r0, r2
   d608c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6094:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6098:	fa21 f604 	lsr.w	r6, r1, r4
   d609c:	eb42 0106 	adc.w	r1, r2, r6
   d60a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60a4:	bf08      	it	eq
   d60a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60aa:	bd70      	pop	{r4, r5, r6, pc}
   d60ac:	f1c4 040c 	rsb	r4, r4, #12
   d60b0:	f1c4 0520 	rsb	r5, r4, #32
   d60b4:	fa00 f304 	lsl.w	r3, r0, r4
   d60b8:	fa20 f005 	lsr.w	r0, r0, r5
   d60bc:	fa01 f204 	lsl.w	r2, r1, r4
   d60c0:	ea40 0002 	orr.w	r0, r0, r2
   d60c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60cc:	f141 0100 	adc.w	r1, r1, #0
   d60d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60d4:	bf08      	it	eq
   d60d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60da:	bd70      	pop	{r4, r5, r6, pc}
   d60dc:	f1c4 0520 	rsb	r5, r4, #32
   d60e0:	fa00 f205 	lsl.w	r2, r0, r5
   d60e4:	ea4e 0e02 	orr.w	lr, lr, r2
   d60e8:	fa20 f304 	lsr.w	r3, r0, r4
   d60ec:	fa01 f205 	lsl.w	r2, r1, r5
   d60f0:	ea43 0302 	orr.w	r3, r3, r2
   d60f4:	fa21 f004 	lsr.w	r0, r1, r4
   d60f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60fc:	fa21 f204 	lsr.w	r2, r1, r4
   d6100:	ea20 0002 	bic.w	r0, r0, r2
   d6104:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d610c:	bf08      	it	eq
   d610e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6112:	bd70      	pop	{r4, r5, r6, pc}
   d6114:	f094 0f00 	teq	r4, #0
   d6118:	d10f      	bne.n	d613a <__aeabi_dmul+0x1c2>
   d611a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d611e:	0040      	lsls	r0, r0, #1
   d6120:	eb41 0101 	adc.w	r1, r1, r1
   d6124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6128:	bf08      	it	eq
   d612a:	3c01      	subeq	r4, #1
   d612c:	d0f7      	beq.n	d611e <__aeabi_dmul+0x1a6>
   d612e:	ea41 0106 	orr.w	r1, r1, r6
   d6132:	f095 0f00 	teq	r5, #0
   d6136:	bf18      	it	ne
   d6138:	4770      	bxne	lr
   d613a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d613e:	0052      	lsls	r2, r2, #1
   d6140:	eb43 0303 	adc.w	r3, r3, r3
   d6144:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6148:	bf08      	it	eq
   d614a:	3d01      	subeq	r5, #1
   d614c:	d0f7      	beq.n	d613e <__aeabi_dmul+0x1c6>
   d614e:	ea43 0306 	orr.w	r3, r3, r6
   d6152:	4770      	bx	lr
   d6154:	ea94 0f0c 	teq	r4, ip
   d6158:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d615c:	bf18      	it	ne
   d615e:	ea95 0f0c 	teqne	r5, ip
   d6162:	d00c      	beq.n	d617e <__aeabi_dmul+0x206>
   d6164:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6168:	bf18      	it	ne
   d616a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d616e:	d1d1      	bne.n	d6114 <__aeabi_dmul+0x19c>
   d6170:	ea81 0103 	eor.w	r1, r1, r3
   d6174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6178:	f04f 0000 	mov.w	r0, #0
   d617c:	bd70      	pop	{r4, r5, r6, pc}
   d617e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6182:	bf06      	itte	eq
   d6184:	4610      	moveq	r0, r2
   d6186:	4619      	moveq	r1, r3
   d6188:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d618c:	d019      	beq.n	d61c2 <__aeabi_dmul+0x24a>
   d618e:	ea94 0f0c 	teq	r4, ip
   d6192:	d102      	bne.n	d619a <__aeabi_dmul+0x222>
   d6194:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6198:	d113      	bne.n	d61c2 <__aeabi_dmul+0x24a>
   d619a:	ea95 0f0c 	teq	r5, ip
   d619e:	d105      	bne.n	d61ac <__aeabi_dmul+0x234>
   d61a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d61a4:	bf1c      	itt	ne
   d61a6:	4610      	movne	r0, r2
   d61a8:	4619      	movne	r1, r3
   d61aa:	d10a      	bne.n	d61c2 <__aeabi_dmul+0x24a>
   d61ac:	ea81 0103 	eor.w	r1, r1, r3
   d61b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d61bc:	f04f 0000 	mov.w	r0, #0
   d61c0:	bd70      	pop	{r4, r5, r6, pc}
   d61c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d61ca:	bd70      	pop	{r4, r5, r6, pc}

000d61cc <__aeabi_ddiv>:
   d61cc:	b570      	push	{r4, r5, r6, lr}
   d61ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61da:	bf1d      	ittte	ne
   d61dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d61e0:	ea94 0f0c 	teqne	r4, ip
   d61e4:	ea95 0f0c 	teqne	r5, ip
   d61e8:	f000 f8a7 	bleq	d633a <__aeabi_ddiv+0x16e>
   d61ec:	eba4 0405 	sub.w	r4, r4, r5
   d61f0:	ea81 0e03 	eor.w	lr, r1, r3
   d61f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d61f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d61fc:	f000 8088 	beq.w	d6310 <__aeabi_ddiv+0x144>
   d6200:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6204:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6208:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d620c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6210:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6214:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6218:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d621c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6220:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6224:	429d      	cmp	r5, r3
   d6226:	bf08      	it	eq
   d6228:	4296      	cmpeq	r6, r2
   d622a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d622e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6232:	d202      	bcs.n	d623a <__aeabi_ddiv+0x6e>
   d6234:	085b      	lsrs	r3, r3, #1
   d6236:	ea4f 0232 	mov.w	r2, r2, rrx
   d623a:	1ab6      	subs	r6, r6, r2
   d623c:	eb65 0503 	sbc.w	r5, r5, r3
   d6240:	085b      	lsrs	r3, r3, #1
   d6242:	ea4f 0232 	mov.w	r2, r2, rrx
   d6246:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d624a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d624e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6252:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6256:	bf22      	ittt	cs
   d6258:	1ab6      	subcs	r6, r6, r2
   d625a:	4675      	movcs	r5, lr
   d625c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6260:	085b      	lsrs	r3, r3, #1
   d6262:	ea4f 0232 	mov.w	r2, r2, rrx
   d6266:	ebb6 0e02 	subs.w	lr, r6, r2
   d626a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d626e:	bf22      	ittt	cs
   d6270:	1ab6      	subcs	r6, r6, r2
   d6272:	4675      	movcs	r5, lr
   d6274:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6278:	085b      	lsrs	r3, r3, #1
   d627a:	ea4f 0232 	mov.w	r2, r2, rrx
   d627e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6282:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6286:	bf22      	ittt	cs
   d6288:	1ab6      	subcs	r6, r6, r2
   d628a:	4675      	movcs	r5, lr
   d628c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6290:	085b      	lsrs	r3, r3, #1
   d6292:	ea4f 0232 	mov.w	r2, r2, rrx
   d6296:	ebb6 0e02 	subs.w	lr, r6, r2
   d629a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d629e:	bf22      	ittt	cs
   d62a0:	1ab6      	subcs	r6, r6, r2
   d62a2:	4675      	movcs	r5, lr
   d62a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d62a8:	ea55 0e06 	orrs.w	lr, r5, r6
   d62ac:	d018      	beq.n	d62e0 <__aeabi_ddiv+0x114>
   d62ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d62b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d62b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d62ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d62be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d62c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d62c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d62ca:	d1c0      	bne.n	d624e <__aeabi_ddiv+0x82>
   d62cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62d0:	d10b      	bne.n	d62ea <__aeabi_ddiv+0x11e>
   d62d2:	ea41 0100 	orr.w	r1, r1, r0
   d62d6:	f04f 0000 	mov.w	r0, #0
   d62da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d62de:	e7b6      	b.n	d624e <__aeabi_ddiv+0x82>
   d62e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62e4:	bf04      	itt	eq
   d62e6:	4301      	orreq	r1, r0
   d62e8:	2000      	moveq	r0, #0
   d62ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d62ee:	bf88      	it	hi
   d62f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d62f4:	f63f aeaf 	bhi.w	d6056 <__aeabi_dmul+0xde>
   d62f8:	ebb5 0c03 	subs.w	ip, r5, r3
   d62fc:	bf04      	itt	eq
   d62fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6306:	f150 0000 	adcs.w	r0, r0, #0
   d630a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d630e:	bd70      	pop	{r4, r5, r6, pc}
   d6310:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6314:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6318:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d631c:	bfc2      	ittt	gt
   d631e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6322:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6326:	bd70      	popgt	{r4, r5, r6, pc}
   d6328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d632c:	f04f 0e00 	mov.w	lr, #0
   d6330:	3c01      	subs	r4, #1
   d6332:	e690      	b.n	d6056 <__aeabi_dmul+0xde>
   d6334:	ea45 0e06 	orr.w	lr, r5, r6
   d6338:	e68d      	b.n	d6056 <__aeabi_dmul+0xde>
   d633a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d633e:	ea94 0f0c 	teq	r4, ip
   d6342:	bf08      	it	eq
   d6344:	ea95 0f0c 	teqeq	r5, ip
   d6348:	f43f af3b 	beq.w	d61c2 <__aeabi_dmul+0x24a>
   d634c:	ea94 0f0c 	teq	r4, ip
   d6350:	d10a      	bne.n	d6368 <__aeabi_ddiv+0x19c>
   d6352:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6356:	f47f af34 	bne.w	d61c2 <__aeabi_dmul+0x24a>
   d635a:	ea95 0f0c 	teq	r5, ip
   d635e:	f47f af25 	bne.w	d61ac <__aeabi_dmul+0x234>
   d6362:	4610      	mov	r0, r2
   d6364:	4619      	mov	r1, r3
   d6366:	e72c      	b.n	d61c2 <__aeabi_dmul+0x24a>
   d6368:	ea95 0f0c 	teq	r5, ip
   d636c:	d106      	bne.n	d637c <__aeabi_ddiv+0x1b0>
   d636e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6372:	f43f aefd 	beq.w	d6170 <__aeabi_dmul+0x1f8>
   d6376:	4610      	mov	r0, r2
   d6378:	4619      	mov	r1, r3
   d637a:	e722      	b.n	d61c2 <__aeabi_dmul+0x24a>
   d637c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6380:	bf18      	it	ne
   d6382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6386:	f47f aec5 	bne.w	d6114 <__aeabi_dmul+0x19c>
   d638a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d638e:	f47f af0d 	bne.w	d61ac <__aeabi_dmul+0x234>
   d6392:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6396:	f47f aeeb 	bne.w	d6170 <__aeabi_dmul+0x1f8>
   d639a:	e712      	b.n	d61c2 <__aeabi_dmul+0x24a>

000d639c <__gedf2>:
   d639c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d63a0:	e006      	b.n	d63b0 <__cmpdf2+0x4>
   d63a2:	bf00      	nop

000d63a4 <__ledf2>:
   d63a4:	f04f 0c01 	mov.w	ip, #1
   d63a8:	e002      	b.n	d63b0 <__cmpdf2+0x4>
   d63aa:	bf00      	nop

000d63ac <__cmpdf2>:
   d63ac:	f04f 0c01 	mov.w	ip, #1
   d63b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d63b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d63b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63c0:	bf18      	it	ne
   d63c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d63c6:	d01b      	beq.n	d6400 <__cmpdf2+0x54>
   d63c8:	b001      	add	sp, #4
   d63ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d63ce:	bf0c      	ite	eq
   d63d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d63d4:	ea91 0f03 	teqne	r1, r3
   d63d8:	bf02      	ittt	eq
   d63da:	ea90 0f02 	teqeq	r0, r2
   d63de:	2000      	moveq	r0, #0
   d63e0:	4770      	bxeq	lr
   d63e2:	f110 0f00 	cmn.w	r0, #0
   d63e6:	ea91 0f03 	teq	r1, r3
   d63ea:	bf58      	it	pl
   d63ec:	4299      	cmppl	r1, r3
   d63ee:	bf08      	it	eq
   d63f0:	4290      	cmpeq	r0, r2
   d63f2:	bf2c      	ite	cs
   d63f4:	17d8      	asrcs	r0, r3, #31
   d63f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d63fa:	f040 0001 	orr.w	r0, r0, #1
   d63fe:	4770      	bx	lr
   d6400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6408:	d102      	bne.n	d6410 <__cmpdf2+0x64>
   d640a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d640e:	d107      	bne.n	d6420 <__cmpdf2+0x74>
   d6410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6418:	d1d6      	bne.n	d63c8 <__cmpdf2+0x1c>
   d641a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d641e:	d0d3      	beq.n	d63c8 <__cmpdf2+0x1c>
   d6420:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6424:	4770      	bx	lr
   d6426:	bf00      	nop

000d6428 <__aeabi_cdrcmple>:
   d6428:	4684      	mov	ip, r0
   d642a:	4610      	mov	r0, r2
   d642c:	4662      	mov	r2, ip
   d642e:	468c      	mov	ip, r1
   d6430:	4619      	mov	r1, r3
   d6432:	4663      	mov	r3, ip
   d6434:	e000      	b.n	d6438 <__aeabi_cdcmpeq>
   d6436:	bf00      	nop

000d6438 <__aeabi_cdcmpeq>:
   d6438:	b501      	push	{r0, lr}
   d643a:	f7ff ffb7 	bl	d63ac <__cmpdf2>
   d643e:	2800      	cmp	r0, #0
   d6440:	bf48      	it	mi
   d6442:	f110 0f00 	cmnmi.w	r0, #0
   d6446:	bd01      	pop	{r0, pc}

000d6448 <__aeabi_dcmpeq>:
   d6448:	f84d ed08 	str.w	lr, [sp, #-8]!
   d644c:	f7ff fff4 	bl	d6438 <__aeabi_cdcmpeq>
   d6450:	bf0c      	ite	eq
   d6452:	2001      	moveq	r0, #1
   d6454:	2000      	movne	r0, #0
   d6456:	f85d fb08 	ldr.w	pc, [sp], #8
   d645a:	bf00      	nop

000d645c <__aeabi_dcmplt>:
   d645c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6460:	f7ff ffea 	bl	d6438 <__aeabi_cdcmpeq>
   d6464:	bf34      	ite	cc
   d6466:	2001      	movcc	r0, #1
   d6468:	2000      	movcs	r0, #0
   d646a:	f85d fb08 	ldr.w	pc, [sp], #8
   d646e:	bf00      	nop

000d6470 <__aeabi_dcmple>:
   d6470:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6474:	f7ff ffe0 	bl	d6438 <__aeabi_cdcmpeq>
   d6478:	bf94      	ite	ls
   d647a:	2001      	movls	r0, #1
   d647c:	2000      	movhi	r0, #0
   d647e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6482:	bf00      	nop

000d6484 <__aeabi_dcmpge>:
   d6484:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6488:	f7ff ffce 	bl	d6428 <__aeabi_cdrcmple>
   d648c:	bf94      	ite	ls
   d648e:	2001      	movls	r0, #1
   d6490:	2000      	movhi	r0, #0
   d6492:	f85d fb08 	ldr.w	pc, [sp], #8
   d6496:	bf00      	nop

000d6498 <__aeabi_dcmpgt>:
   d6498:	f84d ed08 	str.w	lr, [sp, #-8]!
   d649c:	f7ff ffc4 	bl	d6428 <__aeabi_cdrcmple>
   d64a0:	bf34      	ite	cc
   d64a2:	2001      	movcc	r0, #1
   d64a4:	2000      	movcs	r0, #0
   d64a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d64aa:	bf00      	nop

000d64ac <__aeabi_dcmpun>:
   d64ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64b4:	d102      	bne.n	d64bc <__aeabi_dcmpun+0x10>
   d64b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64ba:	d10a      	bne.n	d64d2 <__aeabi_dcmpun+0x26>
   d64bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64c4:	d102      	bne.n	d64cc <__aeabi_dcmpun+0x20>
   d64c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64ca:	d102      	bne.n	d64d2 <__aeabi_dcmpun+0x26>
   d64cc:	f04f 0000 	mov.w	r0, #0
   d64d0:	4770      	bx	lr
   d64d2:	f04f 0001 	mov.w	r0, #1
   d64d6:	4770      	bx	lr

000d64d8 <__aeabi_d2iz>:
   d64d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d64dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d64e0:	d215      	bcs.n	d650e <__aeabi_d2iz+0x36>
   d64e2:	d511      	bpl.n	d6508 <__aeabi_d2iz+0x30>
   d64e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d64e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d64ec:	d912      	bls.n	d6514 <__aeabi_d2iz+0x3c>
   d64ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d64f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d64fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d64fe:	fa23 f002 	lsr.w	r0, r3, r2
   d6502:	bf18      	it	ne
   d6504:	4240      	negne	r0, r0
   d6506:	4770      	bx	lr
   d6508:	f04f 0000 	mov.w	r0, #0
   d650c:	4770      	bx	lr
   d650e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6512:	d105      	bne.n	d6520 <__aeabi_d2iz+0x48>
   d6514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6518:	bf08      	it	eq
   d651a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d651e:	4770      	bx	lr
   d6520:	f04f 0000 	mov.w	r0, #0
   d6524:	4770      	bx	lr
   d6526:	bf00      	nop

000d6528 <__aeabi_d2uiz>:
   d6528:	004a      	lsls	r2, r1, #1
   d652a:	d211      	bcs.n	d6550 <__aeabi_d2uiz+0x28>
   d652c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6530:	d211      	bcs.n	d6556 <__aeabi_d2uiz+0x2e>
   d6532:	d50d      	bpl.n	d6550 <__aeabi_d2uiz+0x28>
   d6534:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6538:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d653c:	d40e      	bmi.n	d655c <__aeabi_d2uiz+0x34>
   d653e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6546:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d654a:	fa23 f002 	lsr.w	r0, r3, r2
   d654e:	4770      	bx	lr
   d6550:	f04f 0000 	mov.w	r0, #0
   d6554:	4770      	bx	lr
   d6556:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d655a:	d102      	bne.n	d6562 <__aeabi_d2uiz+0x3a>
   d655c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6560:	4770      	bx	lr
   d6562:	f04f 0000 	mov.w	r0, #0
   d6566:	4770      	bx	lr

000d6568 <__aeabi_d2f>:
   d6568:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d656c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6570:	bf24      	itt	cs
   d6572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d657a:	d90d      	bls.n	d6598 <__aeabi_d2f+0x30>
   d657c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d658c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6590:	bf08      	it	eq
   d6592:	f020 0001 	biceq.w	r0, r0, #1
   d6596:	4770      	bx	lr
   d6598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d659c:	d121      	bne.n	d65e2 <__aeabi_d2f+0x7a>
   d659e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d65a2:	bfbc      	itt	lt
   d65a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d65a8:	4770      	bxlt	lr
   d65aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d65b2:	f1c2 0218 	rsb	r2, r2, #24
   d65b6:	f1c2 0c20 	rsb	ip, r2, #32
   d65ba:	fa10 f30c 	lsls.w	r3, r0, ip
   d65be:	fa20 f002 	lsr.w	r0, r0, r2
   d65c2:	bf18      	it	ne
   d65c4:	f040 0001 	orrne.w	r0, r0, #1
   d65c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d65d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d65d4:	ea40 000c 	orr.w	r0, r0, ip
   d65d8:	fa23 f302 	lsr.w	r3, r3, r2
   d65dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d65e0:	e7cc      	b.n	d657c <__aeabi_d2f+0x14>
   d65e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d65e6:	d107      	bne.n	d65f8 <__aeabi_d2f+0x90>
   d65e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d65ec:	bf1e      	ittt	ne
   d65ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d65f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d65f6:	4770      	bxne	lr
   d65f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d65fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6604:	4770      	bx	lr
   d6606:	bf00      	nop

000d6608 <__cxa_atexit>:
   d6608:	b510      	push	{r4, lr}
   d660a:	4c05      	ldr	r4, [pc, #20]	; (d6620 <__cxa_atexit+0x18>)
   d660c:	4613      	mov	r3, r2
   d660e:	b12c      	cbz	r4, d661c <__cxa_atexit+0x14>
   d6610:	460a      	mov	r2, r1
   d6612:	4601      	mov	r1, r0
   d6614:	2002      	movs	r0, #2
   d6616:	f3af 8000 	nop.w
   d661a:	bd10      	pop	{r4, pc}
   d661c:	4620      	mov	r0, r4
   d661e:	bd10      	pop	{r4, pc}
   d6620:	00000000 	.word	0x00000000

000d6624 <memcpy>:
   d6624:	b510      	push	{r4, lr}
   d6626:	1e43      	subs	r3, r0, #1
   d6628:	440a      	add	r2, r1
   d662a:	4291      	cmp	r1, r2
   d662c:	d004      	beq.n	d6638 <memcpy+0x14>
   d662e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6632:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6636:	e7f8      	b.n	d662a <memcpy+0x6>
   d6638:	bd10      	pop	{r4, pc}

000d663a <memset>:
   d663a:	4402      	add	r2, r0
   d663c:	4603      	mov	r3, r0
   d663e:	4293      	cmp	r3, r2
   d6640:	d002      	beq.n	d6648 <memset+0xe>
   d6642:	f803 1b01 	strb.w	r1, [r3], #1
   d6646:	e7fa      	b.n	d663e <memset+0x4>
   d6648:	4770      	bx	lr
	...

000d664c <srand>:
   d664c:	b538      	push	{r3, r4, r5, lr}
   d664e:	4b12      	ldr	r3, [pc, #72]	; (d6698 <srand+0x4c>)
   d6650:	681c      	ldr	r4, [r3, #0]
   d6652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6654:	4605      	mov	r5, r0
   d6656:	b9d3      	cbnz	r3, d668e <srand+0x42>
   d6658:	2018      	movs	r0, #24
   d665a:	f7fe fa61 	bl	d4b20 <malloc>
   d665e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6662:	63a0      	str	r0, [r4, #56]	; 0x38
   d6664:	8003      	strh	r3, [r0, #0]
   d6666:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d666a:	8043      	strh	r3, [r0, #2]
   d666c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6670:	8083      	strh	r3, [r0, #4]
   d6672:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6676:	80c3      	strh	r3, [r0, #6]
   d6678:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d667c:	8103      	strh	r3, [r0, #8]
   d667e:	2305      	movs	r3, #5
   d6680:	8143      	strh	r3, [r0, #10]
   d6682:	230b      	movs	r3, #11
   d6684:	8183      	strh	r3, [r0, #12]
   d6686:	2201      	movs	r2, #1
   d6688:	2300      	movs	r3, #0
   d668a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d668e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6690:	2200      	movs	r2, #0
   d6692:	611d      	str	r5, [r3, #16]
   d6694:	615a      	str	r2, [r3, #20]
   d6696:	bd38      	pop	{r3, r4, r5, pc}
   d6698:	2003e3bc 	.word	0x2003e3bc

000d669c <strlen>:
   d669c:	4603      	mov	r3, r0
   d669e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66a2:	2a00      	cmp	r2, #0
   d66a4:	d1fb      	bne.n	d669e <strlen+0x2>
   d66a6:	1a18      	subs	r0, r3, r0
   d66a8:	3801      	subs	r0, #1
   d66aa:	4770      	bx	lr

000d66ac <dynalib_user>:
   d66ac:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d66bc:	0000 0000 7055 6562 7461 4c20 6261 2073     ....Upbeat Labs 
   d66cc:	7244 202e 6157 7474 6f73 206e 6e45 7265     Dr. Wattson Ener
   d66dc:	7967 4420 7461 2061 7845 6d61 6c70 2065     gy Data Example 
   d66ec:	6b53 7465 6863 2a00 2a2a 2a2a 2a2a 2a2a     Sketch.*********
   d66fc:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   d670c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   d671c:	2a2a 2a2a 2a2a 2a2a 002a 7543 7272 6e65     *********.Curren
   d672c:	2074 203d 4c00 6e69 2065 7246 7165 6575     t = .Line Freque
   d673c:	636e 2079 203d 4100 616e 6f6c 2067 6e49     ncy = .Analog In
   d674c:	7570 2074 6f56 746c 6761 2065 203d 5000     put Voltage = .P
   d675c:	776f 7265 4620 6361 6f74 2072 203d 4100     ower Factor = .A
   d676c:	7463 7669 2065 6f50 6577 2072 203d 5200     ctive Power = .R
   d677c:	6165 7463 7669 2065 6f50 6577 2072 203d     eactive Power = 
   d678c:	4100 7070 7261 6e65 2074 6f50 6577 2072     .Apparent Power 
   d679c:	203d 1b00 0063 7245 6f72 2072 6572 7574     = ..c.Error retu
   d67ac:	6e72 6465 2021 0000                         rned! ..

000d67b4 <_ZTVN5spark13EthernetClassE>:
	...
   d67bc:	4bf1 000d 4be7 000d 4bdd 000d 4bd3 000d     .K...K...K...K..
   d67cc:	4bc7 000d 4bbb 000d 4baf 000d 4ba7 000d     .K...K...K...K..
   d67dc:	4b9d 000d 4b93 000d 504d 000d               .K...K..MP..

000d67e8 <_ZTV7TwoWire>:
	...
   d67f0:	4c11 000d 4c5b 000d 4c33 000d 4c13 000d     .L..[L..3L...L..
   d6800:	4c3b 000d 4c43 000d 4c4b 000d 4c53 000d     ;L..CL..KL..SL..

000d6810 <_ZTV9IPAddress>:
	...
   d6818:	4d85 000d 4d75 000d 4d77 000d 6162 6475     .M..uM..wM..baud
   d6828:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6838:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6848:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6858:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6868:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6878:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6888:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6898:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d68a8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d68b8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d68c8:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d68d8:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d68e8:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d68f8:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d6904 <_ZTVN5spark9MeshClassE>:
	...
   d690c:	4ec7 000d 4ebd 000d 4eb3 000d 4ea9 000d     .N...N...N...N..
   d691c:	4e9d 000d 4e91 000d 4e85 000d 4e7d 000d     .N...N...N..}N..
   d692c:	4e73 000d 4e69 000d 504d 000d               sN..iN..MP..

000d6938 <_ZTVN5spark12NetworkClassE>:
	...
   d6940:	4fe5 000d 4fef 000d 4ff9 000d 5003 000d     .O...O...O...P..
   d6950:	500d 000d 5019 000d 5025 000d 5031 000d     .P...P..%P..1P..
   d6960:	5039 000d 5043 000d 504d 000d 616e 006e     9P..CP..MP..nan.
   d6970:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
   d6980:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d6990:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d69a0:	656d 0000                                   me..

000d69a4 <_ZTV11USARTSerial>:
	...
   d69ac:	5455 000d 54a5 000d 54b3 000d 512d 000d     UT...T...T..-Q..
   d69bc:	5469 000d 548b 000d 5477 000d 549f 000d     iT...T..wT...T..
   d69cc:	5457 000d 545b 000d                         WT..[T..

000d69d4 <_ZTV9USBSerial>:
	...
   d69dc:	555d 000d 55ad 000d 55bb 000d 512d 000d     ]U...U...U..-Q..
   d69ec:	5599 000d 555f 000d 5575 000d 55a7 000d     .U.._U..uU...U..
   d69fc:	558b 000d 5559 000d                         .U..YU..

000d6a04 <_ZTVN5spark9WiFiClassE>:
	...
   d6a0c:	56c7 000d 56bd 000d 56b3 000d 5669 000d     .V...V...V..iV..
   d6a1c:	56a7 000d 569b 000d 568f 000d 5687 000d     .V...V...V...V..
   d6a2c:	567d 000d 5673 000d 504d 000d               }V..sV..MP..

000d6a38 <_ZSt7nothrow>:
   d6a38:	0000 0000                                   ....

000d6a3c <__sf_fake_stdin>:
	...

000d6a5c <__sf_fake_stdout>:
	...

000d6a7c <__sf_fake_stderr>:
	...
   d6a9c:	0043                                        C.

000d6a9e <link_const_variable_data_end>:
	...

000d6aa0 <link_constructors_location>:
   d6aa0:	000d4541 	.word	0x000d4541
   d6aa4:	000d4745 	.word	0x000d4745
   d6aa8:	000d4b59 	.word	0x000d4b59
   d6aac:	000d4bfd 	.word	0x000d4bfd
   d6ab0:	000d4e59 	.word	0x000d4e59
   d6ab4:	000d4f95 	.word	0x000d4f95
   d6ab8:	000d5119 	.word	0x000d5119
   d6abc:	000d53b9 	.word	0x000d53b9
   d6ac0:	000d540d 	.word	0x000d540d
   d6ac4:	000d5441 	.word	0x000d5441
   d6ac8:	000d56d1 	.word	0x000d56d1
   d6acc:	000d5979 	.word	0x000d5979
   d6ad0:	000d5a3d 	.word	0x000d5a3d
   d6ad4:	000d5ac1 	.word	0x000d5ac1
   d6ad8:	000d5b45 	.word	0x000d5b45

000d6adc <link_constructors_end>:
   d6adc:	00000000 	.word	0x00000000
